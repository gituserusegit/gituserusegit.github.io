<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初识网络编程</title>
    <link href="/2022/12/11/%E5%88%9D%E8%AF%86%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/12/11/%E5%88%9D%E8%AF%86%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>​本文主要总结了网络编程原理，使用Python进行服务器端编程，通过较为底层的socket库的编程实现过程了解主要流程。以下均采用TCP 。</p><span id="more"></span><h1 id="网络编程原理"><a href="#网络编程原理" class="headerlink" title="网络编程原理"></a>网络编程原理</h1><p>​一般把主动发起请求的一端称为client客户端，把被动接受请求并回应的一端成为server服务器端。</p><p>​client端与server端通信实质上是client某应用进程与server服务进程通信，该通信通道则由Socket（套接字）根据两端的地址（IP，port）建立。</p><p>​Socket是一种通用的网络编程接口，一般操作系统和编程语言都支持，通过该接口实际上进行了socket相关的系统调用，是很底层的库，因此直接用Socket库编程比较麻烦，但对于初学者了解原理很有帮助。</p><h3 id="服务器端编程主要步骤"><a href="#服务器端编程主要步骤" class="headerlink" title="服务器端编程主要步骤"></a>服务器端编程主要步骤</h3><h5 id="1-创建监听Socket对象"><a href="#1-创建监听Socket对象" class="headerlink" title="1 创建监听Socket对象"></a>1 创建监听Socket对象</h5><p>​server端需要对外暴露地址提供服务，因此需要有监听Socket绑定在某端口上等待连接。</p><h5 id="2-获取连接（创建新的Socket）"><a href="#2-获取连接（创建新的Socket）" class="headerlink" title="2 获取连接（创建新的Socket）"></a>2 获取连接（创建新的Socket）</h5><p>​负责监听的Socket对象使用accept方法阻塞等待client连接，当有client经历三次握手建立连接后将返回新的socket对象和客户端地址，此后将由该新的socket对象与client通信，而监听socket对象继续等待新的连接。</p><h5 id="3-业务处理"><a href="#3-业务处理" class="headerlink" title="3 业务处理"></a>3 业务处理</h5><p>​接收到用户数据后需要进行的处理，以及设置返回数据的内容和形式。</p><p>以下为示意图</p><p><img src="TCPsocket.png" alt="TCPsocket"></p><h1 id="Python编程实现"><a href="#Python编程实现" class="headerlink" title="Python编程实现"></a>Python编程实现</h1><p>​编写简单的群聊程序需，可接受不同用户的信息并分发到所有已连接客户端</p><h2 id="Socket库实现"><a href="#Socket库实现" class="headerlink" title="Socket库实现"></a>Socket库实现</h2><p>​通过多线程解决recv和accept方法阻塞的问题</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chat</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ip=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">810</span></span>):  <span class="hljs-comment"># 创建监听socket对象，绑定地址</span><br>        self.sk = socket.socket()<br>        self.laddr = (ip, port)<br>        self.clients = &#123;&#125;<br>        self.sk.bind(self.laddr)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self</span>):    <span class="hljs-comment"># 开始监听，由于accept方法阻塞，因此放到新的线程运行</span><br>        self.sk.listen()<br>        threading.Thread(target=self.accept_client.start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accept_client</span>(<span class="hljs-params">self</span>):    <span class="hljs-comment"># 开启新的socket维持通信，由于recv方法阻塞，因此放到新的线程运行</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            sk, raddr = self.sk.accept()<br>            self.clients[raddr] = sk<br>            <span class="hljs-built_in">print</span>(self.clients)<br>            threading.Thread(target=self.receive,args=(sk,raddr)).start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">receive</span>(<span class="hljs-params">self, sk:socket.socket, raddr</span>):     <span class="hljs-comment"># 将接收到的信息发送给每个连接的客户端</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            receive_data = sk.recv(<span class="hljs-number">1024</span>)<br>            msg = <span class="hljs-string">&#x27;&#123;&#125; from &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(receive_data,raddr).encode()<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.clients.values():<br>                i.send(msg)<br>                <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">stop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.clients.values():     <span class="hljs-comment"># 关闭与各客户端通信的socket</span><br>            i.close()<br>        self.sk.close()     <span class="hljs-comment"># 关闭监听socket</span><br><br>    <br>server = Chat()<br>server.start()<br></code></pre></td></tr></table></figure><p><img src="image-20221211112700171.png" alt="image-20221211112700171"></p><p>如上图，client可正常收发数据。下图中，client断开将导致server端报错，进程因异常无法正常工作。</p><p><img src="image-20221211112932859.png" alt="image-20221211112932859"></p><h3 id="改进1-客户端断开"><a href="#改进1-客户端断开" class="headerlink" title="改进1-客户端断开"></a>改进1-客户端断开</h3><p>​首先解决客户端退出问题，观察到client断开时会发送一个空数据，根据以上报错修改receive函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">   <span class="hljs-keyword">def</span> <span class="hljs-title function_">receive</span>(<span class="hljs-params">self, sk:socket.socket, raddr</span>):     <span class="hljs-comment"># 将接收到的信息发送给每个连接的客户端</span><br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           receive_data = sk.recv(<span class="hljs-number">1024</span>)<br>           msg1 = receive_data.decode().strip()<br>           <span class="hljs-keyword">if</span> msg1 == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span>:<span class="hljs-comment"># 接收到断开连接的信号，很容易顺便添加</span><br>               self.quit(raddr)<span class="hljs-comment"># 客户端退出命令</span><br>               self.clients.pop(raddr)<br>               <span class="hljs-keyword">break</span><br>           msg2 = <span class="hljs-string">&#x27;&#123;&#125; from &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(receive_data, raddr).encode()<br>           <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.clients.values():<br>               i.send(msg2)<br>               <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quit</span>(<span class="hljs-params">self, raddr</span>):<br>self.clients[raddr].close()<br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; close&#x27;</span>.<span class="hljs-built_in">format</span>(raddr))<br><br></code></pre></td></tr></table></figure><p><img src="image-20221211115245234.png" alt="image-20221211115245234"></p><h3 id="改进2-服务端结束"><a href="#改进2-服务端结束" class="headerlink" title="改进2-服务端结束"></a>改进2-服务端结束</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#代码最后添加</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">stop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.clients.values():     <span class="hljs-comment"># 关闭与各客户端通信的socket</span><br>            i.close()<br>        self.sk.close()     <span class="hljs-comment"># 关闭监听socket</span><br><br><br>server = Chat()<br>server.start()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    cmd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>).strip()<br>    <span class="hljs-keyword">if</span> cmd == <span class="hljs-string">&#x27;stop&#x27;</span>:<br>        server.stop()<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="改进3-线程安全"><a href="#改进3-线程安全" class="headerlink" title="改进3-线程安全"></a>改进3-线程安全</h3><p>​由于使用字典保存连接的socket，因此可能造成遍历字典元素时字典size变化的异常抛出，即某线程遍历时恰好切换到其它线程，其它线程有客户端断开或建立连接，造成保存客户端信息的字典元素增减，从而线程不安全。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#类初始化中创建锁</span><br>        self.lock = threading.Lock()<br>    <br><span class="hljs-comment">#所有涉及字典增删的指令加锁，例如</span><br>sk, raddr = self.sk.accept()<br>            <span class="hljs-keyword">with</span> self.lock:<br>                self.clients[raddr] = sk<br></code></pre></td></tr></table></figure><h1 id="最终代码附录"><a href="#最终代码附录" class="headerlink" title="最终代码附录"></a>最终代码附录</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chat</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ip=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">810</span></span>):  <span class="hljs-comment"># 创建监听socket对象，绑定地址</span><br>        self.sk = socket.socket()<br>        self.laddr = (ip, port)<br>        self.clients = &#123;&#125;<br>        self.lock = threading.Lock()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self</span>):    <span class="hljs-comment"># 开始监听，由于accept方法阻塞，因此放到新的线程运行</span><br>        self.sk.bind(self.laddr)<br>        self.sk.listen()<br>        threading.Thread(target=self.accept_client).start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accept_client</span>(<span class="hljs-params">self</span>):    <span class="hljs-comment"># 开启新的socket维持通信，由于recv方法阻塞，因此放到新的线程运行</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            sk, raddr = self.sk.accept()<br>            <span class="hljs-keyword">with</span> self.lock:<br>                self.clients[raddr] = sk<br>            <span class="hljs-built_in">print</span>(self.clients)<br>            threading.Thread(target=self.receive, args=(sk, raddr)).start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">receive</span>(<span class="hljs-params">self, sk: socket.socket, raddr</span>):     <span class="hljs-comment"># 将接收到的信息发送给每个连接的客户端</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            receive_data = sk.recv(<span class="hljs-number">1024</span>)<br>            msg1 = receive_data.decode().strip()<br>            <span class="hljs-keyword">if</span> msg1 == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> msg1 == <span class="hljs-string">&#x27;quit&#x27;</span>:<br>                <span class="hljs-keyword">with</span> self.lock:<br>                    self.quit(raddr)<br>                    self.clients.pop(raddr)<br>                <span class="hljs-keyword">break</span><br>            msg2 = <span class="hljs-string">&#x27;&#123;&#125; from &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(receive_data, raddr).encode()<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.clients.values():<br>                i.send(msg2)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">quit</span>(<span class="hljs-params">self, raddr</span>):<br>        self.clients[raddr].close()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; close&#x27;</span>.<span class="hljs-built_in">format</span>(raddr))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">stop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">with</span> self.lock:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.clients.values():     <span class="hljs-comment"># 关闭与各客户端通信的socket</span><br>                i.close()<br>        self.sk.close()     <span class="hljs-comment"># 关闭监听socket</span><br><br><br>server = Chat()<br>server.start()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    cmd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>).strip()<br>    <span class="hljs-keyword">if</span> cmd == <span class="hljs-string">&#x27;stop&#x27;</span>:<br>        server.stop()<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TCP server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python模拟ls命令(支持长短选项)</title>
    <link href="/2022/10/12/Python%E6%A8%A1%E6%8B%9Fls%E5%91%BD%E4%BB%A4-%E6%94%AF%E6%8C%81%E9%95%BF%E7%9F%AD%E9%80%89%E9%A1%B9/"/>
    <url>/2022/10/12/Python%E6%A8%A1%E6%8B%9Fls%E5%91%BD%E4%BB%A4-%E6%94%AF%E6%8C%81%E9%95%BF%E7%9F%AD%E9%80%89%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<p>​使用Python编写脚本实现ls命令功能，路径缺省为当前路径，支持-l、-a、-h和–all、–human-readable选项。</p><span id="more"></span><h1 id="初步设计思路"><a href="#初步设计思路" class="headerlink" title="初步设计思路"></a>初步设计思路</h1><h3 id="应具有的功能"><a href="#应具有的功能" class="headerlink" title="应具有的功能"></a>应具有的功能</h3><ul><li>​命令用法应为： ls [-l] [-h] [-a] [path]</li><li>​最基本的ls显示当前目录文件，-l显示详细信息，-h将文件大小信息转为方便阅读的格式，-a显示隐藏文件，path指定目录</li><li>​-h有长选项–human-readable-a有长选项–all</li><li>​路径参数缺省值为当前目录</li><li>​各参数位置顺序无影响</li></ul><p>难点是-l选项，需要获取文件各项元数据并按格式排列显示</p><h3 id="使用模块提供必要功能"><a href="#使用模块提供必要功能" class="headerlink" title="使用模块提供必要功能"></a>使用模块提供必要功能</h3><p>​<strong>argparse模块</strong>：参数分析模块。进行长短选项的参数解析，测试时还可设置传入参数，无需手动传参。</p><p>​所用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs python">parser = argparse.ArgumentParser() <span class="hljs-comment"># 获得一个参数解析器</span><br>parse_args方法 <span class="hljs-comment">#传参</span><br>add_argument方法 <span class="hljs-comment">#添加位置选项（必须或非必须）</span><br>args = parser.parse_args()  <span class="hljs-comment"># 分析脚本执行时传入参数，参数将成为该对象的属性</span><br>args=  parser.parse_args(<span class="hljs-string">&#x27;-l -a&#x27;</span>.split())<span class="hljs-comment">#相当于脚本运行时传入参数-l -a，方便测试</span><br>parser.print_help()  <span class="hljs-comment"># 打印帮助</span><br></code></pre></td></tr></table></figure><p>​解析器部分参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars=&#x27;-&#x27;, fromfile_prefix_chars=None, argument_default=None, conflict_handler=&#x27;error&#x27;, add_help=True, allow_abbrev=True)<br>prog #程序的名字，缺省使用 sys.argv[0] 的 basename<br>add_help #自动为解析器增加 -h 和 --help 选项，由于与human-readable短选项冲突，需要设为False<br>description #添加程序功能描述<br></code></pre></td></tr></table></figure><p>​add_argument部分参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">•name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.<br>•action - The basic type of action to be taken when this argument is encountered at the command line.#默认为store，保存参数值。store_const保存关键字传参。store_true与是否提供某参数有关，提供为True，否则为False。store_true正好相反<br>•nargs - The number of command-line arguments that should be consumed.#可写&#x27;?&#x27;、&#x27;*&#x27;和&#x27;+&#x27;<br>•default - The value produced if the argument is absent from the command line.#很好地与?和*配合<br>•help - A brief description of what the argument does.<br>•metavar - A name for the argument in usage messages.<br>•dest - The name of the attribute to be added to the object returned by parse_args().#设置属性名<br></code></pre></td></tr></table></figure><p>​<strong>pathlib模块的Path类</strong>：从3.4开始Python提供了pathlib模块，使用Path类进行文件和目录的相关操作更加方便。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">p = Path(&#x27;/etc&#x27;) #由字符串构造路径对象<br>iterdir() #将返回一个包含当前目录文件的生成器<br></code></pre></td></tr></table></figure><p>​<strong>stat模块</strong>：将stat()方法取到的元数据mode转化为类型rwx的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">stat.filemode(file.stat().st_mode)<br></code></pre></td></tr></table></figure><p>​<strong>datetime模块</strong>：将stat()方法取到的元数据mtime时间戳格式转换为日期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#从时间戳获取时间对象</span><br>dt = datetime.datetime.fromtimestamp(file.stat().st_mtime)<br><span class="hljs-comment">#时间对象方法，返回某格式的时间字符串</span><br>mtime = dt.strftime(<span class="hljs-string">&#x27;%Y %m %d %H:%M:%S&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="实现ls最基础功能"><a href="#实现ls最基础功能" class="headerlink" title="实现ls最基础功能"></a>实现ls最基础功能</h1><p>​实现ls [path]功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-comment">#创建解析器对象，打开帮助方便观察参数设置是否正确</span><br>lsparser=argparse.ArgumentParser(prog=<span class="hljs-string">&#x27;ls&#x27;</span>,add_help=<span class="hljs-literal">False</span>,description=<span class="hljs-string">&#x27;Show directory contents&#x27;</span>)<br><span class="hljs-comment">#添加名为path的选项，缺省值为&#x27;.&#x27;当前目录</span><br>lsparser.add_argument(<span class="hljs-string">&#x27;path&#x27;</span>,nargs=<span class="hljs-string">&#x27;?&#x27;</span>,default=<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;directory path&#x27;</span>)<br>args=lsparser.parse_args()<br><span class="hljs-comment">#获得包含目录下文件的生成器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">listdir</span>(<span class="hljs-params">path1</span>):<br>    dirpath = Path(path1)<br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> dirpath.iterdir()<br><br><span class="hljs-comment">#打印目录文件和namespace中的参数信息</span><br><span class="hljs-built_in">print</span>(*listdir(args.path))<br><span class="hljs-built_in">print</span>(args)<span class="hljs-comment">#测试用</span><br><br><span class="hljs-comment">#打印帮助，测试用</span><br>lsparser.print_help()<br></code></pre></td></tr></table></figure><p>​无任何选项执行效果（-h选项被占用，后续需置false）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">PS E:\Program Files (x86)\pythonProject&gt; python ls.py<br>Namespace(path=<span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-comment">#当前目录文件</span><br>.ab.txt .abc.txt .idea a ls.py main.py test.py test3.py venv xyz<br><span class="hljs-comment">#打印的帮助信息</span><br>usage: ls [path]<br><br>Show directory contents<br><br>positional arguments:<br>  path  directory path<br></code></pre></td></tr></table></figure><p>​指定目录</p><p><img src="image-20221012152439385.png" alt="image-20221012152439385"></p><h1 id="实现-a-选项"><a href="#实现-a-选项" class="headerlink" title="实现-a 选项"></a>实现-a 选项</h1><p>​从上文运行示例可见，由于是在window是环境，以’.’开头的隐藏文件也被打印了出来。可对函数稍作修改使-a选项实现windows和linux一样选择是否打印隐藏文件。</p><p>​以上文代码为基础，仅作以下修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#添加-a和--all选项，缺省为false</span><br>lsparser.add_argument(<span class="hljs-string">&#x27;-a&#x27;</span>,<span class="hljs-string">&#x27;--all&#x27;</span>,action=<span class="hljs-string">&#x27;store_true&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;show all contents of the directory containing hidden files&#x27;</span>)<br><br><span class="hljs-comment">#修改函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">listdir</span>(<span class="hljs-params">path1,<span class="hljs-built_in">all</span>=<span class="hljs-literal">False</span></span>):<br>    dirpath = Path(path1)<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> dirpath.iterdir():<br>        <span class="hljs-keyword">if</span> file.name.startswith(<span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">yield</span> file.name<br><br><span class="hljs-comment">#打印</span><br><span class="hljs-built_in">print</span>(*listdir(args.path,<span class="hljs-built_in">all</span>=args.<span class="hljs-built_in">all</span>))<br></code></pre></td></tr></table></figure><p>​打印帮助变为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">usage: ls [-a] [path]<br><br>Show directory contents<br><br>positional arguments:<br>  path       directory path<br><br>optional arguments:<br>  -a, --<span class="hljs-built_in">all</span>  show <span class="hljs-built_in">all</span> contents of the directory containing hidden files<br></code></pre></td></tr></table></figure><p>​测试选项效果</p><p><img src="image-20221012155632229.png" alt="image-20221012155632229"></p><p><img src="image-20221012155648664.png" alt="image-20221012155648664"></p><p><img src="image-20221012162434544.png" alt="image-20221012162434544"></p><h1 id="实现-l选项"><a href="#实现-l选项" class="headerlink" title="实现-l选项"></a>实现-l选项</h1><p>​ll效果如下。可见-l选项需要获取文件的元数据有mode、硬链接数、所属者、所属组、大小、日期、文件名<img src="image-20221012161332527.png" alt="image-20221012161332527"></p><h3 id="添加选项"><a href="#添加选项" class="headerlink" title="添加选项"></a>添加选项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lsparser.add_argument(<span class="hljs-string">&#x27;-l&#x27;</span>,action=<span class="hljs-string">&#x27;store_true&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;use a long listing format&#x27;</span>)<br></code></pre></td></tr></table></figure><p>​以下为新的帮助信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">usage: ls [-a] [-l] [path]<br><br>Show directory contents<br><br>positional arguments:<br>  path       directory path<br><br>optional arguments:<br>  -a, --<span class="hljs-built_in">all</span>  show <span class="hljs-built_in">all</span> contents of the directory containing hidden files<br>  -l         use a long listing <span class="hljs-built_in">format</span><br></code></pre></td></tr></table></figure><h3 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h3><p>​以下为stat（）方法取到的元数据，可见与ll显示格式不一致，需要作转换</p><p><img src="image-20221012164234224.png" alt="image-20221012164234224"></p><p>​<strong>mode转换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#将上文生成器函数略作修改，进行测试</span><br><span class="hljs-keyword">yield</span> stat.filemode(printfile.stat().st_mode)<br></code></pre></td></tr></table></figure><p>​测试效果如下</p><p><img src="image-20221012164637416.png" alt="image-20221012164637416"></p><p>​<strong>时间转换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将上文生成器函数略作修改，进行测试</span><br><span class="hljs-keyword">yield</span> datetime.datetime.fromtimestamp(printfile.stat().st_mtime).strftime(<span class="hljs-string">&#x27;%m %d %H:%M&#x27;</span>)<br></code></pre></td></tr></table></figure><p>​测试效果如下</p><p><img src="image-20221012172057132.png" alt="image-20221012172057132"></p><h3 id="修改函数"><a href="#修改函数" class="headerlink" title="修改函数"></a>修改函数</h3><p>​以上文函数和测试代码为基础进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">listdir</span>(<span class="hljs-params">path1,<span class="hljs-built_in">all</span>=<span class="hljs-literal">False</span>,longlist=<span class="hljs-literal">False</span></span>):<br>    dirpath = Path(path1)<br>    <span class="hljs-keyword">for</span> printfile <span class="hljs-keyword">in</span> dirpath.iterdir():<br>        <span class="hljs-keyword">if</span> printfile.name.startswith(<span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>:<br>            <span class="hljs-keyword">continue</span><br>        stats = printfile.stat()<br>        mode = stat.filemode(stats.st_mode)<br>        mtime = datetime.datetime.fromtimestamp(stats.st_mtime).strftime(<span class="hljs-string">&#x27;%m %d %H:%M&#x27;</span>)<br>        <span class="hljs-keyword">yield</span> printfile.name <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> longlist <span class="hljs-keyword">else</span> (mode, stats.st_nlink, stats.st_uid, stats.st_gid,stats.st_size, mtime, printfile.name)<br>        <br><br><span class="hljs-built_in">print</span>(*listdir(args.path,<span class="hljs-built_in">all</span>=args.<span class="hljs-built_in">all</span>,longlist=args.l),sep=<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">if</span> args.l <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(*listdir(args.path,<span class="hljs-built_in">all</span>=args.<span class="hljs-built_in">all</span>,longlist=args.l),sep=<span class="hljs-string">&#x27;\t&#x27;</span>)<br></code></pre></td></tr></table></figure><p>​测试效果</p><p><img src="image-20221012174101466.png" alt="image-20221012174101466"></p><p><img src="image-20221012174124754.png" alt="image-20221012174124754"></p><h1 id="实现-h选项"><a href="#实现-h选项" class="headerlink" title="实现-h选项"></a>实现-h选项</h1><p>​默认显示单位为字节，转换为K、M、G等单位。</p><h3 id="添加选项-1"><a href="#添加选项-1" class="headerlink" title="添加选项"></a>添加选项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lsparser.add_argument(<span class="hljs-string">&#x27;-h&#x27;</span>,<span class="hljs-string">&#x27;--human-readable&#x27;</span>,action=<span class="hljs-string">&#x27;store_true&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;with -l and -s, print sizes like 1K 234M 2G etc&#x27;</span>)<br></code></pre></td></tr></table></figure><p>​新的帮助信息</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">usage: ls [-<span class="hljs-keyword">a</span>] [-l] [-h] [path]<br><br>Show <span class="hljs-built_in">directory</span> contents<br><br>positional arguments:<br>  path                  <span class="hljs-built_in">directory</span> path<br><br>optional arguments:<br>  -<span class="hljs-keyword">a</span>, <span class="hljs-comment">--all             show all contents of the directory containing hidden</span><br> <span class="hljs-built_in">files</span><br>  -l                    use <span class="hljs-keyword">a</span> <span class="hljs-keyword">long</span> listing <span class="hljs-built_in">format</span><br>  -h, <span class="hljs-comment">--human-readable  with -l and -s, print sizes like 1K 234M 2G etc</span><br></code></pre></td></tr></table></figure><h3 id="函数修改"><a href="#函数修改" class="headerlink" title="函数修改"></a>函数修改</h3><p>​添加转换字节单位函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">humanreadable</span>(<span class="hljs-params">size</span>):<br>    k = <span class="hljs-number">0</span><br>    units = <span class="hljs-string">&quot; KMG&quot;</span><br>    <span class="hljs-keyword">while</span> size//<span class="hljs-number">1000</span>:<br>        size = size//<span class="hljs-number">1000</span><br>        k += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(size,units[k])<br></code></pre></td></tr></table></figure><p>​listdir函数仅作以下修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#添加参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">listdir</span>(<span class="hljs-params">path1,<span class="hljs-built_in">all</span>=<span class="hljs-literal">False</span>,longlist=<span class="hljs-literal">False</span>,hread=<span class="hljs-literal">False</span></span>):<br>    dirpath = Path(path1)<br>    <span class="hljs-keyword">for</span> printfile <span class="hljs-keyword">in</span> dirpath.iterdir():<br>        <span class="hljs-keyword">if</span> printfile.name.startswith(<span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>:<br>            <span class="hljs-keyword">continue</span><br>        stats = printfile.stat()<br>        mode = stat.filemode(stats.st_mode)<br>        mtime = datetime.datetime.fromtimestamp(stats.st_mtime).strftime(<span class="hljs-string">&#x27;%m %d %H:%M&#x27;</span>)<br>        <span class="hljs-comment">#根据参数返回不同的size值</span><br>        size = humanreadable(stats.st_size) <span class="hljs-keyword">if</span> hread <span class="hljs-keyword">else</span> stats.st_size<br>        <span class="hljs-keyword">yield</span> printfile.name <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> longlist <span class="hljs-keyword">else</span> (mode, stats.st_nlink, stats.st_uid, stats.st_gid,size, mtime, printfile.name)<br></code></pre></td></tr></table></figure><p>​打印及传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(*listdir(args.path,<span class="hljs-built_in">all</span>=args.<span class="hljs-built_in">all</span>,longlist=args.l,hread=args.human_readable),sep=<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">if</span> args.l <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(*listdir(args.path,<span class="hljs-built_in">all</span>=args.<span class="hljs-built_in">all</span>,longlist=args.l,hread=args.human_readable),sep=<span class="hljs-string">&#x27;\t&#x27;</span>)<br></code></pre></td></tr></table></figure><p>​测试效果如下</p><p><img src="image-20221012181502268.png" alt="image-20221012181502268"></p><p><img src="image-20221012181524782.png" alt="image-20221012181524782"></p><h1 id="最终代码附录"><a href="#最终代码附录" class="headerlink" title="最终代码附录"></a>最终代码附录</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> stat<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>lsparser=argparse.ArgumentParser(prog=<span class="hljs-string">&#x27;ls&#x27;</span>,add_help=<span class="hljs-literal">False</span>,description=<span class="hljs-string">&#x27;Show directory contents&#x27;</span>)<br>lsparser.add_argument(<span class="hljs-string">&#x27;path&#x27;</span>,nargs=<span class="hljs-string">&#x27;?&#x27;</span>,default=<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;directory path&#x27;</span>)<br>lsparser.add_argument(<span class="hljs-string">&#x27;-a&#x27;</span>,<span class="hljs-string">&#x27;--all&#x27;</span>,action=<span class="hljs-string">&#x27;store_true&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;show all contents of the directory containing hidden files&#x27;</span>)<br>lsparser.add_argument(<span class="hljs-string">&#x27;-l&#x27;</span>,action=<span class="hljs-string">&#x27;store_true&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;use a long listing format&#x27;</span>)<br>lsparser.add_argument(<span class="hljs-string">&#x27;-h&#x27;</span>,<span class="hljs-string">&#x27;--human-readable&#x27;</span>,action=<span class="hljs-string">&#x27;store_true&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;with -l and -s, print sizes like 1K 234M 2G etc&#x27;</span>)<br>args=lsparser.parse_args()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">humanreadable</span>(<span class="hljs-params">size</span>):<br>    k = <span class="hljs-number">0</span><br>    units = <span class="hljs-string">&quot; KMG&quot;</span><br>    <span class="hljs-keyword">while</span> size//<span class="hljs-number">1000</span>:<br>        size = size//<span class="hljs-number">1000</span><br>        k += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(size,units[k])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">listdir</span>(<span class="hljs-params">path1,<span class="hljs-built_in">all</span>=<span class="hljs-literal">False</span>,longlist=<span class="hljs-literal">False</span>,hread=<span class="hljs-literal">False</span></span>):<br>    dirpath = Path(path1)<br>    <span class="hljs-keyword">for</span> printfile <span class="hljs-keyword">in</span> dirpath.iterdir():<br>        <span class="hljs-keyword">if</span> printfile.name.startswith(<span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>:<br>            <span class="hljs-keyword">continue</span><br>        stats = printfile.stat()<br>        mode = stat.filemode(stats.st_mode)<br>        mtime = datetime.datetime.fromtimestamp(stats.st_mtime).strftime(<span class="hljs-string">&#x27;%m %d %H:%M&#x27;</span>)<br>        size = humanreadable(stats.st_size) <span class="hljs-keyword">if</span> hread <span class="hljs-keyword">else</span> stats.st_size<br>        <span class="hljs-keyword">yield</span> printfile.name <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> longlist <span class="hljs-keyword">else</span> (mode, stats.st_nlink, stats.st_uid, stats.st_gid,size, mtime, printfile.name)<br><br><br><span class="hljs-built_in">print</span>(*listdir(args.path,<span class="hljs-built_in">all</span>=args.<span class="hljs-built_in">all</span>,longlist=args.l,hread=args.human_readable),sep=<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">if</span> args.l <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(*listdir(args.path,<span class="hljs-built_in">all</span>=args.<span class="hljs-built_in">all</span>,longlist=args.l,hread=args.human_readable),sep=<span class="hljs-string">&#x27;\t&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p><img src="image-20221012182243419.png" alt="image-20221012182243419"></p><p><img src="image-20221012182137985.png" alt="image-20221012182137985"></p><p><img src="image-20221012182211571.png" alt="image-20221012182211571"></p><p><img src="image-20221012182320731.png" alt="image-20221012182320731"></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><img src="image-20221012190323600.png" alt="image-20221012190323600"></p><p><img src="image-20221012190452360.png" alt="image-20221012190452360"></p><p><img src="image-20221012190543605.png" alt="image-20221012190543605"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用shell小脚本</title>
    <link href="/2022/09/28/%E5%AE%9E%E7%94%A8shell%E5%B0%8F%E8%84%9A%E6%9C%AC/"/>
    <url>/2022/09/28/%E5%AE%9E%E7%94%A8shell%E5%B0%8F%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>​一些日常可能使用的脚本</p><span id="more"></span><h1 id="统计连接数"><a href="#统计连接数" class="headerlink" title="统计连接数"></a>统计连接数</h1><p>​netstat常用参数</p><p> -t（指定tcp） -n（不解析主机、端口、用户等名字）  -l(显示服务器监听的socket信息)  -a（显示所有sockets，默认为只显示connected状态）</p><h3 id="netstat统计tcp各状态数量"><a href="#netstat统计tcp各状态数量" class="headerlink" title="netstat统计tcp各状态数量"></a>netstat统计tcp各状态数量</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>file_path=&quot;/var/log/tcp/status-`date +%F`.log&quot;<br>netstat -na | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27; &gt; $&#123;file_path&#125;<br>echo -e &quot;tcp status:\n`cat $file_path`&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行效果</span><br>tcp status:<br>LISTEN 3<br>ESTABLISHED 3<br></code></pre></td></tr></table></figure><h3 id="netstat统计tcp建立连接的IP"><a href="#netstat统计tcp建立连接的IP" class="headerlink" title="netstat统计tcp建立连接的IP"></a>netstat统计tcp建立连接的IP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>file_path=&quot;/var/log/tcp/connected-`date +%F`.log&quot;<br>netstat -nt | awk -F&#x27;[ ]+|:&#x27; &#x27;NR&gt;2&#123;print $6&#125;&#x27; | sort | uniq -c | sort -nr &gt; $&#123;file_path&#125;<br>echo -e &quot;top 10 tcp connected ip:\n`head -10 $file_path`&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行效果</span><br>top 10 tcp connected ip:<br>      2 10.0.0.1<br>      1 10.0.0.89<br></code></pre></td></tr></table></figure><h1 id="统计nginx日志某时间段内访问"><a href="#统计nginx日志某时间段内访问" class="headerlink" title="统计nginx日志某时间段内访问"></a>统计nginx日志某时间段内访问</h1><p>​取出5分钟内访问记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -n &quot;/`date +%H:%M -d &#x27;-5minutes&#x27;`/,/`date +%H:%M`/p&quot; /var/log/nginx/access.log<br></code></pre></td></tr></table></figure><p>​从访问记录取出ip和访问次数</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sed -n <span class="hljs-string">&quot;/`date +%H:%M -d &#x27;-5minutes&#x27;`/,/`date +%H:%M`/p&quot;</span> /var/<span class="hljs-keyword">log</span>/nginx/access.log | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>| <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr<br></code></pre></td></tr></table></figure><p>​写成脚本,将5分钟内访问次数超过100次的ip禁止访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>LogPath=&quot;/var/log/nginx/access.log&quot;<br>IpList=&quot;/tmp/nginx/ip-`date +%F`.log&quot;<br>AccessTimes=100<br>sed -n &quot;/`date +%H:%M -d &#x27;-5minutes&#x27;`/,/`date +%H:%M`/p&quot; $&#123;LogPath&#125; |awk &#x27;&#123;print $1&#125;&#x27;|  sort | uniq -c | sort -nr &gt; $&#123;IpList&#125;<br>while read times ip;do<br>        if [ $times -ge $&#123;AccessTime&#125; ];then<br>        echo $ip &gt;&gt; /tmp/IpBanned.txt<br>        iptables -A INPUT -t filter -s $ip -j DROP<br>        fi<br>done &lt;  $&#123;IpList&#125;<br>echo &quot;`cat IpBanned.txt|wc -l` IP access times more than $&#123;AccessTimes&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行结果，如果超过次数，执行脚本后本机10.0.0.1的ssh连接立即断开</span><br>cat /tmp/nginx/ip-2022-09-28.log<br>     26 10.0.0.1<br></code></pre></td></tr></table></figure><h1 id="生成n位随机数字、字符"><a href="#生成n位随机数字、字符" class="headerlink" title="生成n位随机数字、字符"></a>生成n位随机数字、字符</h1><h3 id="8位随机数字"><a href="#8位随机数字" class="headerlink" title="8位随机数字"></a>8位随机数字</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">date</span>命令获取</span><br>date +%s%N | cut -c1-8 <br><span class="hljs-meta prompt_">#</span><span class="language-bash">openssl命令获取</span><br>openssl rand -base64 8 | cksum | cut -c1-8<br><span class="hljs-meta prompt_">#</span><span class="language-bash">RANDOm系统变量</span><br>echo &quot;$RANDOM&quot;|cksum | cut -c 1-8<br></code></pre></td></tr></table></figure><h3 id="8位数字字母"><a href="#8位数字字母" class="headerlink" title="8位数字字母"></a>8位数字字母</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">改为<span class="hljs-built_in">md5sum</span></span><br>date +%s%N | md5sum | cut -c1-8 <br>openssl rand -base64 8 | md5sum | cut -c1-8<br>echo &quot;$RANDOM&quot;| md5sum | cut -c 1-8<br></code></pre></td></tr></table></figure><h3 id="8位数字字母特殊字符"><a href="#8位数字字母特殊字符" class="headerlink" title="8位数字字母特殊字符"></a>8位数字字母特殊字符</h3><p>使用mkpasswd命令，由expect包提供。默认2位数字，2位小写字母，2位大写字母，1位特殊字符</p><p>-l指定位数，-s特殊字符位数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkpasswd</span> -l <span class="hljs-number">8</span> -s <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux内核参数优化小结（持续更新）</title>
    <link href="/2022/09/24/Linux%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96%E5%B0%8F%E7%BB%93/"/>
    <url>/2022/09/24/Linux%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​主要汇总了一些常用的Linux内核优化参数。</p><span id="more"></span><p>​为了持续生效直接修改文件&#x2F;etc&#x2F;sysctl.conf。一般采用sysctl -a再过滤出相关参数，修改文件后sysctl -p立即生效。</p><p>​比较常见的是根据服务器性能增大文件句柄限制，包括系统层面，用户层面和进程层面的限制。防火墙、路由和其他需要做网络层转发的需要开启允许IP转发的参数，Keepalived备用节点需要修改允许bind本机没有的IP。</p><p>​系统级别资源限制&#x2F;etc&#x2F;security&#x2F;limits.conf。分为软限制和硬限制：</p><ul><li>软限制(soft limit):内核实际执行的限制,任何进程都可以将软限制设置为任意小于或等于对进程限制的硬限制的值、最大线程数(noproc)和文件数(nofile)。</li><li>硬限制(hard limit):可以在任何时候任何进程中设置,但硬限制只能由root修改</li></ul><h1 id="服务器通用优化"><a href="#服务器通用优化" class="headerlink" title="服务器通用优化"></a>服务器通用优化</h1><p>​Linux默认对于系统和进程有较严格的资源限制，无法满足服务器的需求。可用ulimit -a查看进程各项限制。</p><h3 id="最大打开文件数"><a href="#最大打开文件数" class="headerlink" title="最大打开文件数"></a>最大打开文件数</h3><p>修改**&#x2F;etc&#x2F;sysctl.conf**</p><p><strong>fs.file-max</strong></p><p>​系统级别最大打开文件数</p><p><strong>fs.nr_open</strong></p><p>​进程最大打开文件数</p><p>修改**&#x2F;etc&#x2F;security&#x2F;limits.conf**</p><p>* **soft nofile ** </p><p>* **hard nofile ** </p><p>​用户最大打开文件数。可指定用户，*为所有用户</p><h3 id="进程限制"><a href="#进程限制" class="headerlink" title="进程限制"></a>进程限制</h3><p>修改**&#x2F;etc&#x2F;security&#x2F;limits.conf**</p><p><strong>kernel.pid_max</strong></p><p>​最大打开进程数</p><p>*  <strong>soft nproc 65535</strong> </p><p>*  <strong>hard nproc 65535</strong></p><p>​用户达到该限制后，无法创建新的进程。</p><h3 id="消息队列设置"><a href="#消息队列设置" class="headerlink" title="消息队列设置"></a>消息队列设置</h3><p>修改**&#x2F;etc&#x2F;security&#x2F;limits.conf**</p><p><strong>kernel.msgmnb</strong></p><p>​消息队列的最大字节数</p><p><strong>kernel.msgmni</strong> </p><p>​最多允许创建多少个消息队列</p><p><strong>kernel.msgmax</strong> </p><p>​消息队列单条数据最大的长度</p><h3 id="网络连接设置"><a href="#网络连接设置" class="headerlink" title="网络连接设置"></a>网络连接设置</h3><p><strong>net.core.netdev_max_backlog</strong> </p><p>​每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</p><p><strong>net.core.somaxconn</strong></p><p>​每个端口最大监听队列</p><p><strong>ip_conntrack_max</strong></p><p>​系统支持的最大ipv4连接数，默认值与内存有关</p><h3 id="k8s环境要求"><a href="#k8s环境要求" class="headerlink" title="k8s环境要求"></a>k8s环境要求</h3><p><strong>net.bridge.bridge-nf-call-iptables: 1</strong>  </p><p><strong>net.bridge.bridge-nf-call-ip6tables: 1</strong> </p><h1 id="web服务TCP优化"><a href="#web服务TCP优化" class="headerlink" title="web服务TCP优化"></a>web服务TCP优化</h1><p>​基本思路是：增加最大接受的访问数，适当减少等待时间和重试次数，适当减少非活动连接数及时断开与关闭但没有发送Fin的客户端连接，适当减少timewait连接并设置好回收和连接复用。</p><p><img src="image-20220924163604105.png" alt="image-20220924163604105"></p><p><strong>net.ipv4.tcp_fin_timeout</strong></p><p>​表示套接字有本端要求关闭，这个参数决定了它保持在FIN_WAIT_2状态的时间，默认值是60s</p><p><strong>net.ipv4.tcp_max_tw_buckets</strong></p><p>​表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数值，TIME_WAIT套接字将立刻被清除并打印警告信息。也不能设置得太低，否则客户端再次通信需要建立新的连接。</p><p><strong>net.ipv4.tcp_tw_reuse</strong></p><p>​timewait状态socket复用</p><p><strong>net.ipv4.tcp_tw_recycle</strong></p><p>​置为1后TIME_WAIT不用再等待2MSL的时间进行释放连接</p><p><strong>net.ipv4.tcp_keepalive_time</strong></p><p>​TCP发送Keepalive消息（检测客户端连接健康）的频度。默认是2小时，建议改为10分钟</p><p><strong>net.ipv4.ip_local_port_range</strong></p><p>​允许打开的端口范围，影响最大并发连接数</p><p><strong>net.ipv4.tcp_max_syn_backlog</strong></p><p>​该参数为服务器端用于记录那些尚未收到客户端确认信息的连接请求最大值。默认为128，建议加大队列的长度</p><p><strong>net.ipv4.tcp_syn_retries</strong></p><p>​表示在内核放弃建立连接之前发送SYN包的数量，默认值是6次</p><p><strong>net.ipv4.tcp_synack_retries</strong></p><p>​参数值决定了内核放弃连接之前发送SYN+ACK包的数量，默认值为5</p><p><strong>net.ipv4.tcp_max_orphans</strong></p><p>​系统所能处理不属于任何进程的TCP的socket最大数量</p><p><strong>net.ipv4.tcp_syncookies &#x3D; 1</strong></p><p>​防止syn flood恶意半连接攻击</p><p><strong>net.core.somaxconn</strong></p><p>​每个端口最大监听队列，影响最大并发TCP连接数，默认挂起最大数量128较小</p><p><strong>net.core.netdev_max_backlog</strong></p><p>​表示当每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许发送到内存队列的数据包最大数</p><p><strong>net.core.wmem_default</strong></p><p>该参数指定了发送套接字缓冲区大小的缺省值(以字节为单位)</p><p>**net.core.rmem_default **</p><p>该参数指定了接收套接字缓冲区大小的缺省值(以字节为单位)</p><p>**net.core.rmem_max **</p><p>该参数指定了接收套接字缓冲区大小的最大值(以字节为单位)</p><p><strong>net.core.wmem_max</strong></p><p>该参数指定了发送套接字缓冲区大小的最大值(以字节为单位)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用服务调优小结（持续更新）</title>
    <link href="/2022/09/24/%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E8%B0%83%E4%BC%98%E5%B0%8F%E7%BB%93/"/>
    <url>/2022/09/24/%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E8%B0%83%E4%BC%98%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​主要收集了一些常用服务的调优参数和改进思路。</p><p>​<span id="more"></span></p><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p>​服务部署和配置修改时可进行以下设置。</p><h3 id="1-错误页面"><a href="#1-错误页面" class="headerlink" title="1.错误页面"></a>1.错误页面</h3><p>​返回自制的错误页面而不是显示默认错误页面，或者用户访问不存在的资源时跳转到首页</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在http配置块中添加</span><br>fastcgi_intercept_errors on<br><span class="hljs-meta prompt_">#</span><span class="language-bash">server配置块中添加</span><br>error_page   404  /404.html;<br>    location = /404.html &#123;<br>        #使用绝对地址， 跳转服务器/usr/local/nginx/html/404.html<br>        root   /usr/local/nginx/html;<br>    &#125;<br>    # 采用另一种写法<br>    error_page   500 502 503 504  /sorry.html;<br>    location = /sorry.html &#123;<br>        # 使用相对地址, 跳转nginx安装目录下的html/sorry.html<br>        root   html;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="2-开启状态页（方便配合zabbix采集）"><a href="#2-开启状态页（方便配合zabbix采集）" class="headerlink" title="2.开启状态页（方便配合zabbix采集）"></a>2.开启状态页（方便配合zabbix采集）</h3><p>​添加模块–with-http_stub_status_module。通过curl该页面查看，以下为参数含义。</p><ul><li><p>Active connections  当前活动连接数</p></li><li><p>Accepts   客户端连接总数</p></li><li><p>Handled  已处理连接</p></li><li><p>Requests  客户端发送的请求数</p></li><li><p>Reading 正在读取请求报文头的数量</p></li><li><p>Writing 正在构建的响应报文的数量</p></li><li><p>Waiting 当前等待响应客户端数</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">http或server部分添加</span><br>location /status&#123;<br>         stub_status on;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-防止too-many-open-files错误"><a href="#3-防止too-many-open-files错误" class="headerlink" title="3.防止too many  open files错误"></a>3.防止too many  open files错误</h3><p>​修改events部分配置</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">events&#123;<br>worker_connections <span class="hljs-number">10000</span>;<span class="hljs-meta">#根据服务器性能适当调大worker进程最大并发连接</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​同时修改系统内核参数（最大打开文件数）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim  /etc/security/limits.conf<br>* soft nofile 114514#适当调大即可<br>* hard nofile 114514<br></code></pre></td></tr></table></figure><h3 id="4-设置缓存"><a href="#4-设置缓存" class="headerlink" title="4.设置缓存"></a>4.设置缓存</h3><p>​客户端请求报文缓存</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx">http&#123;<br><br><span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">10</span>;  <span class="hljs-comment">#保持连接的超时时间</span><br><br><span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<span class="hljs-comment">#开启压缩</span><br><br><span class="hljs-attribute">gzip_min_length</span> <span class="hljs-number">1000</span>;<br><br><span class="hljs-attribute">client_header_buffer_size</span> <span class="hljs-number">1k</span>; <span class="hljs-comment">#默认请求包头信息的缓存</span><br><br><span class="hljs-attribute">large_client_header_buffers</span> <span class="hljs-number">44k</span>; <span class="hljs-comment">#大请求包头部信息的缓存个数与容量</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>​如果有大量静态资源读请求，可缓存文件句柄</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx">http&#123;<br><span class="hljs-attribute">open_file_cache</span>   max=<span class="hljs-number">2000</span> inactive=<span class="hljs-number">20s</span>;<span class="hljs-comment">#最大缓存2000文件句柄（可理解为路径），20s内无请求则关闭</span><br><span class="hljs-attribute">open_file_cache_valid</span> <span class="hljs-number">60s</span>;<span class="hljs-comment">#缓存有效时间</span><br><span class="hljs-attribute">open_file_cache_min_uses</span> <span class="hljs-number">5</span>;<span class="hljs-comment">#访问超过5次缓存</span><br><span class="hljs-attribute">open_file_cache_errors</span> <span class="hljs-literal">off</span>;<span class="hljs-comment">#缓存无效的文件句柄</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​将一些静态资源缓存到客户端</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> ~*\.(jpg|jpeg|git|png|css|js|ico|xml)$ &#123;<br>           <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>           <span class="hljs-attribute">Expires</span> <span class="hljs-number">30d</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-对每个IP限流"><a href="#5-对每个IP限流" class="headerlink" title="5.对每个IP限流"></a>5.对每个IP限流</h3><p>​编译时需要添加ngx_http_limit_req_module</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#http配置块中添加</span><br><span class="hljs-attribute">limit_req_zone</span> <span class="hljs-variable">$binary_remote_addr</span> zone=one:<span class="hljs-number">10m</span> rate=1r/s;<span class="hljs-comment">#zone，可理解为标签，给后面使用匹配。rate为每IP每秒最大处理请求数</span><br><span class="hljs-comment">#server块中添加</span><br><span class="hljs-section">location</span> <span class="hljs-regexp">~* .htm$</span> &#123;<br><span class="hljs-attribute">limit_req</span> zone=one burst=<span class="hljs-number">5</span>  nodelay;<span class="hljs-comment">#burst可理解为缓冲队列的长度，并发过大队列中超过5个则不会再接受请求</span><br><span class="hljs-attribute">proxy_pass</span> http://backend_tomcat;<br>&#125;<br></code></pre></td></tr></table></figure><p>​如果客户端与服务器端还有代理层如CDN，需要获取真实客户端IP。CDN一般有设置X-Forward-for</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">map <span class="hljs-variable">$http_x_forwarded_for</span>  <span class="hljs-variable">$clientRealIp</span> &#123;<br>       <span class="hljs-string">&quot;&quot;</span>      <span class="hljs-variable">$remote_addr</span>;<br>       ~^(<span class="hljs-string">?P</span>&lt;firstAddr&gt;[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>\.]+),<span class="hljs-string">?.</span>*<span class="hljs-variable">$ </span> <span class="hljs-variable">$firstAddr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​以下为给后端的IP透传</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#任选一种记录</span><br><span class="hljs-attribute">proxy_set_header</span>  X-Real-IP <span class="hljs-variable">$clientRealIp</span>;<br><span class="hljs-attribute">proxy_set_header</span>  REMOTE-HOST <span class="hljs-variable">$clientRealIp</span>;<br></code></pre></td></tr></table></figure><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h3 id="1-更换存储引擎为innodb"><a href="#1-更换存储引擎为innodb" class="headerlink" title="1.更换存储引擎为innodb"></a>1.更换存储引擎为innodb</h3><p>​旧版本的mysql默认采用myisam引擎，可更换新的引擎，分为以下几步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1导出数据库的表结构，不导出数据</span><br>mysqldump -d -uxxx -p shop &gt; shop_table.sql<br><span class="hljs-meta prompt_">#</span><span class="language-bash">2替换shop_table.sql里的MyISAM为INNODB</span><br>sed -i &#x27;s/MyISAM/INNODB/g&#x27; shop_table.sql<br><span class="hljs-meta prompt_">#</span><span class="language-bash">3新建数据库导入表结构</span><br>mysql &gt; create database shop_new;<br>mysql -uroot -p shop_new &lt; shop_table.sql<br><span class="hljs-meta prompt_">#</span><span class="language-bash">4导入数据</span><br>mysqldump -t -uroot -p shop &gt; shop_data.sql<br>mysql -uroot -p shop_new &lt; shop_data.sql<br></code></pre></td></tr></table></figure><h3 id="2-开启慢查询，建立或优化索引"><a href="#2-开启慢查询，建立或优化索引" class="headerlink" title="2.开启慢查询，建立或优化索引"></a>2.开启慢查询，建立或优化索引</h3><p>​mysql数据查询速度慢是导致服务响应速度慢的一大原因。因此需要开启慢查询日志，根据日志中记录的操作，分析是哪些数据表的问题，可能是没有建立索引或设置不当。</p><p>​对于一些查询语句可使用profile工具详细查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">/etc/my.cnf可进行以下设置</span><br>slow_query_log=ON|OFF #开启或关闭慢查询，支持全局和会话，只有全局设置才会生成慢查询文件<br>long_query_time=N #慢查询的阀值，单位秒,默认为10s<br>slow_query_log_file=HOSTNAME-slow.log  #慢查询日志文件<br>log_queries_not_using_indexes=ON  #不使用索引或使用全索引扫描，不论是否达到慢查询阀值的语句是否记录日志，默认OFF，即不记录<br>log_slow_rate_limit = 1 #多少次查询才记录，mariadb特有<br>log_slow_verbosity= Query_plan,explain #记录内容<br></code></pre></td></tr></table></figure><p>​《Java开发手册》中索引优化可以参考</p><ul><li>独立地使用列</li><li>左前缀索引：构建指定索引字段的左侧的字符数，要通过索引选择性（不重复的索引值和数据表的记录总数的比值）来评估，尽量使用短索引，如果可以，应该制定一个前缀长度</li><li>多列索引：AND操作时更适合使用多列索引，而非为每个列创建单独的索引</li><li>选择合适的索引列顺序：无排序和分组时，将选择性最高放左侧</li><li>只要列中含有NULL值，就最好不要在此列设置索引，复合索引如果有NULL值，此列在使用时也不会使用索引</li><li>对于经常在where子句使用的列，最好设置索引</li><li>对于有多个列where或者order by子句，应该建立复合索引</li><li>对于like语句，以 % 或者 _ 开头的不会使用索引，以 % 结尾会使用索引</li><li>尽量不要使用not in和&lt;&gt;操作,虽然可能使用索引,但性能不高</li><li>不要使用RLIKE正则表达式会导致索引失效</li><li>查询时，能不要<em>就不用</em>，尽量写全字段名，比如:select id,name,age from students;</li><li>大部分情况连接效率远大于子查询</li><li>在有大量记录的表分页时使用limit</li><li>对于经常使用的查询，可以开启查询缓存</li><li>多使用explain和profile分析查询语句</li><li>查看慢查询日志，找出执行时间长的sql语句优化</li></ul><h3 id="3-一些优化参数"><a href="#3-一些优化参数" class="headerlink" title="3.一些优化参数"></a>3.一些优化参数</h3><ul><li>​key_buffer_sizemyisam键缓冲区，可适当调大缓存值</li><li>​thread_concurrencymyisam多线程参数</li><li>​default-storage-engine&#x3D;InnoDB设置创建数据库默认使用innodb</li><li>​innodb_read_io_threads &#x3D; 8innodb可以设置为与cpu核数一致</li><li>​innodb_write_io_threads &#x3D; 8</li><li>​sync_binlog&#x3D;1综合考虑安全性和性能需求来选择</li><li>​innodb_flush_log_at_trx_commit&#x3D;0综合考虑安全性和性能需求来选择</li><li>​max_connections   根据服务器性能选择，不能过大</li><li>​back_log超过max_connections 后请求放入堆栈，该值为最大堆栈数，超过则拒绝访问</li><li>​wait_timeout当MySQL连接闲置超过一定时间后将会被强行关闭，减少空闲连接占用资源</li></ul><p></p><h1 id="haproxy"><a href="#haproxy" class="headerlink" title="haproxy"></a>haproxy</h1><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将haproxy的info及notice日志分别记录到不同的日志文件中。</span><br><br>vim /etc/haproxy/haproxy.cfg<br>global<br>log /dev/log local0 info<br>log /dev/log local0 notice<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改 rsyslog 配置，将haproxy相关的配置独立定义到 haproxy.conf，并放到/etc/rsyslog.d/ 下，rsyslog启动时会自动加载此目录下的所有配置文件。“&amp;~”表示当日志写入到日志文件后，rsyslog停止处理这个信息。</span><br><br>vim /etc/rsyslog.d/haproxy.conf<br>if ($programname == &#x27;haproxy&#x27; and $syslogseverity-text == &#x27;info&#x27;)<br>then -/var/log/haproxy/haproxy-info.log<br>&amp;~<br>if ($programname == &#x27;haproxy&#x27; and $syslogseverity-text == &#x27;notice&#x27;)<br>then -/var/log/haproxy/haproxy-notice.log<br>&amp;~<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启haproxy和rsyslog生效</span><br></code></pre></td></tr></table></figure><h3 id="优化相关参数"><a href="#优化相关参数" class="headerlink" title="优化相关参数"></a>优化相关参数</h3><ul><li><strong>maxconn：</strong>最大连接数，根据应用实际情况进行调整</li><li><strong>daemon：</strong>守护进程模式，Haproxy可以使用非守护进程模式启动，建议使用守护进程模式启动</li><li><strong>nbproc</strong>：负载均衡的并发进程数，建议与当前服务器CPU核数相等或为其2倍</li><li><strong>retries:</strong> 重试次数，主要用于对集群节点的检查，如果节点多，且并发量大，设置为2次或3次</li><li><strong>option http-server-close：</strong>主动关闭http请求选项，建议在生产环境中使用此选项</li><li><strong>timeout http-keep-alive：</strong>长连接超时时间，设置长连接超时时间，可以设置为10s</li><li><strong>timeout http-request：</strong>http请求超时时间，建议将此时间设置为5 ~ 10s，增加http连接释放速度</li><li><strong>timeout client：</strong>客户端超时时间，如果访问量过大，节点响应慢，可以将此时间设置短一些，建议设置为1min左右</li></ul>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes对象的创建和yaml文件规范总结</title>
    <link href="/2022/09/23/Kubernetes%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8Cyaml%E6%96%87%E4%BB%B6%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/"/>
    <url>/2022/09/23/Kubernetes%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8Cyaml%E6%96%87%E4%BB%B6%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​本文主要总结了k8s中如何在管理节点上通过yaml文件来创建常用对象，以及编写yaml文件时的要点和注意事项。主要参考官方文档<a href="https://kubernetes.io/zh-cn/docs">https://kubernetes.io/zh-cn/docs</a></p><span id="more"></span><h1 id="yaml规范"><a href="#yaml规范" class="headerlink" title="yaml规范"></a>yaml规范</h1><p>​在ansible中playbook和role文件都使用yaml格式编写，通过ansible-playbook命令来生效。在k8s中也非常类似，为某对象编写yaml文件后，可通过kubectl  apply  -f命令创建该对象。</p><p>​yaml文件具有上下级关系，将对象的各种属性以列表和键值对的形式表现。有以下规范</p><ul><li>大小写敏感 </li><li>使⽤缩进表示层级关系 </li><li>缩进时不允许使⽤Tal键，只允许使⽤空格 </li><li>缩进的空格数⽬不重要，只要相同层级的元素左侧对⻬即可 </li><li>使⽤”#” 表示注释，从这个字符⼀直到⾏尾，都会被解析器忽略</li><li>需要指定apiVersion（组件版本，可以通过kubectl api-versions查看） kind  和metadata （识别对象的唯一性数据，用于查找和调用）</li></ul><p>API对象三大属性分类：metadata（元数据）、spec（规范，可理解为期望状态）、status（实际状态）</p><p>API对象可写在同一yaml文件中，也可以分开写，分别启用，也可以使用kubectl apply . 应用目录下所有yaml文件</p><h1 id="创建对象Namespace"><a href="#创建对象Namespace" class="headerlink" title="创建对象Namespace"></a>创建对象Namespace</h1><p>​namespace命名空间对象是用来进行逻辑上的分组，实现隔离资源和资源访问控制。即可按照namespace来设置资源限制，实现不同服务资源隔离，隔离不同pod的通讯。同时，处于不同的命名空间的对象可以重名。</p><p>​实际使用中，可针对每个项目设置namespace对象，在resources列表中指定该namespace对象设置资源限制，在apiserver中针对不同namespace设置访问控制。</p><p>​示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>  <span class="hljs-comment">#版本</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span> <br><span class="hljs-attr">metadata:</span>  <span class="hljs-comment">#元数据</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test1</span> <br><br><span class="hljs-comment">#查看命令kubectl get namespaces</span><br></code></pre></td></tr></table></figure><h1 id="创建对象pod"><a href="#创建对象pod" class="headerlink" title="创建对象pod"></a>创建对象pod</h1><p>​可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。pod中的容器共享存储、网络、以及怎样运行这些容器的声明。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><span class="hljs-comment">#pod模板规范，定义每个pod运行的容器（可写多种）</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.14.2</span><span class="hljs-comment">#可以指定私有或公有仓库的镜像</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>​工作负载的控制器会使用负载对象中的 pod模板来生成实际的 Pod。 Pod模板是你用来运行应用时指定的负载资源的目标状态的一部分。</p><p>​pod模板示例，该 Pod 中的容器会打印一条消息之后暂停</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Job</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&#x27;echo &quot;Hello, Kubernetes!&quot; &amp;&amp; sleep 3600&#x27;</span>]<br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><span class="hljs-comment">#重启容器的策略</span><br></code></pre></td></tr></table></figure><h1 id="创建对象Job"><a href="#创建对象Job" class="headerlink" title="创建对象Job"></a>创建对象Job</h1><p>​Job 会创建一个或者多个 Pod，并将继续重试 Pod 的执行，直到指定数量的 Pod 成功终止。 随着 Pod 成功结束，Job 跟踪记录成功完成的 Pod 个数。 当数量达到指定的成功个数阈值时，任务（即 Job）结束。</p><p>​示例见上文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">检查上文job状态<br>kubectl describe <span class="hljs-built_in">jobs</span>/hello<br></code></pre></td></tr></table></figure><h1 id="创建对象Deployment"><a href="#创建对象Deployment" class="headerlink" title="创建对象Deployment"></a>创建对象Deployment</h1><p>​副本控制器，由RC发展到RS，最后发展为使用Deployment调用RS。负责创建和管理pod内的容器，可理解为确保pod对象的status与设定的spec一致。简单的例子是发现pod副本多于replicas设置的数量就减少，少于就添加。更新yaml文件后应用将以滚动升级的方式逐个pod重新启动。</p><p>​该对象需要指定：控制器元数据、副本数量和模板标签</p><p>​示例：创建3个pod，每个pod使用nginx:1.14.2镜像创建nginx容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><span class="hljs-comment">#控制器元数据</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-deployment</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><span class="hljs-comment">#pod副本数量</span><br>  <span class="hljs-attr">selector:</span><span class="hljs-comment">#用于匹配template标签</span><br>    <span class="hljs-attr">matchLabels:</span> <span class="hljs-comment">#RS or Deployment</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-comment">#matchExpressions:Deployment新支持的更复杂的匹配规则，一般不需要</span><br>    <span class="hljs-comment">#  - &#123;key: app, operator: In, values: [nginx,nginx-81]&#125;</span><br><br> <br> <span class="hljs-attr">template:</span><span class="hljs-comment">#pod模板</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.14.2</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><br><span class="hljs-comment">#查看状态kubectl get deployments [-n namespace]</span><br><span class="hljs-string">NAME</span>               <span class="hljs-string">READY</span>   <span class="hljs-string">UP-TO-DATE</span>   <span class="hljs-string">AVAILABLE</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">nginx-deployment</span>   <span class="hljs-number">3</span><span class="hljs-string">/3</span>     <span class="hljs-number">3</span>            <span class="hljs-number">3</span>           <span class="hljs-string">18s</span><br></code></pre></td></tr></table></figure><h1 id="创建对象service"><a href="#创建对象service" class="headerlink" title="创建对象service"></a>创建对象service</h1><p>​service是将运行在一组pods上的应用程序公开为网络服务的抽象方法。k8s集群中通过service实现pod间通信。</p><p>​示例：pod暴露80端口，创建一个名为nginx-service的service对象，将本机80端口转发至具有app.kubernetes.io&#x2F;name键且值为proxy的pod的端口上。端口可用名称指代</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">proxy</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:stable</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">http-web-svc</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><span class="hljs-comment">#转发给匹配的pod</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">proxy</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">name-of-service-port</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><span class="hljs-comment">#转发协议</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><span class="hljs-comment">#service提供的访问端口</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http-web-svc</span><span class="hljs-comment">#pod端口</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30003</span><span class="hljs-comment">#宿主机端口</span><br><span class="hljs-comment">#查看kubectl get services</span><br></code></pre></td></tr></table></figure><p>​由于许多服务需要公开多个端口，因此 Kubernetes 在service对象上支持多个端口定义，每个端口定义具有不同的协议。</p><h1 id="创建对象ResourceQuota"><a href="#创建对象ResourceQuota" class="headerlink" title="创建对象ResourceQuota"></a>创建对象ResourceQuota</h1><p>​资源配额，通过 <code>ResourceQuota</code> 对象来定义，对每个命名空间的资源消耗总量提供限制。 它可以限制命名空间中某种类型的对象的<strong>总数目上限</strong>，也可以限制命名空间中的 Pod 可以使用的<strong>计算资源的总上限</strong>。</p><p>​<strong>request和limits：</strong>request是容器运行时，向k8s节点申请的最少保障资源。limits是容器在k8s节点上消耗的资源上限。</p><p>​如果配额中指定了 <code>requests.cpu</code> 或 <code>requests.memory</code> 的值，则它要求每个容器都显式给出对这些资源的请求。 同理，如果配额中指定了 <code>limits.cpu</code> 或 <code>limits.memory</code> 的值，那么它要求每个容器都显式设定对应资源的限制。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#如果node剩余资源无法满足request值将无法创建</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">container:</span>  <br>  <span class="hljs-string">...</span><br>  <span class="hljs-string">...</span><br>    <span class="hljs-attr">resources:</span> <br>      <span class="hljs-attr">limits:</span> <br>        <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span> <br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span> <br>      <span class="hljs-attr">requests:</span> <br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span> <br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br></code></pre></td></tr></table></figure><p>​<strong>计算资源</strong></p><table><thead><tr><th><code>limits.cpu</code></th><th>所有非终止状态的 Pod，其 CPU 限额总量不能超过该值。</th></tr></thead><tbody><tr><td><code>limits.memory</code></td><td>所有非终止状态的 Pod，其内存限额总量不能超过该值。</td></tr><tr><td><code>requests.cpu</code></td><td>所有非终止状态的 Pod，其 CPU 需求总量不能超过该值。</td></tr><tr><td><code>requests.memory</code></td><td>所有非终止状态的 Pod，其内存需求总量不能超过该值。</td></tr></tbody></table><p>​<strong>对象数量</strong></p><table><thead><tr><th><code>configmaps</code></th><th>在该命名空间中允许存在的 ConfigMap 总数上限。</th></tr></thead><tbody><tr><td><code>persistentvolumeclaims</code></td><td>在该命名空间中允许存在的 <a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims">PVC</a> 的总数上限。</td></tr><tr><td><code>pods</code></td><td>在该命名空间中允许存在的非终止状态的 Pod 总数上限。Pod 终止状态等价于 Pod 的 <code>.status.phase in (Failed, Succeeded)</code> 为真。</td></tr><tr><td><code>replicationcontrollers</code></td><td>在该命名空间中允许存在的 ReplicationController 总数上限。</td></tr><tr><td><code>resourcequotas</code></td><td>在该命名空间中允许存在的 ResourceQuota 总数上限。</td></tr><tr><td><code>services</code></td><td>在该命名空间中允许存在的 Service 总数上限。</td></tr><tr><td><code>services.loadbalancers</code></td><td>在该命名空间中允许存在的 LoadBalancer 类型的 Service 总数上限。</td></tr><tr><td><code>services.nodeports</code></td><td>在该命名空间中允许存在的 NodePort 类型的 Service 总数上限。</td></tr><tr><td><code>secrets</code></td><td>在该命名空间中允许存在的 Secret 总数上限。</td></tr></tbody></table><p>​示例：实现多种资源限制。可以在pod的spec规范中添加scopName键：该键value使用该限制。如下例为添加PriorityClass：high</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">List</span><br><span class="hljs-attr">items:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ResourceQuota</span><br>  <span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pods-high</span><br>  <span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">hard:</span><br>      <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;1000&quot;</span><br>      <span class="hljs-attr">memory:</span> <span class="hljs-string">200Gi</span><br>      <span class="hljs-attr">pods:</span> <span class="hljs-string">&quot;10&quot;</span><br>    <span class="hljs-attr">scopeSelector:</span><span class="hljs-comment">#采用拓展的匹配规则</span><br>      <span class="hljs-attr">matchExpressions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">operator :</span> <span class="hljs-string">In</span><br>        <span class="hljs-attr">scopeName:</span> <span class="hljs-string">PriorityClass</span><br>        <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;high&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ResourceQuota</span><br>  <span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pods-medium</span><br>  <span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">hard:</span><br>      <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;10&quot;</span><br>      <span class="hljs-attr">memory:</span> <span class="hljs-string">20Gi</span><br>      <span class="hljs-attr">pods:</span> <span class="hljs-string">&quot;10&quot;</span><br>    <span class="hljs-attr">scopeSelector:</span><br>      <span class="hljs-attr">matchExpressions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">operator :</span> <span class="hljs-string">In</span><br>        <span class="hljs-attr">scopeName:</span> <span class="hljs-string">PriorityClass</span><br>        <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;medium&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ResourceQuota</span><br>  <span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pods-low</span><br>  <span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">hard:</span><br>      <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;5&quot;</span><br>      <span class="hljs-attr">memory:</span> <span class="hljs-string">10Gi</span><br>      <span class="hljs-attr">pods:</span> <span class="hljs-string">&quot;10&quot;</span><br>    <span class="hljs-attr">scopeSelector:</span><br>      <span class="hljs-attr">matchExpressions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">operator :</span> <span class="hljs-string">In</span><br>        <span class="hljs-attr">scopeName:</span> <span class="hljs-string">PriorityClass</span><br>        <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;low&quot;</span>]<br><br><span class="hljs-comment">#查看kubectl describe quota</span><br><span class="hljs-attr">Name:</span>       <span class="hljs-string">pods-high</span><br><span class="hljs-attr">Namespace:</span>  <span class="hljs-string">default</span><br><span class="hljs-string">Resource</span>    <span class="hljs-string">Used</span>  <span class="hljs-string">Hard</span><br><span class="hljs-string">--------</span>    <span class="hljs-string">----</span>  <span class="hljs-string">----</span><br><span class="hljs-string">cpu</span>         <span class="hljs-number">0</span>     <span class="hljs-string">1k</span><br><span class="hljs-string">memory</span>      <span class="hljs-number">0</span>     <span class="hljs-string">200Gi</span><br><span class="hljs-string">pods</span>        <span class="hljs-number">0</span>     <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h1 id="创建对象Volume"><a href="#创建对象Volume" class="headerlink" title="创建对象Volume"></a>创建对象Volume</h1><p>​Kubernetes 支持很多类型的卷。pod可以同时使用任意数目的卷类型。 emptyDir类型的生命周期与 Pod 相同，但持久卷可以比 Pod 的存活期长。 常用的为nfs共享卷、configmap配置文件、hostPath本地卷。 对于给定 Pod 中任何类型的卷，在容器重启期间数据都不会丢失。</p><p>​nfs示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br>  <span class="hljs-string">...</span><br>  <span class="hljs-string">...</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-string">...</span><br>    <span class="hljs-string">...</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-attr">volumeMounts:</span>     <span class="hljs-comment">#容器挂载点</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-page</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data/tomcat/webapps/myapp/static</span> <br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-images</span> <br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data/tomcat/webapps/myapp/images</span> <br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">volumes:</span><span class="hljs-comment">#指定使用的共享存储目录</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-page</span> <br>          <span class="hljs-attr">nfs:</span> <br>            <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.108</span>  <span class="hljs-comment">#nfs server</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/path/dir/static</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-images</span> <br>          <span class="hljs-attr">nfs:</span> <br>            <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.108</span> <br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/path/dir/images</span><br></code></pre></td></tr></table></figure><p>​configmap示例：将名为 <code>log-config</code> 的 ConfigMap 挂载到名为 <code>configmap-pod</code> 的 Pod 中。</p><p>​容器中可看到&#x2F;etc&#x2F;config&#x2F;log_level&#x2F;</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28</span><br>      <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-vol</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span><span class="hljs-comment">#挂载点，配置文件目录</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-vol</span><span class="hljs-comment">#卷的名称，用于被挂载点匹配</span><br>      <span class="hljs-attr">configMap:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">log-config</span><span class="hljs-comment">#这是配置集的名称，k8s会根据这个名字来寻找对应的ConfigMap</span><br>        <span class="hljs-attr">items:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">log_level</span><span class="hljs-comment">#要挂载的文件名</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">log_level</span><span class="hljs-comment">#最终容器中的文件名</span><br></code></pre></td></tr></table></figure><h1 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a>综合示例</h1><p>​tomcat示例：部署3个tomcat的pod，每个pod由私有仓库中拉取tomcat-app1-container镜像，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-comment">#apiVersion: extensions/v1beta1</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">tomcat-app1-deployment-label</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-app1-deployment</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">project1</span><span class="hljs-comment">#指定namespace</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">tomcat-app1-selector</span><span class="hljs-comment">#筛选pod副本</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">tomcat-app1-selector</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-app1-container</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harbor.test.com/project1/tomcat-app1:v1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><span class="hljs-comment">#containerPort是pod内部容器的端口，targetPort映射到containerPort。</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attr">env:</span><span class="hljs-comment">#设置环境变量</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;password&quot;</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;123456&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;age&quot;</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;18&quot;</span><br>        <span class="hljs-attr">resources:</span><span class="hljs-comment">#pod资源限制</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;2048Mi&quot;</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br>        <span class="hljs-attr">volumeMounts:</span><span class="hljs-comment">#挂载卷</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-images</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/nginx/html/webapp/images</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-static</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/nginx/html/webapp/static</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">volumes:</span><span class="hljs-comment">#使用共享存储</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-images</span><br>        <span class="hljs-attr">nfs:</span><br>          <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.108</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/data/k8sdata/project1/images</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-static</span><br>        <span class="hljs-attr">nfs:</span><br>          <span class="hljs-attr">server:</span> <span class="hljs-number">172.31</span><span class="hljs-number">.3</span><span class="hljs-number">.104</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/data/k8sdata/project1/static</span><br><span class="hljs-comment">#      nodeSelector:#node绑定</span><br><span class="hljs-comment">#        project: project1</span><br><span class="hljs-comment">#        app: tomcat</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">tomcat-app1-service-label</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-app1-service</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">project1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><span class="hljs-comment">#k8s集群内部访问service的端口</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><span class="hljs-comment">#pod的端口，从service接受流量经过kube-proxy流入到后端pod的targetPort上</span><br>    <span class="hljs-comment">#nodePort: 40003#node上监听并转发给该service的端口</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">tomcat-app1-selector</span><span class="hljs-comment">#指定service管理的副本</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux查看系统性能指标的命令</title>
    <link href="/2022/09/21/Linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/09/21/Linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>​本文主要总结了查看Linux网络、磁盘、CPU和内存、进程资源占用情况的命令</p><span id="more"></span><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h3 id="iperf"><a href="#iperf" class="headerlink" title="iperf"></a>iperf</h3><p>​基于ICMP协议 </p><p>​服务器端-s  以server模式启动  -D后台进程运行</p><p>​客户端-cIP  作为客户端连接后面的服务器端地址</p><figure class="highlight excel"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs excel">测试TCP吞吐（客户端）：<span class="hljs-number">10</span>s内每隔<span class="hljs-number">1</span>s传输数据<br>iperf3 -c <span class="hljs-number">10.0</span>.<span class="hljs-number">0.150</span> -<span class="hljs-built_in">t</span> <span class="hljs-number">10</span> -i <span class="hljs-number">1</span> <br>-<span class="hljs-built_in">n</span>传输数据量（字节）  会使-i无效  也可-F指定传输文件<br>iperf3 -c <span class="hljs-number">10.0</span>.<span class="hljs-number">0.150</span> -<span class="hljs-built_in">t</span> <span class="hljs-number">10</span> -<span class="hljs-built_in">n</span> <span class="hljs-number">100000</span> <br>测试UDP：数据包<span class="hljs-number">100</span>M<br>iperf3 -c <span class="hljs-number">10.0</span>.<span class="hljs-number">0.150</span> -u -b <span class="hljs-number">100</span>M<br></code></pre></td></tr></table></figure><h3 id="ifstat"><a href="#ifstat" class="headerlink" title="ifstat"></a>ifstat</h3><p>​统计网络接口状态</p><ul><li>RX Pkts&#x2F;Rate  数据包接收流量</li><li>RX Errs&#x2F;Drop  丢包</li><li>TX Pkts&#x2F;Rate  数据包发送流量</li><li>RX Data&#x2F;Rate 数据接收流量</li><li>TX Data&#x2F;Rate 数据发送流量</li></ul><p><img src="image-20220921133849175.png" alt="image-20220921133849175"></p><h3 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a>iftop</h3><p>​用于查找哪个IP占用了大量流量</p><p>​是一款实时流量监控工具，监控TCP&#x2F;IP连接等，缺点就是无报表功能，必须以root身份才能运行。 </p><p>​第一行为带宽。 中间为连接列表，最后三列分别是2秒，10秒和40秒的平均流量 </p><p>​&#x3D;&gt; 代表发送 &lt;&#x3D; 代表接收 </p><p>​最后三行表示发送，接收和全部的流量， 第二列为你运行iftop到目前流量，第三列为高峰值，第四列为平均值。 </p><p><img src="image-20220921134311322.png" alt="image-20220921134311322"></p><h3 id="iptraf"><a href="#iptraf" class="headerlink" title="iptraf"></a>iptraf</h3><p>​<strong>iptraf</strong>命令 可以实时地监视网卡流量，可以生成网络协议数据包信息、以太网信息、网络节点状态和 ip校验和错误等信息。 </p><p>-i网络接口：立即在指定网络接口上开启IP流量监视； </p><p> -g：立即开始生成网络接口的概要状态信息； </p><p>-d网络接口：在指定网络接口上立即开始监视明细的网络流量信息； </p><p> -s网络接口：在指定网络接口上立即开始监视TCP和UDP网络流量信息； </p><p> -z网络接口：在指定网络接口上显示包计数； </p><p> -l网络接口：在指定网络接口上立即开始监视局域网工作站信息； </p><p> -t时间：指定iptraf指令监视的时间； </p><p>-B；将标注输出重新定向到“&#x2F;dev&#x2F;null”，关闭标注输入，将程序作为后台进程运行； </p><h1 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h1><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>​直观显示各磁盘及分区使用情况，显示结果也方便df -h | awk  -F’[ ]+|%’ ‘NR!&#x3D;1{print $5}’ | sort -nr 取出Use%</p><p><img src="image-20220921134916500.png" alt="image-20220921134916500"></p><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><p>​du命令是对文件和目录磁盘使用的空间的查看，和df命令有明显区别。 </p><p>​用于查看当前目录下子目录大小，文件占用空间</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">子目录大小du -sh .<span class="hljs-regexp">/*/</span><br><span class="hljs-number">480</span>K.<span class="hljs-regexp">/config/</span><br><span class="hljs-number">16</span>K.<span class="hljs-regexp">/contrib/</span><br><span class="hljs-number">220</span>K.<span class="hljs-regexp">/docs/</span><br><span class="hljs-number">164</span>K.<span class="hljs-regexp">/examples/</span><br><span class="hljs-number">5.9</span>M.<span class="hljs-regexp">/src/</span><br><br>文件从大到小排序du -sh * |sort -rh<br><span class="hljs-number">5.9</span>Msrc<br><span class="hljs-number">480</span>Kconfig<br><span class="hljs-number">452</span>Kconfigure<br><span class="hljs-number">368</span>Kaclocal.m4<br><span class="hljs-number">332</span>Klibtool<br><span class="hljs-number">220</span>Kdocs<br><span class="hljs-number">164</span>Kexamples<br></code></pre></td></tr></table></figure><h3 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h3><p>​监视系统输入输出设备和CPU的使用情况</p><p>​它的特点是汇报磁盘活动统计情况，同 时也会汇报出CPU使用情况。同vmstat一样，iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。 </p><p><img src="image-20220921150242425.png" alt="image-20220921150242425"></p><h3 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a>iotop</h3><p>​是一个用来监视磁盘I&#x2F;O使用状况的top类工具。iotop具有与top相似的UI，其中包括 PID、用户、I&#x2F;O、进程等相关信息。Linux下的IO统计工具如iostat，nmon等大多数是只能统计到 每个设备的读写情况，iotop命令可以很方便的查看每个进程是如何使用IO的</p><p>​-b：批量显示，无交互，主要用作记录到文件。 </p><p>​-n NUM：显示NUM次，主要用于非交互式模式。 </p><p>​-d SEC：间隔SEC秒显示一次。 </p><p>​ -p PID：监控的进程pid。 </p><p>​-u USER：监控的进程用户。 </p><p><img src="image-20220921140404119.png" alt="image-20220921140404119"></p><h1 id="CPU和内存"><a href="#CPU和内存" class="headerlink" title="CPU和内存"></a>CPU和内存</h1><h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><p>​含义为显示虚拟内存状态（“Viryual Memor Statics”），但是它可以报告关于进 程、内存、I&#x2F;O等系统整体运行状态。 以下为选项</p><ul><li>-a：显示活动内页； </li><li>-f：显示启动后创建的进程总数； </li><li>-m：显示slab信息； </li><li>-n：头信息仅显示一次； </li><li>-s：以表格方式显示事件计数器和内存状态； </li><li>-d：报告磁盘状态； </li><li>-p：显示指定的硬盘分区状态； </li><li>-S：输出信息的单位。</li></ul><p>procs： <strong>r</strong>是等待CPU的进程数，<strong>b</strong>是等待IO的进程数</p><p>memory：<strong>swapd</strong>使用虚拟内存大小，<strong>cache</strong>缓存文件大小</p><p>swap：<strong>si</strong>每秒从磁盘交换分区写入内存的大小，<strong>so</strong>每秒从内存<strong>（内存达到使用swap分区的阈值后才不为0）</strong></p><p>system：<strong>in</strong>每秒中断数   cs每秒上下文切换书</p><p>cpu：<strong>us</strong>用户进程执行时间百分比(user time)    <strong>sy</strong>内核系统进程执行时间百分比(system time)   <strong>wa</strong>是IO等待时间百分比  <strong>id</strong>是空闲时间百分比</p><p><img src="image-20220921150523007.png" alt="image-20220921150523007"></p><h3 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h3><p>​查看系统负载。<strong>系统平均负载是指在特定时间间隔内运行队列中的平均进程数。</strong></p><p>​能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示 依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15 分钟内的平均负载。 </p><p>​如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. 11:45:14 # 系统当前时间<br>2. up 1919810 days, 3:00 # 主机已运行时间,时间越大，说明你的机器越稳定。 <br>3. 1 user # 用户连接数，是总连接数而不是用户数 <br>4. load average: 0.00, 0.00, 0.00 # 系统平均负载，统计最近1，5，15分钟的系统平均负载<br></code></pre></td></tr></table></figure><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>​查看内存。 -s  #   间隔#秒持续观察</p><ul><li>total：内存总数； </li><li>used：已经使用的内存数； </li><li>free：空闲的内存数； </li><li>shared：当前已经废弃不用； </li><li>buffers Buffer：缓存内存数； </li><li>cached Page：缓存内存数。</li></ul><p><img src="image-20220921152436071.png" alt="image-20220921152436071"></p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h3><p>​以树状图的方式展现进程之间的派生关系，显示效果比较直观。</p><p>​</p><p><img src="image-20220921153551884.png" alt="image-20220921153551884"></p><p><img src="image-20220921153657766.png" alt="image-20220921153657766"></p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>​用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。ps命令是最 基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程 是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的</p><p><img src="image-20220921153419372.png" alt="image-20220921153419372"></p><ul><li>USER：该 process 属于那个使用者账号的 </li><li>PID ：该 process 的号码 </li><li>%CPU：该 process 使用掉的 CPU 资源百分比 </li><li>%MEM：该 process 所占用的物理内存百分比 </li><li>VSZ ：该 process 使用掉的虚拟内存量 (Kbytes) </li><li>RSS ：该 process 占用的固定的内存量 (Kbytes) </li><li>TTY ：该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1- </li><li>tty6 是本机上面的登入者程序，若为 pts&#x2F;0 等等的，则表示为由网络连接进主机的程序。 </li><li>STAT：该程序目前的状态，主要的状态有 </li><li>R ：该程序目前正在运作，或者是可被运作 </li><li>S ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。 </li><li>T ：该程序目前正在侦测或者是停止了 </li><li>Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状 </li><li>态</li><li>START：该 process 被触发启动的时间 </li><li>TIME ：该 process 实际使用 CPU 运作的时间</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. ps axo pid,comm,pcpu # 查看进程的PID、名称以及CPU 占用率 <br>2. ps aux | sort -rnk 4 # 按内存资源的使用量对进程进行排序 <br>3. ps aux | sort -nk 3 # 按 CPU 资源的使用量对进程进行排序 <br>4. ps -A # 显示所有进程信息 <br>5. ps -u root # 显示指定用户信息 <br>6. ps -efL # 查看线程数 <br>7. ps -e -o &quot;%C : %p :%z : %a&quot;|sort -k5 -nr # 查看进程并按内存使用大小排列 <br>8. ps -ef # 显示所有进程信息，连同命令行 <br>9. ps -ef | grep ssh # ps 与grep 常用组合用法，查找特定进程 <br>10. ps -C nginx # 通过名字或命令搜索进程 <br>11. ps aux --sort=-pcpu,+pmem # CPU或者内存进行排序,-降序，+升序 <br>12. ps -f --forest -C nginx # 用树的风格显示进程的层次关系 <br>13. ps -o pid,uname,comm -C nginx # 显示一个父进程的子进程 <br>14. ps -e -o pid,uname=USERNAME,pcpu=CPU_USAGE,pmem,comm # 重定义标签 <br>15. ps -e -o pid,comm,etime # 显示进程运行的时间 <br>16. ps -aux | grep named # 查看named进程详细信息 <br>17. ps -o command -p 91730 | sed -n 2p # 通过进程id获取服务名称<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins+gitlab持续部署总结</title>
    <link href="/2022/09/13/Jenkins-gitlab%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/"/>
    <url>/2022/09/13/Jenkins-gitlab%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​本文主要总结了gitlab代码仓库的部署、配置、常用命令和数据备份，Jenkins安装和部署代码的过程，pipline的使用方法，Jenkins配合sonaqube测试代码。</p><span id="more"></span><h1 id="gitlab部署"><a href="#gitlab部署" class="headerlink" title="gitlab部署"></a>gitlab部署</h1><p>​需要软件包：policycoreutils openssh-server openssh-clients postfix</p><p>​国内安装包地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</a></p><p>​<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/bionic/main/g/gitlab-ce/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/bionic/main/g/gitlab-ce/</a><strong>目录</strong></p><p>&#x2F;etc&#x2F;gitlab #配置文件目录 </p><p>&#x2F;run&#x2F;gitlab #运行 pid 目录 </p><p>&#x2F;opt&#x2F;gitlab #安装目录 </p><p>&#x2F;var&#x2F;opt&#x2F;gitlab #数据目录 </p><p>&#x2F;var&#x2F;log&#x2F;gitlab #日志目录</p><p><strong>修改配置</strong></p><p>&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</p><figure class="highlight prolog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs prolog">external_url <span class="hljs-string">&#x27;http://本机IP&#x27;</span><br><br>#可选邮件通知设置 <br>gitlab_rails[<span class="hljs-string">&#x27;smtp_enable&#x27;</span>] = true <br>gitlab_rails[<span class="hljs-string">&#x27;smtp_address&#x27;</span>] = <span class="hljs-string">&quot;smtp.qq.com&quot;</span> <br>gitlab_rails[<span class="hljs-string">&#x27;smtp_port&#x27;</span>] = <span class="hljs-number">465</span> <br>gitlab_rails[<span class="hljs-string">&#x27;smtp_user_name&#x27;</span>] = <span class="hljs-string">&quot;&quot;</span> <br>gitlab_rails[<span class="hljs-string">&#x27;smtp_password&#x27;</span>] = <span class="hljs-string">&quot;自己生成&quot;</span> <br>gitlab_rails[<span class="hljs-string">&#x27;smtp_domain&#x27;</span>] = <span class="hljs-string">&quot;如qq.com&quot;</span> <br>gitlab_rails[<span class="hljs-string">&#x27;smtp_authentication&#x27;</span>] = :login gitlab_rails[<span class="hljs-string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = true <br>gitlab_rails[<span class="hljs-string">&#x27;smtp_tls&#x27;</span>] = true <br>gitlab_rails[<span class="hljs-string">&#x27;gitlab_email_from&#x27;</span>] = <span class="hljs-string">&quot;邮箱&quot;</span> <br>user[<span class="hljs-string">&quot;git_user_email&quot;</span>] = <span class="hljs-string">&quot;邮箱&quot;</span><br></code></pre></td></tr></table></figure><p><strong>加载配置初始化服务</strong></p><p>每次改完都要执行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">gitlab-ctl reconfigure</span><br></code></pre></td></tr></table></figure><p>成功后由以下提示</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Running</span> handlers:<br><span class="hljs-attribute">Running</span> handlers complete<br><span class="hljs-attribute">Chef</span> Client finished, <span class="hljs-number">525</span>/<span class="hljs-number">1396</span> resources updated in <span class="hljs-number">02</span> minutes <span class="hljs-number">09</span> seconds<br><span class="hljs-attribute">gitlab</span> Reconfigured!<br></code></pre></td></tr></table></figure><p><strong>登录web界面</strong></p><p><img src="image-20220913142456328.png" alt="image-20220913142456328"></p><h3 id="gitlab配置"><a href="#gitlab配置" class="headerlink" title="gitlab配置"></a>gitlab配置</h3><p>​<strong>关闭注册</strong>    </p><p>settings→Sign-up restrictions取消勾选</p><p><img src="image-20220913142800756.png" alt="image-20220913142800756"></p><p>​<strong>创建用户后需要用邮箱设置密码</strong></p><p><img src="image-20220913143615267.png" alt="image-20220913143615267"></p><p><strong>创建组和项目，并将用户加入该组</strong></p><p>选择不同的role，授予该用户对该组项目的不同权限</p><p><img src="image-20220913144115008.png" alt="image-20220913144115008"></p><p><img src="image-20220913144324725.png" alt="image-20220913144324725"></p><h1 id="gitlab常用命令"><a href="#gitlab常用命令" class="headerlink" title="gitlab常用命令"></a>gitlab常用命令</h1><p><strong>gitlab-rails</strong>启动控制台，可修改密码、打开数据库控制台</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The most common rails commands are:<br> generate     Generate <span class="hljs-built_in">new</span> code (<span class="hljs-keyword">short</span>-cut <span class="hljs-built_in">alias</span>: <span class="hljs-string">&quot;g&quot;</span>)<br> console      Start <span class="hljs-keyword">the</span> Rails console (<span class="hljs-keyword">short</span>-cut <span class="hljs-built_in">alias</span>: <span class="hljs-string">&quot;c&quot;</span>)<br> server       Start <span class="hljs-keyword">the</span> Rails server (<span class="hljs-keyword">short</span>-cut <span class="hljs-built_in">alias</span>: <span class="hljs-string">&quot;s&quot;</span>)<br> dbconsole    Start <span class="hljs-keyword">a</span> console <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> database specified <span class="hljs-keyword">in</span> config/database.yml<br>              (<span class="hljs-keyword">short</span>-cut <span class="hljs-built_in">alias</span>: <span class="hljs-string">&quot;db&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>gitlab-psql</strong>进入数据库命令行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost ~]<span class="hljs-variable">$gitlab</span>-psql --help<br>psql is the PostgreSQL interactive terminal.<br><br>Usage:<br>  psql [OPTION]... [DBNAME [USERNAME]]<br><br>General options:<br>  -c, --command=COMMAND    run only single command (SQL or internal) and <span class="hljs-keyword">exit</span><br>  -d, --dbname=DBNAME      database name to connect to (default: <span class="hljs-string">&quot;gitlab-psql&quot;</span>)<br>  -l, --list               list available databases, then <span class="hljs-keyword">exit</span><br>  -v, --set=, --variable=NAME=VALUE<br>                           set psql variable NAME to VALUE<br>                           (e.g., -v ON_ERROR_STOP=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>gitlab-ctl</strong>进程管理</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">gitlab-ctl</span> <span class="hljs-string">stop</span> <span class="hljs-comment">#停止 gitlab</span><br><span class="hljs-string">gitlab-ctl</span> <span class="hljs-string">start</span> <span class="hljs-comment">#启动 </span><br><span class="hljs-string">gitlab-ctl</span> <span class="hljs-string">restar</span> <span class="hljs-comment">#重启</span><br><span class="hljs-string">gitlab-ctl</span> <span class="hljs-string">status</span> <span class="hljs-comment">#查看gitlab组件运行状态</span><br><span class="hljs-string">gitlab-ctl</span> <span class="hljs-string">tail</span> <span class="hljs-string">nginx</span> <span class="hljs-comment">#查看某个组件的日志</span><br><br>[<span class="hljs-string">root@localhost</span> <span class="hljs-string">~</span>]<span class="hljs-string">$gitlab-ctl</span> <span class="hljs-string">status</span><br><span class="hljs-attr">run: alertmanager:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3718</span><span class="hljs-string">)</span> <span class="hljs-string">1393s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3388</span><span class="hljs-string">)</span> <span class="hljs-string">1431s</span><br><span class="hljs-attr">run: gitaly:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3593</span><span class="hljs-string">)</span> <span class="hljs-string">1395s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">2801</span><span class="hljs-string">)</span> <span class="hljs-string">1506s</span><br><span class="hljs-attr">run: gitlab-monitor:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3605</span><span class="hljs-string">)</span> <span class="hljs-string">1395s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3300</span><span class="hljs-string">)</span> <span class="hljs-string">1445s</span><br><span class="hljs-attr">run: gitlab-workhorse:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3566</span><span class="hljs-string">)</span> <span class="hljs-string">1396s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3123</span><span class="hljs-string">)</span> <span class="hljs-string">1466s</span><br><span class="hljs-attr">run: grafana:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3742</span><span class="hljs-string">)</span> <span class="hljs-string">1392s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3498</span><span class="hljs-string">)</span> <span class="hljs-string">1406s</span><br><span class="hljs-attr">run: logrotate:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3168</span><span class="hljs-string">)</span> <span class="hljs-string">1456s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3250</span><span class="hljs-string">)</span> <span class="hljs-string">1455s</span><br><span class="hljs-attr">run: nginx:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3140</span><span class="hljs-string">)</span> <span class="hljs-string">1462s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3155</span><span class="hljs-string">)</span> <span class="hljs-string">1461s</span><br><span class="hljs-attr">run: node-exporter:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3587</span><span class="hljs-string">)</span> <span class="hljs-string">1395s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3277</span><span class="hljs-string">)</span> <span class="hljs-string">1449s</span><br><span class="hljs-attr">run: postgres-exporter:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3732</span><span class="hljs-string">)</span> <span class="hljs-string">1393s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3425</span><span class="hljs-string">)</span> <span class="hljs-string">1425s</span><br><span class="hljs-attr">run: postgresql:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">2897</span><span class="hljs-string">)</span> <span class="hljs-string">1502s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">2945</span><span class="hljs-string">)</span> <span class="hljs-string">1499s</span><br><span class="hljs-attr">run: prometheus:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3697</span><span class="hljs-string">)</span> <span class="hljs-string">1394s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3357</span><span class="hljs-string">)</span> <span class="hljs-string">1435s</span><br><span class="hljs-attr">run: redis:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">2737</span><span class="hljs-string">)</span> <span class="hljs-string">1509s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">2771</span><span class="hljs-string">)</span> <span class="hljs-string">1508s</span><br><span class="hljs-attr">run: redis-exporter:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3613</span><span class="hljs-string">)</span> <span class="hljs-string">1394s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3329</span><span class="hljs-string">)</span> <span class="hljs-string">1439s</span><br><span class="hljs-attr">run: sidekiq:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3080</span><span class="hljs-string">)</span> <span class="hljs-string">1474s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3094</span><span class="hljs-string">)</span> <span class="hljs-string">1471s</span><br><span class="hljs-attr">run: unicorn:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3052</span><span class="hljs-string">)</span> <span class="hljs-string">1476s;</span> <span class="hljs-attr">run: log:</span> <span class="hljs-string">(pid</span> <span class="hljs-number">3077</span><span class="hljs-string">)</span> <span class="hljs-string">1475s</span><br></code></pre></td></tr></table></figure><h3 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> user.name “name“ <span class="hljs-comment">#设置全局用户名 </span><br>git config <span class="hljs-params">--global</span> user.email xxx@xx.com <span class="hljs-comment">#设置全局邮箱 </span><br>git config <span class="hljs-params">--global</span> <span class="hljs-params">--list</span> <span class="hljs-comment">#列出用户全局设置 </span><br>git add index.html / . <span class="hljs-comment">#添加指定文件、目录或当前目录下所有数据到暂存区 </span><br>git commit -m “v1“ <span class="hljs-comment">#提交文件到本地仓库 -m备注</span><br>git status <span class="hljs-comment">#查看工作区的状态 </span><br>git push <span class="hljs-comment">#提交代码到服务器 </span><br>git pull <span class="hljs-comment">#获取代码到本地 </span><br>git log <span class="hljs-comment">#查看操作日志 </span><br>vim <span class="hljs-string">.gitignore</span> <span class="hljs-comment">#定义忽略文件上传</span><br>git reset <span class="hljs-params">--hard</span> HEAD^^ <span class="hljs-comment">#版本回滚，HEAD当前版本，^为上一个版本，^^为上上一个版本</span><br>git reflog <span class="hljs-comment"># #获取每次提交的 ID，可以使用--hard 根据提交的 ID 进行版本回退 </span><br>git reset <span class="hljs-params">--hard</span> 5ae4b06 <span class="hljs-comment">#回退到指定 id 的版本 </span><br>git branch <span class="hljs-comment">#查看当前所处的分支 </span><br>git checkout develop <span class="hljs-comment">#切换分支</span><br></code></pre></td></tr></table></figure><p><strong>代码提交</strong></p><p><img src="image-20220913150627562.png" alt="image-20220913150627562"></p><h1 id="gitlab数据备份"><a href="#gitlab数据备份" class="headerlink" title="gitlab数据备份"></a>gitlab数据备份</h1><h3 id="停止gitlab"><a href="#停止gitlab" class="headerlink" title="停止gitlab"></a>停止gitlab</h3><p>​gitlab-ctl stop unicorn </p><p>​ gitlab-ctl stop sidekiq </p><h3 id="任意目录备份数据"><a href="#任意目录备份数据" class="headerlink" title="任意目录备份数据"></a>任意目录备份数据</h3><p>​ gitlab-rake gitlab:backup:create</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost ~]<span class="hljs-variable">$ll</span> <span class="hljs-regexp">/var/</span>opt<span class="hljs-regexp">/gitlab/</span>backups/<br>total <span class="hljs-number">132</span><br>-rw------- <span class="hljs-number">1</span> git git <span class="hljs-number">133120</span> Sep <span class="hljs-number">13</span> <span class="hljs-number">15</span>:<span class="hljs-number">10</span> <span class="hljs-number">1663053023</span>_2022_09_13_12.<span class="hljs-number">2.5</span>_gitlab_backup.tar<br></code></pre></td></tr></table></figure><h3 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h3><p>​gitlab-rake gitlab:backup:restore BACKUP&#x3D;备份文件名</p><h1 id="Jenkins部署"><a href="#Jenkins部署" class="headerlink" title="Jenkins部署"></a>Jenkins部署</h1><p>​软件包<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins">https://mirrors.tuna.tsinghua.edu.cn/jenkins</a></p><p>​需要java环境、daemonize包（redhat），（Ubuntu为daemon）</p><p>​官方中文安装指南<a href="https://www.jenkins.io/zh/doc/book/installing/">https://www.jenkins.io/zh/doc/book/installing/</a></p><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><p>rpm包安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost ~]<span class="hljs-variable">$rpm</span> -ql jenkins<br><span class="hljs-regexp">/etc/i</span>nit.d/jenkins<br><span class="hljs-regexp">/etc/</span>logrotate.d/jenkins<br><span class="hljs-regexp">/etc/</span>sysconfig/jenkins<span class="hljs-comment">#配置文件</span><br><span class="hljs-regexp">/usr/</span>lib/jenkins<br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/jenkins/</span>jenkins.war<br><span class="hljs-regexp">/usr/</span>sbin/rcjenkins<br><span class="hljs-regexp">/var/</span>cache/jenkins<br><span class="hljs-regexp">/var/</span>lib/jenkins<br><span class="hljs-regexp">/var/</span>log/jenkins<br></code></pre></td></tr></table></figure><p>访问安装主机的8080端口（默认端口）进行初始化安装</p><p><img src="image-20220913154325527.png" alt="image-20220913154325527"></p><p><img src="image-20220913154434060.png" alt="image-20220913154434060"></p><p><img src="image-20220913154551844.png" alt="image-20220913154551844"></p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>若插件安装过慢，可配置代理，将插件网站请求重定向为国内镜像源</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/">https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#nginx代理示例，将插件网站解析为本机的IP</span><br>location <span class="hljs-regexp">/download/</span>plugins &#123; <br>proxy_set_header Host mirrors.tuna.tsinghua.edu.cn; <br>proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>; <br>proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>; <br>rewrite <span class="hljs-regexp">/download/</span>plugins(.*) <span class="hljs-regexp">/jenkins/</span>plugins/<span class="hljs-variable">$1</span> <span class="hljs-keyword">break</span>; <br>proxy_pass http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn; <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20220913160011459.png" alt="image-20220913160011459"></p><h3 id="Jenkins部署从节点"><a href="#Jenkins部署从节点" class="headerlink" title="Jenkins部署从节点"></a>Jenkins部署从节点</h3><p>​安装过程同上，注意工作目录需要与配置一致</p><p><strong>添加从节点</strong></p><p><img src="image-20220913172231471.png" alt="image-20220913172231471"></p><p><img src="image-20220913172326955.png" alt="image-20220913172326955"></p><p>可选择ssh方式，不验证证书</p><p><img src="image-20220913172414937.png" alt="image-20220913172414937"></p><p>添加凭据</p><p><img src="image-20220913172559416.png" alt="image-20220913172559416"></p><h1 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h1><h3 id="修改全局安装配置"><a href="#修改全局安装配置" class="headerlink" title="修改全局安装配置"></a>修改全局安装配置</h3><p>默认所有登录用户可以做任何事，很不安全，安装基于角色的授权策略插件。</p><p><img src="image-20220913160724109.png" alt="image-20220913160724109"></p><p><img src="image-20220913160702089.png" alt="image-20220913160702089"></p><p><strong>添加全局和项目权限角色</strong></p><p><img src="image-20220913161218454.png" alt="image-20220913161218454"></p><p><img src="image-20220913161712363.png" alt="image-20220913161712363"></p><p><strong>分配角色</strong></p><p>user1将用于所有项目的read权限，project1项目的所有权限</p><p><img src="image-20220913161758070.png" alt="image-20220913161758070"></p><h3 id="配置非交互拉取gitlab代码"><a href="#配置非交互拉取gitlab代码" class="headerlink" title="配置非交互拉取gitlab代码"></a>配置非交互拉取gitlab代码</h3><p>​<img src="image-20220913162252258.png" alt="image-20220913162252258"></p><p><strong>类型选SSH</strong></p><p><img src="image-20220913162503303.png" alt="image-20220913162503303"></p><p><strong>自动克隆代码</strong></p><p><img src="image-20220913165933818.png" alt="image-20220913165933818"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">执行构建后可在本地看到项目代码<br>[root@localhost ~]<span class="hljs-variable">$ll</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/jenkins/</span>workspace<br>total <span class="hljs-number">0</span><br>drwxr-xr-x <span class="hljs-number">3</span> root root <span class="hljs-number">35</span> Sep <span class="hljs-number">13</span> <span class="hljs-number">17</span>:<span class="hljs-number">04</span> project1<br></code></pre></td></tr></table></figure><p><strong>将代码部署至应用服务器上</strong></p><p>可直接写，或写成脚本再调用</p><p><img src="image-20220913170957151.png" alt="image-20220913170957151"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">tomcat示例</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以下仅是为了便于测试，实际部署代码为了方便回滚，不删除旧版本，而是将服务代码目录的软连接删除，重新创建软连接指向新的版本</span><br>cd /var/lib/jenkins/workspace<br>tar czvf code.tar.gz project1<br>scp code.tar.gz www@10.0.0.153:/data/tomcat/tomcat_appdir/ <br>scp code.tar.gz www@10.0.0.154:/data/tomcat/tomcat_appdir/ <br>ssh www@10.0.0.153 &quot;systemctl stop tomcat &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/* &amp;&amp; cd /data/tomcat/tomcat_appdir &amp;&amp; tar xvf code.tar.gz -C /data/tomcat/tomcat_webdir/myapp/&quot; <br>ssh www@10.0.0.154 &quot;systemctl stop tomcat &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/* &amp;&amp; cd /data/tomcat/tomcat_appdir &amp;&amp; tar xvf code.tar.gz -C /data/tomcat/tomcat_webdir/myapp/&quot; <br>ssh www@10.0.0.153 &quot;systemctl start tomcat&quot; <br>ssh www@10.0.0.154 &quot;systemctl start tomcat&quot;<br></code></pre></td></tr></table></figure><h1 id="Jenkins流水线pipeline"><a href="#Jenkins流水线pipeline" class="headerlink" title="Jenkins流水线pipeline"></a>Jenkins流水线pipeline</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​pipeline 是帮助 Jenkins 实现 CI 到 CD 转变的重要角色，需要 jenkins 2.X 版本。 Pipeline 实现单个任务很难实现的复杂流程编排和任务可视化。通过将构建任务分阶段写到不同的stage里可以在pipeline界面看到每个步骤的执行情况。</p><p>​pipeline采用特殊语法，不过比较简单，可以在主体部分可使用shell命令，仅需满足格式要求即可。</p><ul><li>​Stage：一个 pipeline 可以划分为若干个 stage，阶段是一个逻辑分组，可以跨node 执行。</li><li>​Step：是 jenkins pipeline 最基本的操作单元，由各类 Jenkins 插件提供实现，一个 stage 中可以有多个 step</li><li>​Node：每个 node 都是一个 jenkins 节点，执行 step 的具体服务器。</li></ul><p>​</p><p>​Jenkins还自带pipeline语法生成器</p><p><img src="image-20220913173311556.png" alt="image-20220913173311556"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>克隆代码并部署到tomcat上（删除旧版本）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pipeline">#以下仅是为了便于测试，实际部署代码为了方便回滚，不删除旧版本，而是将服务代码目录的软连接删除，重新创建软连接指向新的版本<br>node &#123;<br>stage(&quot;clone&quot;)&#123;<br>    sh &#x27;rm -rf /var/lib/jenkins/workspace/project1&#x27;<br>git branch: &#x27;develop&#x27;, credentialsId: &#x27;0e23c215-2853-4bdf-9198-481f28ac0e1b&#x27;, url: &#x27;git@10.0.0.152:group1/project1.git<br>&#125;<br>stage(&quot;copy&quot;)&#123;<br>    sh &#x27;cd /var/lib/jenkins/workspace/ &amp;&amp; tar czvf code.tar.gz ./project1&#x27;<br>    sh &#x27;scp code.tar.gz www@10.0.0.154:/data/tomcat/tomcat_appdir/&#x27;<br>        sh &#x27;scp code.tar.gz www@10.0.0.153:/data/tomcat/tomcat_appdir/&#x27;<br>    &#125; <br>    stage(&quot;deploy&quot;)&#123;<br>    sh &#x27;ssh www@10.0.0.153 &quot;systemctl stop tomcat&quot;&#x27;<br>    sh &#x27;ssh www@10.0.0.154 &quot;systemctl stop tomcat&quot;&#x27;<br>        sh &#x27;ssh www@10.0.0.153 &quot;rm -rf /data/tomcat/tomcat_webdir/myapp/* &amp;&amp; cd /data/tomcat/tomcat_appdir &amp;&amp; tar xvf code.tar.gz -C /data/tomcat/tomcat_webdir/myapp/&quot;&#x27; <br>    sh &#x27;ssh www@10.0.0.154 &quot;rm -rf /data/tomcat/tomcat_webdir/myapp/* &amp;&amp; cd /data/tomcat/tomcat_appdir &amp;&amp; tar xvf code.tar.gz -C /data/tomcat/tomcat_webdir/myapp/&quot;&#x27; <br>   stage(&quot;start&quot;)&#123;<br>   sh &#x27;ssh www@10.0.0.154 &quot;systemctl start tomcat&quot;&#x27;<br>   sh &#x27;ssh www@10.0.0.154 &quot;systemctl start tomcat&quot;&#x27;<br>   &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>选择1个节点上运行（参考上文部署从节点）</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-title function_">node</span>(&quot;<span class="hljs-params">node1</span>&quot;)&#123;<br><span class="hljs-title function_">stage</span>(...)&#123;<br><span class="hljs-operator">...</span><br><span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pipline视图"><a href="#pipline视图" class="headerlink" title="pipline视图"></a>pipline视图</h3><p>​视图可用于归档 job 进行分组显示，比如将一个业务的视图放在一个视图显示，安装build pipeline插件之后将会有一个+号用于创建视图。</p><p>​推荐使用列表视图，可以将某业务的job执行情况保存到一个列表中分类查看。</p><p><img src="image-20220913180639313.png" alt="image-20220913180639313"></p><h1 id="Jenkins-sonarqube代码测试"><a href="#Jenkins-sonarqube代码测试" class="headerlink" title="Jenkins+sonarqube代码测试"></a>Jenkins+sonarqube代码测试</h1><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>​SonarQube 是一个用于代码质量管理的开放平台，通过插件机制，SonarQube可以 集成不同的测试工具，代码分析工具，以及持续集成工具，例如 Hudson&#x2F;Jenkins 等。</p><p>​代码质量指标</p><ul><li>复杂度</li><li>重复代码</li><li>单元测试统计</li><li>代码规则检测</li><li>注释率</li><li>结构与设计</li></ul><h3 id="sonarqube部署（server）"><a href="#sonarqube部署（server）" class="headerlink" title="sonarqube部署（server）"></a>sonarqube部署（server）</h3><p>​硬件和软件要求<a href="https://docs.sonarqube.org/latest/requirements/requirements/">https://docs.sonarqube.org/latest/requirements/requirements/</a></p><p>​官方安装指南<a href="https://docs.sonarqube.org/latest/setup/install-server/">https://docs.sonarqube.org/latest/setup/install-server/</a></p><ol><li><p>按照硬件要求确保虚拟机配置满足，安装符号版本要求的软件。</p></li><li><p>为sonarqube创建普通用户账号，创建sonar数据库和用户</p></li><li><p>解压软件包并做好&#x2F;安装目录&#x2F;sonarqube&#x2F;conf&#x2F;sonar.properties 配置</p></li><li><p>确保sonarqube文件属组和所属者为sonarqube</p></li><li><p>使用自带的脚本启动 &#x2F;安装目录&#x2F;sonarqube&#x2F;bin&#x2F;sonar.sh start </p><p>6.查看日志确保看到启动成功提示</p></li></ol><h3 id="Jenkins部署sonar-scanner（client）"><a href="#Jenkins部署sonar-scanner（client）" class="headerlink" title="Jenkins部署sonar-scanner（client）"></a>Jenkins部署sonar-scanner（client）</h3><p>官方下载<a href="https://binaries.sonarsource.com/?prefix=Distribution/sonar-scanner-cli/">https://binaries.sonarsource.com/?prefix=Distribution/sonar-scanner-cli/</a></p><p>官方文档<a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/">https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/</a></p><ol><li>下载并解压软件包</li><li>配置  &#x2F;安装路径&#x2F;sonar-scanner&#x2F;conf&#x2F;sonar-scanner.properties （sonar.host.url）</li><li>在sonarqube的web界面的配置中关闭强制认证</li></ol><p>每个扫描目录都需携带扫描配置文件sonar-project.properties</p><h3 id="sonarqube扫描机制"><a href="#sonarqube扫描机制" class="headerlink" title="sonarqube扫描机制"></a>sonarqube扫描机制</h3><p>​<img src="image-20220913203840347.png" alt="image-20220913203840347"></p><p>The SonarQube server running the following processes:</p><ul><li>a web server that serves the SonarQube user interface.</li><li>a search server based on Elasticsearch.</li><li>the compute engine in charge of processing code analysis reports and saving them in the SonarQube database.</li></ul><p>​以官方提供的示例sonar-examples-master.zip来看，解压后关键的文件有src（代码目录），sonar-project.properties（扫描配置）</p><p>​在当前目录执行&#x2F;usr&#x2F;local&#x2F;sonar-scanner&#x2F;bin&#x2F;sonar-scanner，会根据扫描配置来进行监测</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">以下为官方示例中的配置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Required metadata</span> <br>sonar.projectKey=org.sonarqube:php-simple-sq-scanner #自定义项目key：value<br>sonar.projectName=PHP :: Simple Project :: SonarQube Scanner #项目名称，显示在web界面 <br>sonar.projectVersion=1.0 #项目版本 <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Comma-separated paths to directories with sources (required)</span> <br>sonar.sources=src #源代码目录 <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Language</span> <br>sonar.language=php #代码语言类型 <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Encoding of the <span class="hljs-built_in">source</span> files</span> <br>sonar.sourceEncoding=UTF-8 #编码格式<br></code></pre></td></tr></table></figure><p>​执行sonar-scanner后可以在sonarqube的web界面查看扫描结果</p><h3 id="Jenkins安装Sonarqube插件"><a href="#Jenkins安装Sonarqube插件" class="headerlink" title="Jenkins安装Sonarqube插件"></a>Jenkins安装Sonarqube插件</h3><p><img src="image-20220913201015603.png" alt="image-20220913201015603"></p><p>​填写sonarqube-server地址</p><p><img src="image-20220913200943309.png" alt="image-20220913200943309"></p><p>在全局工具配置中安装扫描器</p><p><img src="image-20220913202054896.png" alt="image-20220913202054896"></p><h3 id="在项目中配置扫描"><a href="#在项目中配置扫描" class="headerlink" title="在项目中配置扫描"></a>在项目中配置扫描</h3><p><img src="image-20220913204352665.png" alt="image-20220913204352665"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># properties部分参考，其实就是sonar-project.properties</span><br><span class="hljs-attr">sonar.projectKey</span>=job1-master <br><span class="hljs-attr">sonar.projectName</span>=job1-master <br><span class="hljs-attr">sonar.projectVersion</span>=<span class="hljs-number">1.0</span> <br><span class="hljs-attr">sonar.sources</span>=./ <br><span class="hljs-attr">sonar.language</span>=php <br><span class="hljs-attr">sonar.sourceEncoding</span>=UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>这样就能在代码部署中添加扫描步骤了</p>]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes基础总结</title>
    <link href="/2022/09/10/kubernetes%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <url>/2022/09/10/kubernetes%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​本文主要参考k8s官方文档总结了kubernetes的部署过程、基础概念与命令。详细部分见官方对应章节。</p><p>​<a href="https://kubernetes.io/zh-cn/docs/home/">https://kubernetes.io/zh-cn/docs/home/</a></p><span id="more"></span><h1 id="Kubernetes基础概念"><a href="#Kubernetes基础概念" class="headerlink" title="Kubernetes基础概念"></a>Kubernetes基础概念</h1><p>​Kubernetes 是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。Kubernetes具有<strong>服务发现和负载均衡、存储编排、自动部署和回滚、自动调度容器、自我修复、密钥与配置管理</strong>等强大功能。</p><p>​以上功能在官网中都有详细解释。</p><h3 id="kubernetes组件概览"><a href="#kubernetes组件概览" class="headerlink" title="kubernetes组件概览"></a>kubernetes组件概览</h3><p>​k8s集群是由一组被称作node的主机组成， 这些节点上会运行由 Kubernetes 所管理的容器化应用。 工作节点会托管所谓的 Pods，而 Pod 就是作为应用负载的组件。 控制平面（control plane）管理集群中的工作节点和 Pods，为集群提供故障转移和高可用性， 这些控制平面一般跨多主机运行，而集群也会跨多个节点运行。</p><p><img src="image-20220910143737059.png" alt="image-20220910143737059"></p><h3 id="控制平面control-plane主要组件"><a href="#控制平面control-plane主要组件" class="headerlink" title="控制平面control plane主要组件"></a><strong>控制平面control plane</strong>主要组件</h3><p>​控制平面组件会为集群做出全局决策，负责资源的调度、检测和响应集群事件，例如当不满足部署的 <code>replicas</code> 字段时， 要启动新的pod。</p><p><strong>kube-apiserver</strong></p><p>​负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。也支持部署多实例来平衡流量。</p><p>​提供认证、授权、访问控制、API注册和发现机制。</p><p><strong>etcd</strong></p><p>​kubernetes集群存储所有数据的后台数据库。</p><p><strong>kube-scheduler</strong></p><p>​ 负责监视新创建的、未指定运行节点的pod， 并选择节点来让 Pod 在上面运行。</p><p>​调度决策考虑的因素包括Pod 的资源需求、软硬件及策略约束、 亲和性及反亲和性规范、数据位置、工作负载间的干扰及最后时限。</p><p><strong>kube-controller-manager</strong></p><p>​负责运行控制器进程，包括节点（node）控制器、任务（job）控制器、端点（endpoint）控制器、服务账户和令牌（token）控制器。</p><p>​可理解为集群内的管理控制中心。</p><h3 id="节点node主要组件"><a href="#节点node主要组件" class="headerlink" title="节点node主要组件"></a>节点node主要组件</h3><p><strong>kubelet</strong></p><p>​在集群中每个工作节点上运行。kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 描述的容器处于运行状态且健康。 <strong>kubelet 不会管理不是由 Kubernetes 创建的容器。</strong></p><p>​容器创建和健康性检查及状态汇报组件。</p><p><strong>kube-proxy</strong></p><p>​集群中每个节点上运行的网络代理，维护节点上的网络规则， 允许从集群内部或外部的网络会话与 Pod 进行网络通信。</p><p>​维护网络规则进行转发确保k8s服务可访问，还可为service提供服务发现和负载均衡。</p><h3 id="容器运行时（Container-Runtime）"><a href="#容器运行时（Container-Runtime）" class="headerlink" title="容器运行时（Container Runtime）"></a>容器运行时（Container Runtime）</h3><p>​容器运行环境是负责运行容器的软件。k8s支持多种容器运行环境，最常见的是containerd。containerd也是被docker使用的容器运行时。</p><h1 id="Kubernetes部署（kubeadm）"><a href="#Kubernetes部署（kubeadm）" class="headerlink" title="Kubernetes部署（kubeadm）"></a>Kubernetes部署（kubeadm）</h1><h3 id="主机环境准备"><a href="#主机环境准备" class="headerlink" title="主机环境准备"></a>主机环境准备</h3><p>​一台或多台运行兼容 deb&#x2F;rpm 的 Linux 操作系统的计算机；例如：Ubuntu 或 CentOS。每台机器 2 GB 以上的内存，内存不足时应用会受限制。用作控制平面节点的计算机上至少有 2 个 CPU。</p><p>​所有主机安装容器运行时和kubeadm。</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装docker，推荐使用国内源</span><br>sudo apt-get update  <br>apt -y install apt-transport-https ca-certificates curl software-propertiescommon<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装GPG证书</span><br>curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo aptkey add -<br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入软件源</span><br>sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/dockerce/linux/ubuntu $(lsb_release -cs) stable&quot; <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">根据kubernetes版本要求选择</span><br>apt-cache madison docker-ce docker-ce-cli apt-cache<br></code></pre></td></tr></table></figure><p>​所有主机最好禁用swap（旧版本不支持，新版本需要额外设置），关闭selinux，iptables（防止规则冲突）。进行以下内核参数设置，如果容器较多，必须进行其他内核优化，如最大打开文件数等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">net.ipv4.ip_forward = 1<br>net.bridge.bridge-nf-call-ip6tables = 1 <br>net.bridge.bridge-nf-call-iptables = 1 #⽹桥转发会被宿主机iptables的 FORWARD规则匹配<br></code></pre></td></tr></table></figure><h3 id="所有节点必需组件"><a href="#所有节点必需组件" class="headerlink" title="所有节点必需组件"></a>所有节点必需组件</h3><p>​控制平面节点：kubelet   kubeadm   kubectl</p><p>​工作节点： kubelet   kubeadm   （不需要kubectl命令）</p><p>版本最好一致，安装可采用国内源</p><h3 id="Debian-x2F-Ubuntu"><a href="#Debian-x2F-Ubuntu" class="headerlink" title="Debian &#x2F; Ubuntu"></a>Debian &#x2F; Ubuntu</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update &amp;&amp; apt-get install -y apt-transport-https<br>curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - <br>cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list<br>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main<br>EOF<br>apt-get update<br>apt-get install -y kubelet kubeadm kubectl<br></code></pre></td></tr></table></figure><h3 id="CentOS-x2F-RHEL-x2F-Fedora"><a href="#CentOS-x2F-RHEL-x2F-Fedora" class="headerlink" title="CentOS &#x2F; RHEL &#x2F; Fedora"></a>CentOS &#x2F; RHEL &#x2F; Fedora</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/<br>enabled=1<br>gpgcheck=1<br>repo_gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>EOF<br>setenforce 0<br>yum install -y kubelet kubeadm kubectl<br>systemctl enable kubelet &amp;&amp; systemctl start kubelet<br></code></pre></td></tr></table></figure><h3 id="准备镜像"><a href="#准备镜像" class="headerlink" title="准备镜像"></a>准备镜像</h3><p>​提前在控制节点下载镜像节约安装过程，使用国内镜像源，可写成脚本批量安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubeapiserver:v1.20.5 <br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubecontroller-manager:v1.20.5 <br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubescheduler:v1.20.5 <br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubeproxy:v1.20.5 <br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 <br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0 <br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.7.0<br></code></pre></td></tr></table></figure><h1 id="kubeadm-init集群初始化"><a href="#kubeadm-init集群初始化" class="headerlink" title="kubeadm init集群初始化"></a>kubeadm init集群初始化</h1><p>​详细可看以下官方文档</p><p><a href="https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file">https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file</a></p><h3 id="主要参数"><a href="#主要参数" class="headerlink" title="主要参数"></a>主要参数</h3><p>–apiserver-advertise-address string<br>API 服务器所公布的其正在监听的 IP 地址。如果未设置，则使用默认网络接口。</p><p>–apiserver-bind-port int32     默认值：6443<br>API 服务器绑定的端口。</p><p>–cert-dir string     默认值：”&#x2F;etc&#x2F;kubernetes&#x2F;pki”<br>保存和存储证书的路径。</p><p>–certificate-key string<br>用于加密 kubeadm-certs Secret 中的控制平面证书的密钥。</p><p>–config string<br>kubeadm 配置文件的路径。</p><p>–control-plane-endpoint string<br>为控制平面指定一个稳定的 IP 地址或 DNS 名称。</p><p>–dry-run<br>不要应用任何更改；只是输出将要执行的操作。</p><p>–ignore-preflight-errors strings<br>错误将显示为警告的检查列表；例如：’IsPrivilegedUser,Swap’。取值为 ‘all’ 时将忽略检查中的所有错误。</p><p>–image-repository string     默认值：”k8s.gcr.io”<br>选择用于拉取控制平面镜像的容器仓库</p><p>–kubernetes-version string     默认值：”stable-1”<br>为控制平面选择一个特定的 Kubernetes 版本。</p><p>–node-name string<br>指定节点的名称。</p><p>–pod-network-cidr string<br>指明 pod 网络可以使用的 IP 地址段。如果设置了这个参数，控制平面将会为每一个节点自动分配 CIDRs。</p><p>–service-cidr string     默认值：”10.96.0.0&#x2F;12”<br>为服务的虚拟 IP 地址另外指定 IP 地址段</p><p>–service-dns-domain string     默认值：”cluster.local”<br>为服务另外指定域名，例如：”myorg.internal”。</p><p>参考示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm init --apiserver-advertise-address=10.0.0.1 --control-planeendpoint=10.0.0.2 --apiserver-bind-port=6443 --kubernetes-version=v1.20.5 --pod-network-cidr=10.100.0.0/16 --service-cidr=10.200.0.0/16 --service-dnsdomain=test.local --image-repository=registry.cnhangzhou.aliyuncs.com/google_containers --ignore-preflight-errors=swap<br></code></pre></td></tr></table></figure><p>完成初始化后有以下提示：要使非 root 用户可以运行 kubectl，请运行以下命令， 它们也是 <code>kubeadm init</code> 输出的一部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h1 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h1><h3 id="安装-Pod-网络附加组件"><a href="#安装-Pod-网络附加组件" class="headerlink" title="安装 Pod 网络附加组件"></a>安装 Pod 网络附加组件</h3><p>​注意 Pod 网络不得与任何主机网络冲突。网络组件可使用<strong>kube-flannel</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">kubectl apply -f &lt;<span class="hljs-keyword">add</span>-<span class="hljs-keyword">on</span>.yaml&gt;<br></code></pre></td></tr></table></figure><p>​Flannel实质上是一种“覆盖网络(overlay network)”，也就是将TCP数据包装在另一种网络包里面进行路由转发和通信。<br>​Flannel通过Etcd服务维护了一张节点间的路由表，详细记录了各节点子网网段 。源主机的flanneld服务将原本的数据内容封装后根据自己的路由表投递给目的节点的flanneld服务，数据到达以后被解包，然后直接进入目的节点的flannel0虚拟网卡，然后被转发到目的主机的docker0虚拟网卡，最后就像本机容器通信一下的有docker0路由到达目标容器。</p><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>​任一控制节点执行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">kubeadm init phase upload-certs <span class="hljs-comment">--upload-certs </span><br></code></pre></td></tr></table></figure><h3 id="其他节点加入集群"><a href="#其他节点加入集群" class="headerlink" title="其他节点加入集群"></a>其他节点加入集群</h3><p>​hash和token是执行完init后打印到屏幕上的，需要记录以供该步使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">worker  node</span><br>kubeadm join --token &lt;token&gt; &lt;control-plane-host&gt;:&lt;control-plane-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">control node要多加一个选项</span><br>kubeadm join --token &lt;token&gt; &lt;control-plane-host&gt;:&lt;control-plane-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt; --control-plane<br></code></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>使用适当的凭证与控制平面节点通信，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl drain &lt;node name&gt; --delete-emptydir-data --force --ignore-daemonsets<br></code></pre></td></tr></table></figure><p>在删除节点之前，请重置 <code>kubeadm</code> 安装的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm reset<br></code></pre></td></tr></table></figure><p>重置过程不会重置或清除 iptables 规则或 IPVS 表。如果你希望重置 iptables，则必须手动进行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X<br></code></pre></td></tr></table></figure><p>如果要重置 IPVS 表，则必须运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipvsadm -C<br></code></pre></td></tr></table></figure><p>现在删除节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl delete node &lt;node name&gt;<br></code></pre></td></tr></table></figure><h1 id="Kubernetes部分主要对象"><a href="#Kubernetes部分主要对象" class="headerlink" title="Kubernetes部分主要对象"></a>Kubernetes部分主要对象</h1><p>​API对象是k8s的管理操作单元。每个API对象都有3大类属性：元数据metadata、规范spec和状态status。其中metadata是用来标识API对象的，status描述了系统实际当前达到的状态。</p><p>​K8s中所有的配置都是通过API对象的spec去设置的，也就是用户通过配置系统的理想状态来改变系统，这是k8s重要设计理念之一，即所有的操作都是声明式的而不是命令式的。</p><h3 id="资源对象"><a href="#资源对象" class="headerlink" title="资源对象"></a>资源对象</h3><p><strong>Pod</strong></p><p>​K8s集群中运行部署应用或服务的最小单元，它是可以支持多容器的。Pod的设计理念是支持多个容器在一个Pod中共享网络地址和文件系统，可以通过进程间通信和文件共享这种简单高效的方式组合完成微服务。</p><p><strong>ReplicaSet、ReplicationController、Deployment</strong></p><p>​副本控制器，由RC发展为RS，到Deployment调用RS。Deployment表示用户对K8s集群的一次更新操作。Deployment是一个比RS应用模式更广的API对象，可以是创建一个新的服务，更新一个新的服务，也可以是滚动升级一个服务。</p><p><strong>Service</strong></p><p>​一个Pod只是一个运行服务的实例，随时可能在一个节点上停止，在另一个节点以一个新的IP启动一个新的Pod，因此不能以确定的IP和端口号提供服务。要稳定地提供服务需要服务发现和负载均衡能力。服务发现完成的工作，是针对客户端访问的服务，找到对应的的后端服务实例。在K8s集群中，客户端需要访问的服务就是Service对象。每个Service会对应一个集群内部有效的虚拟IP，集群内部通过虚拟IP访问一个服务。在K8s集群中微服务的负载均衡是由Kube-proxy实现的。</p><p><strong>其它</strong></p><p>​<strong>Node、Namespace、Ingress、Labbel、Job</strong>等</p><h3 id="存储对象"><a href="#存储对象" class="headerlink" title="存储对象"></a>存储对象</h3><p><strong>Volume</strong></p><p>​实现数据和镜像解耦，与docker -v挂载目录类似，可多容器挂载同一目录实现数据共享。有与容器共同创建销毁的emptyDir、只持久保存在一个node上的hostPath、共享卷nfs</p><p><strong>ConfigMap</strong></p><p>​实现配置信息和镜像解耦，可在yaml中编写configmap对象，然后调用。</p><h3 id="策略对象"><a href="#策略对象" class="headerlink" title="策略对象"></a>策略对象</h3><p>​<strong>Securitycontext、ResourceQuota、LimitRange</strong></p><h3 id="身份对象"><a href="#身份对象" class="headerlink" title="身份对象"></a>身份对象</h3><p>​<strong>ServiceAccount、Role、ClusterRole</strong></p><h1 id="kubectl命令"><a href="#kubectl命令" class="headerlink" title="kubectl命令"></a>kubectl命令</h1><p>​<strong>语法kubectl [command] [TYPE] [NAME] [flags]</strong></p><p>其中 <code>command</code>、<code>TYPE</code>、<code>NAME</code> 和 <code>flags</code> 分别是：</p><ul><li><p><code>command</code>：指定要对一个或多个资源执行的操作，例如 <code>create</code>、<code>get</code>、<code>describe</code>、<code>delete</code>。</p></li><li><p><code>TYPE</code>：指定<a href="https://kubernetes.io/zh-cn/docs/reference/kubectl/#resource-types">资源类型</a>。资源类型不区分大小写， 可以指定单数、复数或缩写形式。</p></li><li><p><code>NAME</code>：指定资源的名称。名称区分大小写。 如果省略名称，则显示所有资源的详细信息。例如：<code>kubectl get pods</code>。在对多个资源执行操作时，你可以按类型和名称指定每个资源，或指定一个或多个文件。</p></li><li><p><code>flags</code>： 指定可选的参数。例如，可以使用 <code>-s</code> 或 <code>--server</code> 参数指定 Kubernetes API 服务器的地址和端口。</p></li></ul><h3 id="常用command"><a href="#常用command" class="headerlink" title="常用command"></a>常用command</h3><p>创建、删除、查看信息、缩放<strong>create&#x2F;delete&#x2F;get&#x2F;describe&#x2F;scale</strong></p><p>贴实现pod与node亲和性  <strong>label</strong>    反亲和性<strong>taint</strong>  标记node不被调度 <strong>condon</strong>    驱逐node上的pod   <strong>drain</strong></p><p>以文件或标准输入为准应用或更新资源   <strong>apply</strong></p><p>以下为示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">kubectl apply - 以文件或标准输入为准应用或更新资源。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 &lt;directory&gt; 路径下的任意 .yaml、.yml 或 .json 文件 创建对象。</span><br>kubectl apply -f &lt;directory&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">kubectl get - 列出一个或多个资源。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">以纯文本输出格式列出所有 Pod，-o wide包含附加信息(如节点名)。</span><br>kubectl get pods -o wide<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出在节点 server01 上运行的所有 Pod</span><br>kubectl get pods --field-selector=spec.nodeName=server01<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">kubectl describe - 显示一个或多个资源的详细状态，默认情况下包括未初始化的资源。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示名为 &lt;pod-name&gt; 的 Pod 的详细信息。</span><br>kubectl describe nodes &lt;node-name&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">描述所有的 Pod</span><br>kubectl describe pods<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">kubectl delete - 基于文件、标准输入或通过指定标签选择器、名称、资源选择器或资源来删除资源。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 pod.yaml 文件中指定的类型和名称删除 Pod。</span><br>kubectl delete -f pod.yaml<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除所有带有 <span class="hljs-string">&#x27;&lt;label-key&gt;=&lt;label-value&gt;&#x27;</span> 标签的 Pod 和服务。</span><br>kubectl delete pods,services -l &lt;label-key&gt;=&lt;label-value&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">kubectl <span class="hljs-built_in">exec</span> - 对 Pod 中的容器执行命令。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行输出 <span class="hljs-string">&#x27;date&#x27;</span> 获取在 Pod &lt;pod-name&gt; 中容器 &lt;container-name&gt; 的输出。</span><br>kubectl exec &lt;pod-name&gt; -c &lt;container-name&gt; -- date<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取一个交互 TTY 并在 Pod  &lt;pod-name&gt; 中运行 /bin/bash。默认情况下，输出来自第一个容器。</span><br>kubectl exec -ti &lt;pod-name&gt; -- /bin/bash<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker镜像存储与分发</title>
    <link href="/2022/09/07/docker%E9%95%9C%E5%83%8F%E5%AD%98%E5%82%A8%E4%B8%8E%E5%88%86%E5%8F%91/"/>
    <url>/2022/09/07/docker%E9%95%9C%E5%83%8F%E5%AD%98%E5%82%A8%E4%B8%8E%E5%88%86%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>​本文主要总结了单机docker镜像仓库和分布式仓库harbor的使用方法。</p><span id="more"></span><h1 id="核心组件Docker-Registry"><a href="#核心组件Docker-Registry" class="headerlink" title="核心组件Docker Registry"></a>核心组件Docker Registry</h1><p>以下为docker官方文档节选</p><p><a href="https://docs.docker.com/registry/">https://docs.docker.com/registry/</a></p><h2 id="What-it-is"><a href="#What-it-is" class="headerlink" title="What it is"></a>What it is</h2><p>The Registry is a stateless, highly scalable server side application that stores and lets you distribute Docker images. </p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>The Registry is compatible with Docker engine <strong>version 1.6.0 or higher</strong>.</p><h2 id="Basic-commands"><a href="#Basic-commands" class="headerlink" title="Basic commands"></a>Basic commands</h2><p>Start your registry</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> --name registry registry:<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>Pull (or build) some image from the hub</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull ubuntu</span><br></code></pre></td></tr></table></figure><p>Tag the image so that it points to your registry</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker image <span class="hljs-keyword">tag</span> <span class="hljs-title">ubuntu</span> localhost:<span class="hljs-number">5000</span>/myfirstimage<br></code></pre></td></tr></table></figure><p>Push it</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> push localhost:<span class="hljs-number">5000</span>/myfirstimage<br></code></pre></td></tr></table></figure><p>Pull it back</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull localhost:<span class="hljs-number">5000</span>/myfirstimage<br></code></pre></td></tr></table></figure><p>Now stop your registry and remove all data</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">docker <span class="hljs-built_in">container</span> stop registry &amp;&amp; docker <span class="hljs-built_in">container</span> rm -v registry<br></code></pre></td></tr></table></figure><h3 id="Customize-the-storage-location"><a href="#Customize-the-storage-location" class="headerlink" title="Customize the storage location"></a>Customize the storage location</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run -d <span class="hljs-string">\</span><br> -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> <span class="hljs-string">\</span><br> --restart=always <span class="hljs-string">\</span><br> --name registry <span class="hljs-string">\</span><br> -v /mnt/registry:/<span class="hljs-keyword">var</span>/lib/registry <span class="hljs-string">\</span><br> registry:<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="搭建单机docker仓库"><a href="#搭建单机docker仓库" class="headerlink" title="搭建单机docker仓库"></a>搭建单机docker仓库</h1><p>​在上文介绍中可以看到docker仓库以镜像形式下载，以容器形式运行，因此为了保证数据安全性在启动为容器时设置本地存储。</p><p><strong>下载docker  registry</strong></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ldif">root@ubuntu1804:~<span class="hljs-comment"># docker pull registry</span><br>Using default tag: latest<br><span class="hljs-attribute">latest</span>: Pulling from library/registry<br><span class="hljs-attribute">79e9f2f55bf5</span>: Pull complete <br><span class="hljs-attribute">0d96da54f60b</span>: Pull complete <br><span class="hljs-attribute">5b27040df4a2</span>: Pull complete <br><span class="hljs-attribute">e2ead8259a04</span>: Pull complete <br><span class="hljs-attribute">3790aef225b9</span>: Pull complete <br><span class="hljs-attribute">Digest</span>: sha256:169211e20e2f2d5d115674681eb79d21a217b296b43374b8e39f97fcf866b375<br><span class="hljs-attribute">Status</span>: Downloaded newer image for registry:latest<br></code></pre></td></tr></table></figure><p><strong>创建授权使用目录</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@ubuntu1804</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># mkdir /docker/auth -p</span><br>root<span class="hljs-variable">@ubuntu1804</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># cd /docker/</span><br>root<span class="hljs-variable">@ubuntu1804</span><span class="hljs-symbol">:/docker</span><span class="hljs-comment"># htpasswd -Bbn user1 123456 &gt; auth/htpasswd</span><br><br>root<span class="hljs-variable">@ubuntu1804</span><span class="hljs-symbol">:/docker</span><span class="hljs-comment"># docker run -d -p 5000:5000 --restart=always --name registry1 -v /docker/auth:/auth -e &quot;REGISTRY_AUTH=htpasswd&quot; -e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd registry</span><br><span class="hljs-number">750</span>a0331875a4c1b7e7522de7c948046788ee379fa8363387edeed18b3c08669<br><br>root<span class="hljs-variable">@ubuntu1804</span><span class="hljs-symbol">:/docker</span><span class="hljs-comment"># docker ps</span><br><span class="hljs-title class_">CONTAINER</span> <span class="hljs-title class_">ID</span>        <span class="hljs-title class_">IMAGE</span>               <span class="hljs-title class_">COMMAND</span>                  <span class="hljs-title class_">CREATED</span>             <span class="hljs-title class_">STATUS</span>              <span class="hljs-title class_">PORTS</span>                                       <span class="hljs-title class_">NAMES</span><br><span class="hljs-number">750</span>a0331875a        registry            <span class="hljs-string">&quot;/entrypoint.sh /etc…&quot;</span>   <span class="hljs-number">4</span> seconds ago       <span class="hljs-title class_">Up</span> <span class="hljs-number">3</span> seconds        <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-symbol">:</span><span class="hljs-number">5000</span>-&gt;<span class="hljs-number">5000</span>/tcp, ::<span class="hljs-symbol">:</span><span class="hljs-number">5000</span>-&gt;<span class="hljs-number">5000</span>/tcp   registry1<br></code></pre></td></tr></table></figure><p><img src="image-20220907133716296.png" alt="image-20220907133716296"></p><p><strong>登录仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">直接登录会报错，Error response from daemon: Get <span class="hljs-string">&quot;https://10.0.0.151:5000/v2/&quot;</span>: http: server gave HTTP response to HTTPS client</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进行以下配置</span><br>root@ubuntu1804:/docker# cat /etc/docker/daemon.json <br>&#123;<br>       &quot;insecure-registries&quot;:[&quot;10.0.0.151:5000&quot;] <br>&#125;<br><br>root@ubuntu1804:/docker# docker login 10.0.0.151:5000<br>Username: user1<br>Password: <br>WARNING! Your password will be stored unencrypted in /root/.docker/config.json.<br>Configure a credential helper to remove this warning. See<br>https://docs.docker.com/engine/reference/commandline/login/#credentials-store<br><br>Login Succeeded<br></code></pre></td></tr></table></figure><p><strong>上传镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu1804:/docker# docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>nginx1/centos8-nginx       v1                  d0e6e079bbfd        40 hours ago        342MB<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">需要先打标签</span><br>root@ubuntu1804:/docker# docker tag nginx1/centos8-nginx:v1  10.0.0.151:5000/nginx1/centos8-nginx:v1<br>root@ubuntu1804:/docker# docker push 10.0.0.151:5000/nginx1/centos8-nginx:v1<br>The push refers to repository [10.0.0.151:5000/nginx1/centos8-nginx]<br>0e22592c19fe: Pushed <br>74ddd0ec08fa: Pushed <br>v1: digest: sha256:c61e423da454331aef2dd20f5be17b87701d7c9f020eda7b45d596f46daf5856 size: 741<br></code></pre></td></tr></table></figure><p><strong>下载镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">解决上文的报错还可以修改进程文件，添加一个启动参数即可</span><br>[root@docker-server2 ~]#vim /lib/systemd/system/docker.service <br>ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock  --insecure-registry &#x27;10.0.0.151:5000&#x27;<br><br>[root@docker-server2 ~]#systemctl daemon-reload<br>[root@docker-server2 ~]#systemctl restart docker<br>[root@docker-server2 ~]#docker login 10.0.0.151:5000<br>Username: user1<br>Password: <br>WARNING! Your password will be stored unencrypted in /root/.docker/config.json.<br>Configure a credential helper to remove this warning. See<br>https://docs.docker.com/engine/reference/commandline/login/#credentials-store<br><br>Login Succeeded<br><br>[root@docker-server2 ~]#docker pull 10.0.0.151:5000/nginx1/centos8-nginx:v1<br>v1: Pulling from nginx1/centos8-nginx<br>a1d0c7532777: Pull complete <br>88225f54c54f: Pull complete <br>Digest: sha256:c61e423da454331aef2dd20f5be17b87701d7c9f020eda7b45d596f46daf5856<br>Status: Downloaded newer image for 10.0.0.151:5000/nginx1/centos8-nginx:v1<br>10.0.0.151:5000/nginx1/centos8-nginx:v1<br>[root@docker-server2 ~]#docker images<br>REPOSITORY                             TAG       IMAGE ID       CREATED        SIZE<br>10.0.0.151:5000/nginx1/centos8-nginx   v1        d0e6e079bbfd   41 hours ago   342MB<br></code></pre></td></tr></table></figure><h1 id="分布式仓库harbor"><a href="#分布式仓库harbor" class="headerlink" title="分布式仓库harbor"></a><strong>分布式仓库harbor</strong></h1><p>​官网<a href="https://goharbor.io/">https://goharbor.io/</a></p><p>​github<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p><p>​Harbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器。Harbor 有助于提升用户使用 Registry 构建和运行环境、传输镜像的效率，总体性能更高。Harbor 还支持安装在多个 Registry 节点的镜像资源复制，可以通过web界面管理多个节点间镜像同步。分布式仓库也实现了负载均衡和高可用。</p><p>​另外，Harbor 也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><p><strong>harbor组件</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gauss">nginx：反向代理组件，代理 registry、ui、<span class="hljs-built_in">token</span> 等服务。<br>harbor-adminserver：系统管理接口，可以修改系统配置以及获取系统信息。<br>harbor-db：存储项目的元数据、用户、规则、复制策略等信息。 <br>harbor-jobservice：harbor 里面主要是为了镜像仓库之前同步使用的。 <br>harbor-<span class="hljs-built_in">log</span>：收集其他 harbor 的日志信息。 <br>harbor-ui：一个用户界面模块，用来管理 registry。 <br>registry：存储 docker images 的服务，并且提供 pull/<span class="hljs-keyword">push</span> 服务。 <br>redis：存储缓存信息 webhook：当 registry 中的 image 状态发生变化的时候去记录更新日志、复制 等操作。 <br><span class="hljs-built_in">token</span> service：在 docker client 进行 pull/<span class="hljs-keyword">push</span> 的时候负责 <span class="hljs-built_in">token</span> 的发放 <br></code></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>System requirements:</strong></p><p><strong>On a Linux host:</strong> docker 17.06.0-ce+ and docker-compose 1.18.0+ .</p><p>Download binaries of **<a href="https://github.com/vmware/harbor/releases">Harbor release </a>**and follow <strong><a href="https://goharbor.io/docs/latest/install-config/">Installation &amp; Configuration Guide</a></strong> to install Harbor.</p><p>If you want to deploy Harbor on Kubernetes, please use the <strong><a href="https://github.com/goharbor/harbor-helm">Harbor chart</a></strong>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">确保docker版本和docker-compose版本满足要求</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">升级pip 安装docker-compose</span><br>pip install --upgrade pip<br>pip install 安装docker-compose<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压软件包后执行自带的安装脚本</span><br>root@ubuntu1804:/usr/local/src/harbor# ./install.sh <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装后可发现新增大量镜像</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">web访问本机可进入管理界面</span><br></code></pre></td></tr></table></figure><p><img src="image-20220907155031732.png" alt="image-20220907155031732"></p><p><img src="image-20220907155221730.png" alt="image-20220907155221730"></p><h3 id="harbor主要功能"><a href="#harbor主要功能" class="headerlink" title="harbor主要功能"></a>harbor主要功能</h3><p>​<strong>新建项目</strong></p><p>​后续镜像可选择上传到哪个项目</p><p><img src="image-20220907155554587.png" alt="image-20220907155554587"></p><p>​<strong>镜像上传和下载</strong></p><p>​与上文中镜像上传下载方法完全一致。</p><p>​如果harbor没有配置https，依然会出现上文报错，进行同样配置即可。</p><h3 id="分布式harbor配置"><a href="#分布式harbor配置" class="headerlink" title="分布式harbor配置"></a>分布式harbor配置</h3><p>​<strong>配置镜像同步</strong></p><p>​需要确保对方能正常连接。可互相配置同步实习双向复制。</p><p>​配置完成后可实现镜像仓库的高可用。</p><p><img src="image-20220907160357106.png" alt="image-20220907160357106"></p><p><img src="image-20220907160548746.png" alt="image-20220907160548746"></p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>harbor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker镜像制作</title>
    <link href="/2022/09/04/docker%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/"/>
    <url>/2022/09/04/docker%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>​本文总结了docker镜像制作的主要命令和步骤。</p><p>​<span id="more"></span></p><h1 id="将容器提交为镜像"><a href="#将容器提交为镜像" class="headerlink" title="将容器提交为镜像"></a>将容器提交为镜像</h1><p><strong>Usage:docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</strong></p><p>Create a new image from a container’s changes</p><p>Options:<br>  -a, –author string    Author (e.g., “John Hannibal Smith <a href="mailto:&#x68;&#97;&#110;&#110;&#x69;&#x62;&#x61;&#x6c;&#64;&#x61;&#x2d;&#x74;&#101;&#x61;&#109;&#46;&#x63;&#111;&#109;">&#x68;&#97;&#110;&#110;&#x69;&#x62;&#x61;&#x6c;&#64;&#x61;&#x2d;&#x74;&#101;&#x61;&#109;&#46;&#x63;&#111;&#109;</a>“)<br>  -c, –change list      Apply Dockerfile instruction to the created image<br>  -m, –message string   Commit message<br>  -p, –pause            Pause container during commit (default true)</p><h3 id="下载基础镜像"><a href="#下载基础镜像" class="headerlink" title="下载基础镜像"></a>下载基础镜像</h3><figure class="highlight elixir"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@ubuntu1804</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># docker pull centos</span><br>root<span class="hljs-variable">@ubuntu1804</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># docker images</span><br><span class="hljs-title class_">REPOSITORY</span>          <span class="hljs-title class_">TAG</span>                 <span class="hljs-title class_">IMAGE</span> <span class="hljs-title class_">ID</span>            <span class="hljs-title class_">CREATED</span>             <span class="hljs-title class_">SIZE</span><br>centos              latest              <span class="hljs-number">5</span>d0da3dc9764        <span class="hljs-number">11</span> months ago       <span class="hljs-number">231</span>MB<br></code></pre></td></tr></table></figure><h3 id="进入容器安装服务"><a href="#进入容器安装服务" class="headerlink" title="进入容器安装服务"></a>进入容器安装服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu1804:~# docker run -it 5d0da3dc9764 bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装时报错Error: Failed to download metadata <span class="hljs-keyword">for</span> repo <span class="hljs-string">&#x27;appstream&#x27;</span>: Cannot prepare internal mirrorlist: No URLs <span class="hljs-keyword">in</span> mirrorlist</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">上面下载了centos8镜像，由于yum源停止服务，需要修改仓库配置</span><br>[root@f3929ca91032 /]#sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*<br>[root@f3929ca91032 /]#sed -i &#x27;s@#baseurl=http://mirror.centos.org@baseurl=http://vault.centos.org@g&#x27; /etc/yum.repos.d/CentOS-*<br><br>[root@f3929ca91032 /]# yum install nginx -y<br></code></pre></td></tr></table></figure><h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@f3929ca91032 /]#vi /etc/nginx/nginx.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">加入该行关闭后台运行</span><br>daemon off;<br>[root@f3929ca91032 /]# vi /usr/share/nginx/html/index.html <br>nginx page on docker f392<br></code></pre></td></tr></table></figure><h3 id="提交为镜像"><a href="#提交为镜像" class="headerlink" title="提交为镜像"></a>提交为镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu1804:~# docker ps<br>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS          <br>f3929ca91032        5d0da3dc9764        &quot;bash&quot;              17 minutes ago      Up 17 minutes                      <br>root@ubuntu1804:~# docker commit -a &quot;Chow 9527@huafu.com&quot; -m &quot;nginx v9527-1&quot; --change=&quot;EXPOSE 80&quot; f3929ca91032 centos8-nginx:v1<br>sha256:d0e6e079bbfd1c4886f7ff7575fd6343b359764a6c9cf442313b37a441ffe6eb<br><br>root@ubuntu1804:~# docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE<br>centos8-nginx       v1                  d0e6e079bbfd        About a minute ago   342MB<br>centos              latest              5d0da3dc9764        11 months ago        231MB<br><br></code></pre></td></tr></table></figure><h1 id="测试镜像"><a href="#测试镜像" class="headerlink" title="测试镜像"></a>测试镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu1804:~# docker run -d -p 80:80 --name nginx-test-container centos8-nginx:v1 /usr/sbin/nginx<br>4567bd335c478f272ead64b6c07ce4d2c16a6f0001c0e5f3fd8a5cb34637f0cd<br>root@ubuntu1804:~# docker ps<br>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                               NAMES<br>4567bd335c47        centos8-nginx:v1    &quot;/usr/sbin/nginx&quot;   8 seconds ago       Up 8 seconds        0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx-test-container<br></code></pre></td></tr></table></figure><p>访问宿主机80端口</p><p><img src="image-20220905212025074.png" alt="image-20220905212025074"></p><h1 id="dockerfile制作镜像"><a href="#dockerfile制作镜像" class="headerlink" title="dockerfile制作镜像"></a>dockerfile制作镜像</h1><p>详细可参考官方文档<a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><p>​Docker可以通过读取Dockerfile中的指令自动构建镜像。Dockerfile是一个文本文档，包含用户可以在命令行上调用的所有命令以组装镜像。dockerfile可以一个镜像为基础进行多次构建，例如可以先以系统镜像为基础，编写安装所需环境的dockerfile，再以生成的第二个镜像为基础，编写安装不同版本服务的dockerfile。</p><p>​下图为多次构建镜像示意</p><p><img src="image-20220905215130170.png" alt="image-20220905215130170"></p><h3 id="Dockerfile基础"><a href="#Dockerfile基础" class="headerlink" title="Dockerfile基础"></a>Dockerfile基础</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span>  image:<span class="hljs-keyword">label</span><span class="language-bash"> <span class="hljs-comment">#用于指定父镜像，必须为除注释外第一行</span></span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> <span class="hljs-comment">#用于添加宿主机本地的文件、目录、压缩等资源到镜像里面去，会自动解压tar.gz格式的压缩包，不会自动解压zip</span></span><br><span class="hljs-keyword">MAINTAINER</span>   <span class="hljs-comment">#镜像的作者信息</span><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> <span class="hljs-comment">#设置镜像的属性标签</span></span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> <span class="hljs-comment">#用于添加宿主机本地的文件、目录、压缩等资源到镜像里面去，不会解压任何压缩包</span></span><br><span class="hljs-keyword">ENV</span> <span class="hljs-comment">#设置容器环境变量</span><br><span class="hljs-keyword">USER</span> nginx <span class="hljs-comment">#指定运行操作的用户</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> COMMAND1 &amp;&amp; COMMAND2  <span class="hljs-comment">#执行shell命令，但是一定要以非交互式的方式执行</span></span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> <span class="hljs-comment">#创建具有指定名称的挂载点，并将其标记为保存来自本机主机或其他容器的外部挂载卷。</span></span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-comment">#用于定义工作目录  WORKDIR /a  WORKDIR b 后目录变为/a/b</span></span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span> <span class="hljs-comment">#声明需要映射的端口（没有实际作用）</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash">  <span class="hljs-comment">#镜像启动为一个容器时候的默认命令或脚本， CMD [&quot;/bin/bash&quot;] </span></span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> <span class="hljs-comment">#也可以用于定义容器在启动时候默认执行的命令或者脚本，如果是和CMD命令混合使用的时候，会将CMD的命令当做参数传递给ENTRYPOINT后面的脚本，可以在脚本中对参数做判断并相应的容器初始化操作。</span></span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash">(脚本) + CMD(参数)<span class="hljs-comment">#混用</span></span><br></code></pre></td></tr></table></figure><p>以下用nginx的镜像构建过程为例</p><h3 id="基础镜像"><a href="#基础镜像" class="headerlink" title="基础镜像"></a>基础镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">按上面的方法，配置centos镜像的软件仓库后提交为新镜像，并以此为基础镜像</span><br>root@ubuntu1804:~# docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>centos8             v2                  dc87a8b50bf1        4 seconds ago       260MB<br></code></pre></td></tr></table></figure><h3 id="编写dockerfile"><a href="#编写dockerfile" class="headerlink" title="编写dockerfile"></a>编写dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">root@ubuntu1804:~<span class="hljs-comment"># mkdir nginx </span><br><span class="hljs-comment">#文件名必须为Dockerfile</span><br>root@ubuntu1804:~/nginx<span class="hljs-comment"># vim Dockerfile</span><br><span class="hljs-comment">#test2 nginx dockerfile</span><br><span class="hljs-keyword">FROM</span> centos8:v2<br><span class="hljs-comment">#准备编译环境</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum install -y vim wget tree lrzsz gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> nginx-1.16.1.tar.gz /usr/local/src/</span><br><span class="hljs-comment">#编译安装</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cd</span> /usr/local/src/nginx-1.16.1 &amp;&amp; ./configure --prefix=/usr/local/nginx --with-http_sub_module &amp;&amp; make &amp;&amp; make install</span><br><span class="hljs-comment">#拷贝配置文件</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> nginx.conf /usr/local/nginx/conf/nginx.conf</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> useradd nginx -s /sbin/nologin</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -s /usr/local/nginx/sbin/nginx /usr/sbin/nginx</span><br><span class="hljs-comment">#准备测试页面</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;test nginx page&quot;</span> &gt; /usr/local/nginx/html/index.html</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span> <span class="hljs-number">443</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;nginx&quot;</span>,<span class="hljs-string">&quot;-g&quot;</span>,<span class="hljs-string">&quot;daemon off;&quot;</span>]</span><br><br><span class="hljs-comment">#CMD需要关闭后台执行If you add a custom CMD in the Dockerfile, be sure to include -g daemon off; in the CMD in order for nginx to stay in the foreground, so that Docker can track the process properly (otherwise your container will stop immediately after starting)!</span><br></code></pre></td></tr></table></figure><h3 id="生成镜像"><a href="#生成镜像" class="headerlink" title="生成镜像"></a>生成镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu1804:~/nginx# ls<br>Dockerfile  nginx-1.16.1.tar.gz  nginx.conf<br>root@ubuntu1804:~/nginx# docker build -h<br>Usage:docker build [OPTIONS] PATH | URL | -<br>  -f, --file string             Name of the Dockerfile (Default is &#x27;PATH/Dockerfile&#x27;)<br>  -t, --tag list                Name and optionally a tag in the &#x27;name:tag&#x27; format<br>root@ubuntu1804:~/nginx# docker build -t nginx-test:v1 .<br>...<br>...<br>Step 10/10 : CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 3a8df215e104</span><br>Removing intermediate container 3a8df215e104<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">7d3ed59330ba</span><br>Successfully built 7d3ed59330ba<br>Successfully tagged nginx-test:v1<br><br>root@ubuntu1804:~/nginx# docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>nginx-test          v1                  7d3ed59330ba        2 minutes ago       600MB<br><br>root@ubuntu1804:~/nginx# docker run -it -d -p 80:80 7d3ed59330ba  <br></code></pre></td></tr></table></figure><p><img src="image-20220905235331530.png" alt="image-20220905235331530"></p><p>其他服务同理，docker镜像构建步骤类似。可以一步完成构建也可以分多次构建。</p>]]></content>
    
    
    <categories>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器基础</title>
    <link href="/2022/09/04/docker%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/04/docker%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>​本文主要概括了容器的基础知识和基础命令。</p><span id="more"></span><h1 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h1><p>​docker是基于linux内核lXC技术发展的虚拟化技术。docker采用客户端和服务端架构，使用远程API管理和创建docker容器，运行时不需要类似虚拟机的额外资源开销，可以理解为更方便部署、更轻量级的虚拟机，因此被称为应用容器（Application Container）</p><p>​docker三大理念：构建（build）、运输（ship）、运行（run）。使用过程可概括为：构建容器镜像，上传镜像仓库，docker主机从仓库pull镜像并运行。</p><p>​docker依赖的关键技术：<strong>user namespace</strong>实现容器的用户和用户组隔离互不干扰、<strong>linux control groups（CGroup）</strong>实现每个容器的资源限制和分配优先级设置。</p><p>​编排工具：大规模容器统一管理、动态伸缩、故障自愈需要依赖容器编排工具。使用最多的就是kubernetes（k8s）</p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>​docker主机可使用物理机或虚拟机，运行docker服务进程和容器。开启docker后可看到dockerd和containerd进程，containerd是创建容器的进程，运行中的容器是它的子进程（containerd-shim），dockerd可理解为管理进程，不但可管理containerd，还负责处理client访问和容器间通信（子进程docker-proxy）。</p><p><img src="image-20220904174114924.png" alt="image-20220904174114924"></p><h3 id="容器规范"><a href="#容器规范" class="headerlink" title="容器规范"></a>容器规范</h3><p>​不同容器公司开发的容器技术遵守OCI定义的规范，保证容器的可移植性和相互操作性。</p><p>​<strong>runtime spec（runc）：</strong>runtime是真正运行容器的地方，为了运行不同容器runtime需要和操作系统内核紧密合作。定义了容器ID、容器进程PID、容器创建、生命周期规范，以json保存在&#x2F;run&#x2F;docker&#x2F;runtime-runc&#x2F;moby&#x2F;容器ID&#x2F;state.json文件中</p><p>​**image format spec:**定义了容器镜像的文件系统分层结构、manifest、config、index等文件的规范。其中涉及镜像不同layer的管理、容器运行配置、索引等。</p><h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><p>可在以下网站获得安装包</p><p>rpm包</p><p><a href="https://download.docker.com/linux/centos/">https://download.docker.com/linux/centos/</a></p><p>二进制包</p><p><a href="https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/">https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/</a></p><p>ubuntu</p><p><strong>仓库配置过程可以参考下文</strong></p><p><a href="https://zhuanlan.zhihu.com/p/143156163">https://zhuanlan.zhihu.com/p/143156163</a></p><p><strong>查看可安装版本</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">apt</span>-cache madison docker-ce docker-ce-cli<br><br><span class="hljs-comment">#选择docker18.09版本安装</span><br><span class="hljs-attribute">apt</span> install docker-ce=<span class="hljs-number">5</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">9</span>~<span class="hljs-number">3</span>-<span class="hljs-number">0</span>~ubuntu-bionic docker-ce-cli=<span class="hljs-number">5</span>:<span class="hljs-number">18</span>.<span class="hljs-number">09</span>.<span class="hljs-number">9</span>~<span class="hljs-number">3</span>-<span class="hljs-number">0</span>~ubuntu-bionic<br></code></pre></td></tr></table></figure><h1 id="docker镜像基础命令"><a href="#docker镜像基础命令" class="headerlink" title="docker镜像基础命令"></a>docker镜像基础命令</h1><p>以下命令具体参数用法可-h查看帮助</p><p><strong>搜索镜像（官方仓库）</strong></p><p>docker search镜像名：版本（默认为latest）</p><p><strong>下载镜像</strong></p><p>docker pull镜像名</p><p><strong>查看本地镜像</strong></p><p>docker images</p><p><strong>镜像导出</strong></p><p>docker save 镜像名 -o  &#x2F;path&#x2F;image.tar.gz</p><p>docker save 镜像名 &gt;  &#x2F;path&#x2F;image.tar.gz</p><p><strong>镜像导入</strong></p><p>docker load &lt; &#x2F;path&#x2F;image.tar.gz</p><p><strong>删除镜像</strong></p><p>docker rmi 镜像名</p><h1 id="docker容器基础命令"><a href="#docker容器基础命令" class="headerlink" title="docker容器基础命令"></a>docker容器基础命令</h1><p>以下命令具体参数用法可-h查看帮助</p><p><strong>启动容器</strong></p><p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p><p>-t, –tty                            Allocate a pseudo-TTY</p><p>-i, –interactive                    Keep STDIN open even if not attached</p><p>–rm                             Automatically remove the container when it exits</p><p><strong>进入运行中的容器</strong></p><p>docker  exec -it  容器ID  bash</p><p>退出容器后依然运行</p><p><strong>传递运行命令</strong></p><p>docker run -d  镜像名   命令</p><p><strong>查看运行容器</strong></p><p>docker ps   [-a]    -a可显示已关闭容器</p><p><strong>删除容器</strong></p><p>docker rm  容器ID&#x2F;容器名 -f强制删除运行中容器</p><p><strong>容器与宿主机间拷贝文件</strong></p><p>docker cp  容器ID:&#x2F;path&#x2F;file  &#x2F;path&#x2F;file           反过来同理</p><p><strong>指定端口映射（可指定多端口）</strong></p><p>docker run  -p[本地IP：]本地端口：容器端口–name  容器名  镜像名</p><p><strong>查看容器端口映射</strong></p><p>docker port  容器ID&#x2F;容器名</p><p><strong>查看容器状态</strong></p><p>docker inspect [OPTIONS] NAME|ID [NAME|ID…]<br>  -f, –format string   Format the output using the given Go template<br>  -s, –size            Display total file sizes if the type is container<br>       –type string     Return JSON for specified type</p><p><img src="image-20220904221658884.png" alt="image-20220904221658884"></p><p><img src="image-20220904221905187.png" alt="image-20220904221905187"></p>]]></content>
    
    
    <categories>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟化基础和KVM管理虚拟机</title>
    <link href="/2022/09/03/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%9F%BA%E7%A1%80%E5%92%8CKVM%E7%AE%A1%E7%90%86%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2022/09/03/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%9F%BA%E7%A1%80%E5%92%8CKVM%E7%AE%A1%E7%90%86%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>​本文主要总结了虚拟化的基础概念，使用KVM部署虚拟机的方法。</p><span id="more"></span><h1 id="虚拟化概念"><a href="#虚拟化概念" class="headerlink" title="虚拟化概念"></a>虚拟化概念</h1><p>​虚拟化是一种资源管理技术，将物理机的CPU、内存、磁盘、网络适配器等实体资源予以重新分割、组合，从而最大化合理利用物理资源。物理机可叫做宿主机，虚拟机叫做客户机，虚拟操作系统也称为guest os。在宿主机上可看到虚拟机以进程的形式运行。</p><p>​通过虚拟化技术可在一台物理机上运行多个操作系统和应用，互相严密隔离，在虚拟操作系统与物理机内核间工作着hypervisor，管理虚拟机资源的分配和操作系统加载。根据hypervisor类型可分为裸机型和主机托管型，即可直接运行在物理机上（如VMware EXSI   KVM）和必须运行在有虚拟化功能的操作系统上（如VMware workstation）</p><p><img src="image-20220903210439797.png" alt="image-20220903210439797"></p><p>​虚拟化还有以下分类：服务器虚拟化、网络虚拟化（k8s和OpenStack中需要使用）、桌面虚拟化、应用虚拟化、存储虚拟化（NAS、ceph、samba）。</p><p>​而容器技术被称为下一代虚拟化技术，容器可粗略理解为更轻量级、更高效、更方便批量部署的虚拟机。</p><h1 id="云计算概念"><a href="#云计算概念" class="headerlink" title="云计算概念"></a>云计算概念</h1><p>​云计算（cload computing）是google前首席执行官在搜索引擎大会上提出的构想，即通过网络为客户提供网络计算服务，包括硬件、平台、软件资源均由网络提供，该网络则被称为“云”。</p><p>​云计算分层：iaas（Infrastructure as a Service），基础设施服务，如阿里云ecs云服务器，购买云服务器无需管理硬件和hypervisor。paas（Platform as a Service），通过网络提供某种服务，如购买阿里云的redis服务，购买该服务无需管理服务器的运行环境、中间件、操作系统，仅需管理该应用。saas（Software-as-a-Service），软件服务，如云盘、企业邮箱等，可直接使用，无需管理该服务，仅需管理用户数据。</p><h1 id="KVM创建虚拟机"><a href="#KVM创建虚拟机" class="headerlink" title="KVM创建虚拟机"></a>KVM创建虚拟机</h1><p>​如果宿主机是虚拟机，需要确认勾选了cpu的虚拟化功能。目前一般物理机的CPU均已支持虚拟化。</p><h3 id="KVM工具包"><a href="#KVM工具包" class="headerlink" title="KVM工具包"></a>KVM工具包</h3><p>​<strong>centOS：</strong>qemu-kvm  qemu-kvm-tools  libvirt  libvirt-client libvirt-manager  virt-install</p><p>​<strong>ubuntu：</strong>qemu-kvm  virt-manager  libvirt-daemon-system</p><h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><p>​libvirt虚拟化管理工具和应用程序接口</p><p>​virshKVM命令行工具</p><p>​virt-manager图形化管理工具</p><p>​OpenStack开源虚拟化编排工具，用于大规模虚拟机管理</p><h3 id="准备网络"><a href="#准备网络" class="headerlink" title="准备网络"></a>准备网络</h3><p>​使虚拟机能访问外网。</p><p>​宿主机配置NAT网络，则虚拟机连接外网，但不可从外部访问。宿主机配置网桥网络，则虚拟机既可连接外网，也可从外部访问。</p><h3 id="创建磁盘"><a href="#创建磁盘" class="headerlink" title="创建磁盘"></a>创建磁盘</h3><p>​默认保存路径 &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images</p><p>​示例：创建一个10G  raw格式磁盘</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">qemu-img create -f raw /var/lib/libvirt/images/test1.raw 10G<br></code></pre></td></tr></table></figure><p>​命令用法，具体参数用法省略</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[root@localhost ~]</span>$qemu-img -h<br><br>Command syntax:<br>  check <span class="hljs-comment">[-q]</span> <span class="hljs-comment">[-f fmt]</span> <span class="hljs-comment">[--output=ofmt]</span> <span class="hljs-comment">[-r <span class="hljs-comment">[leaks | all]</span>]</span> <span class="hljs-comment">[-T src_cache]</span> filename<br>  create <span class="hljs-comment">[-q]</span> <span class="hljs-comment">[-f fmt]</span> <span class="hljs-comment">[-o options]</span> filename <span class="hljs-comment">[size]</span><br>  commit <span class="hljs-comment">[-q]</span> <span class="hljs-comment">[-f fmt]</span> <span class="hljs-comment">[-t cache]</span> filename<br>  compare <span class="hljs-comment">[-f fmt]</span> <span class="hljs-comment">[-F fmt]</span> <span class="hljs-comment">[-T src_cache]</span> <span class="hljs-comment">[-p]</span> <span class="hljs-comment">[-q]</span> <span class="hljs-comment">[-s]</span> filename1 filename2<br>  convert <span class="hljs-comment">[-c]</span> <span class="hljs-comment">[-p]</span> <span class="hljs-comment">[-q]</span> <span class="hljs-comment">[-n]</span> <span class="hljs-comment">[-f fmt]</span> <span class="hljs-comment">[-t cache]</span> <span class="hljs-comment">[-T src_cache]</span> <span class="hljs-comment">[-O output_fmt]</span> <span class="hljs-comment">[-o options]</span> <span class="hljs-comment">[-s snapshot_name]</span> <span class="hljs-comment">[-S sparse_size]</span> filename <span class="hljs-comment">[filename2 <span class="hljs-comment">[...]</span>]</span> output_filename<br>  info <span class="hljs-comment">[-f fmt]</span> <span class="hljs-comment">[--output=ofmt]</span> <span class="hljs-comment">[--backing-chain]</span> filename<br>  map <span class="hljs-comment">[-f fmt]</span> <span class="hljs-comment">[--output=ofmt]</span> filename<br>  snapshot <span class="hljs-comment">[-q]</span> <span class="hljs-comment">[-l | -a snapshot | -c snapshot | -d snapshot]</span> filename<br>  rebase <span class="hljs-comment">[-q]</span> <span class="hljs-comment">[-f fmt]</span> <span class="hljs-comment">[-t cache]</span> <span class="hljs-comment">[-T src_cache]</span> <span class="hljs-comment">[-p]</span> <span class="hljs-comment">[-u]</span> -b backing_file <span class="hljs-comment">[-F backing_fmt]</span> filename<br>  resize <span class="hljs-comment">[-q]</span> filename <span class="hljs-comment">[+ | -]</span>size<br>  amend <span class="hljs-comment">[-q]</span> <span class="hljs-comment">[-f fmt]</span> <span class="hljs-comment">[-t cache]</span> -o options filename<br></code></pre></td></tr></table></figure><h3 id="安装方法虚拟设备配置"><a href="#安装方法虚拟设备配置" class="headerlink" title="安装方法虚拟设备配置"></a>安装方法虚拟设备配置</h3><p>​示例，使用hypervisor为kvm，虚拟机名为centos7  内存1024m  虚拟cpu2颗   安装光盘路径&#x2F;usr&#x2F;local&#x2F;src&#x2F;CentOS-7-x86_64-Minimal- 1908.iso</p><p>磁盘路径为上文创建的磁盘， 不自动连接客户端控制台</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">virt</span><span class="hljs-literal">-</span><span class="hljs-comment">install</span> <span class="hljs-literal">--</span><span class="hljs-comment">virt</span><span class="hljs-literal">-</span><span class="hljs-comment">type kvm</span> <span class="hljs-literal">--</span><span class="hljs-comment">name centos7</span> <span class="hljs-literal">--</span><span class="hljs-comment">ram 1024</span> <span class="hljs-literal">--</span><span class="hljs-comment">vcpus 2</span> <span class="hljs-literal">--</span><span class="hljs-comment">cdrom=/usr/local/src/CentOS</span><span class="hljs-literal">-</span><span class="hljs-comment">7</span><span class="hljs-literal">-</span><span class="hljs-comment">x86_64</span><span class="hljs-literal">-</span><span class="hljs-comment">Minimal</span><span class="hljs-literal">-</span> <span class="hljs-comment">1908</span><span class="hljs-string">.</span><span class="hljs-comment">iso</span> <span class="hljs-literal">--</span><span class="hljs-comment">disk path=/var/lib/libvirt/images/test1</span><span class="hljs-string">.</span><span class="hljs-comment">raw</span> <span class="hljs-literal">--</span><span class="hljs-comment">network network=default</span> <span class="hljs-literal">--</span><span class="hljs-comment">graphics vnc</span><span class="hljs-string">,</span><span class="hljs-comment">listen=0</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0</span> <span class="hljs-literal">--</span> <span class="hljs-comment">noautoconsole</span><br></code></pre></td></tr></table></figure><p>​主要选项如下，其他省略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@localhost</span> <span class="hljs-operator">~</span>]$virt<span class="hljs-operator">-</span>install <span class="hljs-comment">--help</span><br>usage: virt<span class="hljs-operator">-</span>install <span class="hljs-comment">--name NAME --memory MB STORAGE INSTALL [options]</span><br><br><span class="hljs-keyword">Create</span> a <span class="hljs-keyword">new</span> virtual machine <span class="hljs-keyword">from</span> specified install media.<br><br>optional arguments:<br>  <span class="hljs-operator">-</span>h, <span class="hljs-comment">--help            show this help message and exit</span><br>  <span class="hljs-comment">--version             show program&#x27;s version number and exit</span><br>  <span class="hljs-comment">--connect URI         Connect to hypervisor with libvirt URI</span><br><br>General Options:<br>  <span class="hljs-operator">-</span>n NAME, <span class="hljs-comment">--name NAME  Name of the guest instance</span><br>  <span class="hljs-comment">--memory MEMORY       Configure guest memory allocation. Ex:</span><br>                        <span class="hljs-comment">--memory 1024 (in MiB)</span><br>                        <span class="hljs-comment">--memory 512,maxmemory=1024</span><br>                        <span class="hljs-comment">--memory 512,maxmemory=1024,hotplugmemorymax=2048,hotplugmemoryslots=2</span><br>  <span class="hljs-comment">--vcpus VCPUS         Number of vcpus to configure for your guest. Ex:</span><br>                        <span class="hljs-comment">--vcpus 5</span><br>                        <span class="hljs-comment">--vcpus 5,maxvcpus=10,cpuset=1-4,6,8</span><br>                        <span class="hljs-comment">--vcpus sockets=2,cores=4,threads=2</span><br>  <span class="hljs-comment">--cpu CPU             CPU model and features. Ex:</span><br>                        <span class="hljs-comment">--cpu coreduo,+x2apic</span><br>                        <span class="hljs-comment">--cpu host-passthrough</span><br>                        <span class="hljs-comment">--cpu host</span><br>  <span class="hljs-comment">--metadata METADATA   Configure guest metadata. Ex:</span><br>                        <span class="hljs-comment">--metadata name=foo,title=&quot;My pretty title&quot;,uuid=...</span><br>                        <span class="hljs-comment">--metadata description=&quot;My nice long description&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>​可使用vnc viewer远程连接宿主机的相应端口，从而连接到虚拟机，初始化安装。</p><p>​或者使用virt-manager图形化界面初始化安装。</p><p>​virt-manager上可进行虚拟机的配置修改、迁移、克隆，操作类似VMware workstation，可使用远程控制终端来显示图形界面。</p><h3 id="将VMware虚拟机迁移到kvm中"><a href="#将VMware虚拟机迁移到kvm中" class="headerlink" title="将VMware虚拟机迁移到kvm中"></a>将VMware虚拟机迁移到kvm中</h3><p>​将虚拟机文件拷贝到kvm宿主机中，使用qemu-img转换VMware磁盘文件格式vmdk为kvm的格式即可。</p><h1 id="虚拟化环境案例"><a href="#虚拟化环境案例" class="headerlink" title="虚拟化环境案例"></a>虚拟化环境案例</h1><p>​在内部网络中有部分服务需要允许外部访问，可进行如下配置。实际配置中还可配置数据网络，即添加第三个网桥。保证网卡高可用可先多配置网卡进行网卡绑定再配置网桥。</p><p><img src="image-20220903212152014.png" alt="image-20220903212152014"></p><h1 id="KVM热迁移"><a href="#KVM热迁移" class="headerlink" title="KVM热迁移"></a>KVM热迁移</h1><p>​需要将宿主机1的虚拟机迁移至宿主机2</p><p>​宿主机1安装openssh-askpass ，然后可在virt-manager界面连接宿主机2，管理宿主机2的虚拟机。填写迁移目标，选择迁移虚拟机即可。另一主机ping该虚拟机可发现，甚至没有丢包。</p><p>​推荐使用共享存储，不需拷贝磁盘文件，而仅需拷贝操作系统和虚拟机配置，可大幅提升迁移速度</p><p><img src="image-20220903213943406.png" alt="image-20220903213943406"></p><p>需要做有对方域名解析，勾选允许不安全</p><p><img src="image-20220903214309437.png" alt="image-20220903214309437"></p><h1 id="商业虚拟机管理工具VMware-vsphere"><a href="#商业虚拟机管理工具VMware-vsphere" class="headerlink" title="商业虚拟机管理工具VMware vsphere"></a>商业虚拟机管理工具VMware vsphere</h1><p>​以下均需要付费使用，申请试用后可下载以下软件包。</p><p>​VMware vcenter server提供功能更强大的服务器虚拟化管理平台，可在web界面上进行管理。必须运行在windows server上</p><p>​vmware esxi内部有微型操作系统，可直接运行在物理机，物理机与虚拟机间少了一层物理机操作系统，理论上有更好的性能。物理机需要开启辅助虚拟化。安装esxi后，提供web界面，可登录进行管理虚拟机。</p><p>查看官网了解VMware vsphere</p><p><a href="https://docs.vmware.com/cn/VMware-vSphere/index.html">https://docs.vmware.com/cn/VMware-vSphere/index.html</a></p>]]></content>
    
    
    <categories>
      
      <category>虚拟化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>KVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zabbix配置总结</title>
    <link href="/2022/08/31/Zabbix%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2022/08/31/Zabbix%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​本文主要总结了zabbix server、zabbix agent、zabbix proxy的配置文件中一些比较重要参数。</p><span id="more"></span><h1 id="zabbix监控结构"><a href="#zabbix监控结构" class="headerlink" title="zabbix监控结构"></a>zabbix监控结构</h1><p>​agent被动模式需要server定期打开随机端口发送数据收集指令，agent收集相应数据；主动模式为agent主动以随机端口连接server获取监控项，然后主动发送数据，server仅需打开一个固定端口，可减轻server压力。</p><p>​proxy被动和主动模式与agent类似。proxy与server和agent配置有许多相通之处。</p><p><img src="image-20220831144346897.png" alt="image-20220831144346897"></p><p><img src="image-20220831145943251.png" alt="image-20220831145943251"></p><h1 id="zabbix-server-配置"><a href="#zabbix-server-配置" class="headerlink" title="zabbix server 配置"></a>zabbix server 配置</h1><p>​二进制包安装默认位置&#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: SourceIP</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Source IP address <span class="hljs-keyword">for</span> outgoing connections. 当本机有多个IP时需要指定用哪个对外连接</span><br>SourceIP=<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: LogType</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Specifies <span class="hljs-built_in">where</span> <span class="hljs-built_in">log</span> messages are written to:指定日志类型</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">system  - syslog</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">file    - file specified with LogFile parameter</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">console - standard output</span><br>LogType=file <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: LogFileSize</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Maximum size of <span class="hljs-built_in">log</span> file <span class="hljs-keyword">in</span> MB.以MB为单位滚动写入日志，达到指定大小会从头开始写</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">0 - <span class="hljs-built_in">disable</span> automatic <span class="hljs-built_in">log</span> rotation.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-1024</span><br>LogFileSize=<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: DebugLevel</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Specifies debug level:记录哪个级别的日志，调试排错时可选4，默认3</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">0 - basic information about starting and stopping of Zabbix processes</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1 - critical information</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2 - error information</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3 - warnings</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4 - <span class="hljs-keyword">for</span> debugging (produces lots of information)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">5 - extended debugging (produces even more information)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-5</span><br>DebugLevel=3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: DBHost数据库主机地址</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Database host name.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">If <span class="hljs-built_in">set</span> to localhost, socket is used <span class="hljs-keyword">for</span> MySQL.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">If <span class="hljs-built_in">set</span> to empty string, socket is used <span class="hljs-keyword">for</span> PostgreSQL.</span><br>DBHost=<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: DBName数据库名</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Database name.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">DBName=</span><br>DBName=zabbix_server <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: DBUser登录数据库账号</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Database user.</span><br>DBUser=<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: DBPassword登录数据库账号密码</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Database password.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Comment this line <span class="hljs-keyword">if</span> no password is used. 没有密码就注释</span><br>DBPassword=<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: DBSocket指定socket文件路径</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Path to MySQL socket.</span><br>DBSocket= <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: HistoryStorageURL  elasticsearch服务器地址，保存zabbix历史数据</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">History storage HTTP[S] URL.</span><br>HistoryStorageURL= <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: HistoryStorageTypeselasticsearch索引类型</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Comma separated list of value types to be sent to the <span class="hljs-built_in">history</span> storage.</span><br>HistoryStorageTypes=uint,dbl,str,log,text <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">########### ADVANCED PARAMETERS ################</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartPollers预启动多少个实例数量</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of pollers.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-1000</span><br>StartPollers=5 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartIPMIPollers</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of IPMI pollers.IPMI收集子进程数量</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      The IPMI manager process is automatically started when at least one IPMI poller is started.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-1000</span><br>StartIPMIPollers=0 #IPMI收集数量<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartPreprocessors</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of preprocessing workers.预启动多少个进程用于处理zabbix agent数据</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      The preprocessing manager process is automatically started when preprocessor worker is started.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-1000</span><br>StartPreprocessors=3 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartPollersUnreachable不可达主机的轮询进程的初始实例启动数量</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of pollers <span class="hljs-keyword">for</span> unreachable hosts (including IPMI and Java).</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">At least one poller <span class="hljs-keyword">for</span> unreachable hosts must be running <span class="hljs-keyword">if</span> regular, IPMI or Java pollers are started.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-1000</span><br>StartPollersUnreachable=1 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartTrappers预启动的Trappers进程数据</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of trappers.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Trappers accept incoming connections from Zabbix sender, active agents and active proxies.Trappers接收主动代理或主动客户端发来的连接</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">At least one trapper process must be running to display server availability and view queue <span class="hljs-keyword">in</span> the frontend.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-1000</span><br>StartTrappers=5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartPingersICMP ping进程的初始实例数量</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of ICMP pingers.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-1000</span><br>StartPingers=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartHTTPPollers http实例进程数量</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of HTTP pollers.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-1000</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">StartHTTPPollers=1</span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartTimers计时器实例数量，计时器用于计算问题的发生时间和步骤同步等</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of timers.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Timers process maintenance periods.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Only the first timer process handles host maintenance updates. Problem suppression updates are shared</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">between all timers.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-1000</span><br>StartTimers=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartEscalators用于处理动作中的自动步骤的进程的数量</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of escalators.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-100</span><br>StartEscalators=1 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartAlerters报警实例预启动数量</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of alerters.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Alerters send the notifications created by action operations.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-100</span><br>StartAlerters=3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: JavaGatewayjavagateway服务器地址，java pollers必须设置，如监控tomcat时需要配置</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">IP address (or hostname) of Zabbix Java gateway.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Only required <span class="hljs-keyword">if</span> Java pollers are started.</span><br>JavaGateway=<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: JavaGatewayPort</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Port that Zabbix Java gateway listens on.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1024-32767</span><br>JavaGatewayPort=10052<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartJavaPollersjava轮训实例预启动数量</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of Java pollers.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Mandatory: no</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-1000</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default:</span><br>StartJavaPollers=20<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: SNMPTrapperFilesnmp触发器临时文件路径</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Temporary file used <span class="hljs-keyword">for</span> passing data from SNMP <span class="hljs-built_in">trap</span> daemon to the server.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Must be the same as <span class="hljs-keyword">in</span> zabbix_trap_receiver.pl or SNMPTT configuration file.</span><br>SNMPTrapperFile=/tmp/zabbix_traps.tmp <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: ListenIPtrapper监听地址</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">List of comma delimited IP addresses that the trapper should listen on.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Trapper will listen on all network interfaces <span class="hljs-keyword">if</span> this parameter is missing.</span><br>ListenIP=0.0.0.0 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: HousekeepingFrequency多少小时清理一次代理端数据库的历史数据</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">How often Zabbix will perform housekeeping procedure (<span class="hljs-keyword">in</span> hours).</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Housekeeping is removing outdated information from the database.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">To prevent Housekeeper from being overloaded, no more than 4 <span class="hljs-built_in">times</span> HousekeepingFrequency</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">hours of outdated information are deleted <span class="hljs-keyword">in</span> one housekeeping cycle, <span class="hljs-keyword">for</span> each item.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">To lower load on server startup housekeeping is postponed <span class="hljs-keyword">for</span> 30 minutes after server start.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">With HousekeepingFrequency=0 the housekeeper can be only executed using the runtime control option.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">In this <span class="hljs-keyword">case</span> the period of outdated information deleted <span class="hljs-keyword">in</span> one housekeeping cycle is 4 <span class="hljs-built_in">times</span> the</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">period since the last housekeeping cycle, but not less than 4 hours and not greater than 4 days.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-24</span><br>HousekeepingFrequency=1 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: MaxHousekeeperDelete每次最多删除历史数据的行数</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">The table <span class="hljs-string">&quot;housekeeper&quot;</span> contains <span class="hljs-string">&quot;tasks&quot;</span> <span class="hljs-keyword">for</span> housekeeping procedure <span class="hljs-keyword">in</span> the format:</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">[housekeeperid], [tablename], [field], [value].</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">No more than <span class="hljs-string">&#x27;MaxHousekeeperDelete&#x27;</span> rows (corresponding to [tablename], [field], [value])</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">will be deleted per one task <span class="hljs-keyword">in</span> one housekeeping cycle.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">If <span class="hljs-built_in">set</span> to 0 <span class="hljs-keyword">then</span> no <span class="hljs-built_in">limit</span> is used at all. In this <span class="hljs-keyword">case</span> you must know what you are doing!</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-1000000</span><br>MaxHousekeeperDelete=5000<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: CacheSize配置信息缓存大小</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Size of configuration cache, <span class="hljs-keyword">in</span> bytes.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Shared memory size <span class="hljs-keyword">for</span> storing host, item and trigger data.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 128K-8G</span><br>CacheSize=8M <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: CacheUpdateFrequency更新缓存数据的频率，单位为秒</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">How often Zabbix will perform update of configuration cache, <span class="hljs-keyword">in</span> seconds.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-3600</span><br>CacheUpdateFrequency=60 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: HistoryCacheSize历史数据的缓存大小</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Size of <span class="hljs-built_in">history</span> cache, <span class="hljs-keyword">in</span> bytes.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Shared memory size <span class="hljs-keyword">for</span> storing <span class="hljs-built_in">history</span> data.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 128K-2G</span><br>HistoryCacheSize=16M <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: TrendCacheSize用于设置划分多少系统共享内存用于存储计算出来的趋势数据，此参数值从一定程度上可影响数据库读压力</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Size of trend cache, <span class="hljs-keyword">in</span> bytes.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Shared memory size <span class="hljs-keyword">for</span> storing trends data.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Mandatory: no</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 128K-2G</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default:</span><br>TrendCacheSize=4M <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: Timeout数据获取等待超时时间</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Specifies how long we <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span> agent, SNMP device or external check (<span class="hljs-keyword">in</span> seconds).</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-30</span><br>Timeout=3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: TrapperTimeout触发器处理新数据的最长时间，单位是秒</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Specifies how many seconds trapper may spend processing new data.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-300</span><br>TrapperTimeout=300<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: UnreachablePeriod当主机不可达多少秒后，设置为主机不可用，单位是秒</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">After how many seconds of unreachability treat a host as unavailable.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-3600</span><br>UnreachablePeriod=45 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: UnavailableDelay主机不可达后多久检查一次该主机的可用性</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">How often host is checked <span class="hljs-keyword">for</span> availability during the unavailability period, <span class="hljs-keyword">in</span> seconds.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-3600</span><br>UnavailableDelay=60<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: AlertScriptsPath监控报警脚本路径,取决于编译时候的datadir参数</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Full path to location of custom alert scripts.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Default depends on compilation options.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">To see the default path run <span class="hljs-built_in">command</span> <span class="hljs-string">&quot;zabbix_server --help&quot;</span>.</span><br>AlertScriptsPath=$&#123;datadir&#125;/zabbix/alertscripts<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: ExternalScripts脚本存储路径</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Full path to location of external scripts.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Default depends on compilation options.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">To see the default path run <span class="hljs-built_in">command</span> <span class="hljs-string">&quot;zabbix_server --help&quot;</span>.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default:</span><br>ExternalScripts=$&#123;datadir&#125;/zabbix/externalscripts<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartProxyPollers启用多少子进程与代理端通信</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Number of pre-forked instances of pollers <span class="hljs-keyword">for</span> passive proxies.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-250</span><br>StartProxyPollers=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: ProxyConfigFrequency被动模式下，server多少秒同步配置文件至proxy</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">How often Zabbix Server sends configuration data to a Zabbix Proxy <span class="hljs-keyword">in</span> seconds.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">This parameter is used only <span class="hljs-keyword">for</span> proxies <span class="hljs-keyword">in</span> the passive mode.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-3600*24*7</span><br>ProxyConfigFrequency=3600<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: ProxyDataFrequency被动模式下，zabbix server间隔多少秒获取数据</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">How often Zabbix Server requests <span class="hljs-built_in">history</span> data from a Zabbix Proxy <span class="hljs-keyword">in</span> seconds.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">This parameter is used only <span class="hljs-keyword">for</span> proxies <span class="hljs-keyword">in</span> the passive mode.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-3600</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default:</span><br>ProxyDataFrequency=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: AllowRoot是否允许root身份运行zabbix</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Allow the server to run as <span class="hljs-string">&#x27;root&#x27;</span>. If disabled and the server is started by <span class="hljs-string">&#x27;root&#x27;</span>, the server</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">will try to switch to the user specified by the User configuration option instead.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Has no effect <span class="hljs-keyword">if</span> started under a regular user.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">0 - <span class="hljs-keyword">do</span> not allow</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1 - allow</span><br>AllowRoot=0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: User设置zabbix 启动用户</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Drop privileges to a specific, existing user on the system.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Only has effect <span class="hljs-keyword">if</span> run as <span class="hljs-string">&#x27;root&#x27;</span> and AllowRoot is disabled.</span><br>User=zabbix<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: Include导入其他目录的配置文件</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">You may include individual files or all files <span class="hljs-keyword">in</span> a directory <span class="hljs-keyword">in</span> the configuration file.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Installing Zabbix will create include directory <span class="hljs-keyword">in</span> /usr/local/etc, unless modified during the compile time.</span><br>Include=/usr/local/etc/zabbix_server.general.conf <br>Include=/usr/local/etc/zabbix_server.conf.d/<br>Include=/usr/local/etc/zabbix_server.conf.d/*.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StatsAllowedIP允许访问zabbix server的IP地址列表</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">List of comma delimited IP addresses, optionally <span class="hljs-keyword">in</span> CIDR notation, or DNS names of external Zabbix instances.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Stats request will be accepted only from the addresses listed here. If this parameter is not <span class="hljs-built_in">set</span> no stats requests</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">will be accepted.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">If IPv6 support is enabled <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-string">&#x27;::127.0.0.1&#x27;</span>, <span class="hljs-string">&#x27;::ffff:127.0.0.1&#x27;</span> are treated equally</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">and <span class="hljs-string">&#x27;::/0&#x27;</span> will allow any IPv4 or IPv6 address.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">&#x27;0.0.0.0/0&#x27;</span> can be used to allow any IPv4 address.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Example: StatsAllowedIP=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com</span><br>StatsAllowedIP=<br></code></pre></td></tr></table></figure><h1 id="zabbix-agent配置"><a href="#zabbix-agent配置" class="headerlink" title="zabbix agent配置"></a>zabbix agent配置</h1><p>​&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf </p><p>​与server配置中相同作用的参数省略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: LogRemoteCommands是否允许远程执行命令，有时需要开启</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Enable logging of executed shell commands as warnings.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      0 - disabled</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      1 - enabled</span><br>LogRemoteCommands=0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#### Passive checks related  以下为被动模式相关配置</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: Server允许哪些主机获取本机的监控数据，多个IP用逗号隔开，需要注意即使采用主动模式也要在这里配置允许其访问本机</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      List of comma delimited IP addresses, optionally <span class="hljs-keyword">in</span> CIDR notation, or DNS names of Zabbix servers and Zabbix proxies.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Incoming connections will be accepted only from the hosts listed here.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      If IPv6 support is enabled <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-string">&#x27;::127.0.0.1&#x27;</span>, <span class="hljs-string">&#x27;::ffff:127.0.0.1&#x27;</span> are treated equally</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      and <span class="hljs-string">&#x27;::/0&#x27;</span> will allow any IPv4 or IPv6 address.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      <span class="hljs-string">&#x27;0.0.0.0/0&#x27;</span> can be used to allow any IPv4 address.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Mandatory: <span class="hljs-built_in">yes</span>, <span class="hljs-keyword">if</span> StartAgents is not explicitly <span class="hljs-built_in">set</span> to 0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default:</span><br>Server=<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: StartAgents处理被动模式请求的zabbix_agentd进程实例数量</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Number of pre-forked instances of zabbix_agentd that process passive checks.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      If <span class="hljs-built_in">set</span> to 0, disables passive checks and the agent will not listen on any TCP port.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Mandatory: no</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-100</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default:</span><br>StartAgents=3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#### Active checks related  以下为主动模式相关配置</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: ServerActive填写要接收数据的zabbix server地址，也可以是zabbix proxy地址</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Zabbix server/proxy address to get active checks from.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Server/proxy address is IP address or DNS name and optional port separated by colon.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Multiple Zabbix servers and Zabbix proxies can be specified, separated by comma.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      More than one Zabbix proxy should not be specified from each Zabbix server.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      If Zabbix proxy is specified <span class="hljs-keyword">then</span> Zabbix server <span class="hljs-keyword">for</span> that proxy should not be specified.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Multiple comma-delimited addresses can be provided to use several independent Zabbix servers <span class="hljs-keyword">in</span> parallel. Spaces are allowed.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      If port is not specified, default port is used.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      IPv6 addresses must be enclosed <span class="hljs-keyword">in</span> square brackets <span class="hljs-keyword">if</span> port <span class="hljs-keyword">for</span> that host is specified.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      If port is not specified, square brackets <span class="hljs-keyword">for</span> IPv6 addresses are optional.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      If this parameter is not specified, active checks are disabled.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Example: ServerActive=127.0.0.1:20051,zabbix.example.com,[::1]:30051,::1,[12fc::1]</span><br>ServerActive=<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: Hostname必须唯一且与管理界面中的主机名一致</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Unique, <span class="hljs-keyword">case</span> sensitive hostname.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Required <span class="hljs-keyword">for</span> active checks and must match hostname as configured on the server.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Value is acquired from HostnameItem <span class="hljs-keyword">if</span> undefined.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Mandatory: no</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default:</span><br>Hostname=<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: HostnameItem不推荐使用，有可能产生主机名与配置不一致问题</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Item used <span class="hljs-keyword">for</span> generating Hostname <span class="hljs-keyword">if</span> it is undefined. Ignored <span class="hljs-keyword">if</span> Hostname is defined.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Does not support UserParameters or aliases.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">HostnameItem=system.hostname</span><br><br></code></pre></td></tr></table></figure><h1 id="zabbix-proxy-配置"><a href="#zabbix-proxy-配置" class="headerlink" title="zabbix proxy 配置"></a>zabbix proxy 配置</h1><p>​&#x2F;etc&#x2F;zabbix&#x2F;zabbix_proxy.conf</p><p>​与上述配置中相同作用的参数省略</p><p>​proxy也需要配置数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: ProxyMode</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Proxy operating mode.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      0 - proxy <span class="hljs-keyword">in</span> the active mode</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      1 - proxy <span class="hljs-keyword">in</span> the passive mode</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Mandatory: no</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default:</span><br>ProxyMode=0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: Server主动模式为获取监控项与配置的server地址，被动模式为允许访问本机的地址</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      If ProxyMode is <span class="hljs-built_in">set</span> to active mode:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">              IP address or DNS name of Zabbix server to get configuration data from and send data to.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      If ProxyMode is <span class="hljs-built_in">set</span> to passive mode:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">              List of comma delimited IP addresses, optionally <span class="hljs-keyword">in</span> CIDR notation, or DNS names of Zabbix server.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">              Incoming connections will be accepted only from the addresses listed here.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">              If IPv6 support is enabled <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-string">&#x27;::127.0.0.1&#x27;</span>, <span class="hljs-string">&#x27;::ffff:127.0.0.1&#x27;</span> are treated equally</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">              and <span class="hljs-string">&#x27;::/0&#x27;</span> will allow any IPv4 or IPv6 address.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">              <span class="hljs-string">&#x27;0.0.0.0/0&#x27;</span> can be used to allow any IPv4 address.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">              Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com</span><br>Server=<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: Hostname必须与管理界面中的主机名一致，否则无法获取监控数据</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Unique, <span class="hljs-keyword">case</span> sensitive Proxy name. Make sure the Proxy name is known to the server!</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Value is acquired from HostnameItem <span class="hljs-keyword">if</span> undefined.</span><br>Hostname=proxy-active<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">######## PROXY SPECIFIC PARAMETERS #############以下为proxy专有参数</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: ProxyLocalBuffer保留已上传数据多少小时</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Proxy will keep data locally <span class="hljs-keyword">for</span> N hours, even <span class="hljs-keyword">if</span> the data have already been synced with the server.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      This parameter may be used <span class="hljs-keyword">if</span> <span class="hljs-built_in">local</span> data will be used by third party applications.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-720</span><br>ProxyLocalBuffer=0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: ProxyOfflineBuffer保存没有上传数据多少小时</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Proxy will keep data <span class="hljs-keyword">for</span> N hours <span class="hljs-keyword">in</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">if</span> no connectivity with Zabbix Server.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Older data will be lost.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-720</span><br>ProxyOfflineBuffer=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: HeartbeatFrequencyproxy可用性心跳检测频率，如果是被动代理此参数将被忽略</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Frequency of heartbeat messages <span class="hljs-keyword">in</span> seconds.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Used <span class="hljs-keyword">for</span> monitoring availability of Proxy on server side.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      0 - heartbeat messages disabled.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      For a proxy <span class="hljs-keyword">in</span> the passive mode this parameter will be ignored.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 0-3600</span><br>HeartbeatFrequency=60<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: ConfigFrequencyproxy获取配置的频率</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      How often proxy retrieves configuration data from Zabbix Server <span class="hljs-keyword">in</span> seconds.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      For a proxy <span class="hljs-keyword">in</span> the passive mode this parameter will be ignored.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-3600*24*7</span><br>ConfigFrequency=10<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Option: DataSenderFrequency监控数据发送频率</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      Proxy will send collected data to the Server every N seconds.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      For a proxy <span class="hljs-keyword">in</span> the passive mode this parameter will be ignored.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Range: 1-3600</span><br>DataSenderFrequency=30<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ADVANCED PARAMETERS参考server中的配置，以下不再赘述</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zabbix部署</title>
    <link href="/2022/08/30/Zabbix%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/08/30/Zabbix%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>​主要概括了Zabbix 的server、agent、proxy部署和使用配置。</p><span id="more"></span><p>​Zabbix部署过程可简要概括为以下步骤：</p><ol><li>从zabbix官网下载二进制包或源码包（server、agent、proxy、java Gateway）</li><li>为zabbix创建数据库和账号并授权</li><li>修改zabbix配置使其能使用数据库</li><li>修改web服务的php配置</li><li>在浏览器中访问http:&#x2F;&#x2F;主机地址&#x2F;zabbix  或者  http:&#x2F;&#x2F;主机地址 进行初始化安装</li><li>在监控主机上安装zabbix  agent</li><li>在web管理界面添加agent主机</li><li>部署proxy</li><li>根据proxy模式修改agent配置</li><li>web界面添加代理（hostname需要与配置中一致），为agent选择代理</li></ol><h1 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h1><p>​主要参考：zabbix官方使用手册</p><p>​<a href="https://www.zabbix.com/documentation/6.0/zh">https://www.zabbix.com/documentation/6.0/zh</a></p><p>​软件包下载：Zabbix官网产品下载页面</p><p>​<a href="https://www.zabbix.com/cn/download">https://www.zabbix.com/cn/download</a></p><p>​server、agent、proxy、java Gateway选择版本至少大版本需一致，否则由于协议版本不一致影响互相通信。</p><p>以下部署示例虚拟机：</p><p>​zabbix server  10.0.0.83</p><p>​zabbix agent  10.0.0.84</p><p>​zabbix proxy  10.0.0.85</p><p>​mysql  10.0.0.87</p><h1 id="Zabbix-server二进制包安装"><a href="#Zabbix-server二进制包安装" class="headerlink" title="Zabbix server二进制包安装"></a>Zabbix server二进制包安装</h1><p>​选择版本如下</p><p><img src="image-20220830144136453.png" alt="image-20220830144136453"></p><h3 id="按照官网指示安装如下"><a href="#按照官网指示安装如下" class="headerlink" title="按照官网指示安装如下"></a>按照官网指示安装如下</h3><p>​略作修改，步骤与官网一致</p><p><strong>a. 安装zabbix仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">rpm -Uvh https://repo.zabbix.com/zabbix/6.0/rhel/8/x86_64/zabbix-release-6.02.el8.noarch.rpm<br></code></pre></td></tr></table></figure><h5 id="b-安装Zabbix-server，Web前端，agent"><a href="#b-安装Zabbix-server，Web前端，agent" class="headerlink" title="b. 安装Zabbix server，Web前端，agent"></a>b. 安装Zabbix server，Web前端，agent</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf install zabbix-server-mysql zabbix-web-mysql zabbix-nginx-conf zabbix-sql-scripts zabbix-selinux-policy zabbix-agent<br></code></pre></td></tr></table></figure><h5 id="c-创建初始数据库"><a href="#c-创建初始数据库" class="headerlink" title="c. 创建初始数据库"></a>c. 创建初始数据库</h5><p>在数据库主机上运行以下代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -uroot <br>mysql&gt; create database zabbix_server character set utf8 collate utf8_bin;<br>mysql&gt; create user zabbix@&#x27;10.0.0.%&#x27; identified by &#x27;123456&#x27;;<br>mysql&gt; grant all privileges on zabbix_server.* to zabbix@&#x27;10.0.0.%&#x27;;<br></code></pre></td></tr></table></figure><p>导入初始架构和数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">zcat /usr/share/doc/zabbix-sql-scripts/mysql/server.sql.gz | mysql -uzabbix -p123456 -h10.0.0.87 zabbix_server<br><span class="hljs-meta prompt_">#</span><span class="language-bash">数据库主机上可看到zabbix_server库中新建了大量表</span><br></code></pre></td></tr></table></figure><h5 id="d-为Zabbix-server配置数据库"><a href="#d-为Zabbix-server配置数据库" class="headerlink" title="d. 为Zabbix server配置数据库"></a>d. 为Zabbix server配置数据库</h5><p>编辑配置文件 &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">以下为修改过的行</span><br>DBHost=10.0.0.87<br>DBName=zabbix_server<br>DBUser=zabbix<br>DBPassword=123456<br></code></pre></td></tr></table></figure><h5 id="e-为Zabbix前端配置PHP"><a href="#e-为Zabbix前端配置PHP" class="headerlink" title="e. 为Zabbix前端配置PHP"></a>e. 为Zabbix前端配置PHP</h5><p>编辑配置文件 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;zabbix.conf 取消注释并设定 ‘listen’ 和 ‘server_name’ </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> <span class="hljs-number">10.0.0.83</span>;<br></code></pre></td></tr></table></figure><h5 id="f-启动Zabbix-server和agent进程"><a href="#f-启动Zabbix-server和agent进程" class="headerlink" title="f. 启动Zabbix server和agent进程"></a>f. 启动Zabbix server和agent进程</h5><p>启动Zabbix server和agent进程，并为它们设置开机自启：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">restart</span> zabbix-<span class="hljs-keyword">server</span> zabbix-agent nginx php-fpm<br>systemctl <span class="hljs-keyword">enable</span> zabbix-<span class="hljs-keyword">server</span> zabbix-agent nginx php-fpm<br></code></pre></td></tr></table></figure><p><img src="image-20220830154020540.png" alt="image-20220830154020540"></p><p><img src="image-20220830154109116.png" alt="image-20220830154109116"></p><p><img src="image-20220830154322977.png" alt="image-20220830154322977"></p><p><img src="image-20220830154452699.png" alt="image-20220830154452699"></p><p><img src="image-20220830154521141.png" alt="image-20220830154521141"></p><p><img src="image-20220830154617416.png" alt="image-20220830154617416"></p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>​源码包<a href="https://www.zabbix.com/cn/download_sources#60LTS">https://www.zabbix.com/cn/download_sources#60LTS</a></p><p>​编译安装指南<a href="https://www.zabbix.com/documentation/6.0/zh/manual/installation/install">https://www.zabbix.com/documentation/6.0/zh/manual/installation/install</a></p><p>​完成安装后，其他配置与上面一致。</p><h1 id="Zabbix-agent（监控节点）"><a href="#Zabbix-agent（监控节点）" class="headerlink" title="Zabbix agent（监控节点）"></a>Zabbix agent（监控节点）</h1><p>​选择版本及参考安装步骤<a href="https://www.zabbix.com/cn/download?zabbix=6.0&amp;os_distribution=centos&amp;os_version=8&amp;components=agent&amp;db=&amp;ws=">https://www.zabbix.com/cn/download?zabbix=6.0&amp;os_distribution=centos&amp;os_version=8&amp;components=agent&amp;db=&amp;ws=</a></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>​安装软件仓库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rpm -Uvh https:<span class="hljs-regexp">//</span>repo.zabbix.com<span class="hljs-regexp">/zabbix/</span><span class="hljs-number">6.0</span><span class="hljs-regexp">/rhel/</span><span class="hljs-number">8</span><span class="hljs-regexp">/x86_64/</span>zabbix-release-<span class="hljs-number">6.0</span>-<span class="hljs-number">2</span>.el8.noarch.rpm<br></code></pre></td></tr></table></figure><p>​安装agent</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">dnf <span class="hljs-keyword">install</span> zabbix-agent<br></code></pre></td></tr></table></figure><p>​启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl restart zabbix-agent</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> zabbix-agent</span><br></code></pre></td></tr></table></figure><p>查看进程</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@agent ~]<span class="hljs-comment">#ps -ef | grep zabbix</span><br>zabbix     <span class="hljs-number"> 2428 </span>     <span class="hljs-number"> 1 </span><span class="hljs-number"> 0 </span>16:13 ?        00:00:00 /usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf<br>zabbix     <span class="hljs-number"> 2429 </span>  <span class="hljs-number"> 2428 </span><span class="hljs-number"> 0 </span>16:13 ?        00:00:00 /usr/sbin/zabbix_agentd: collector [idle<span class="hljs-number"> 1 </span>sec]<br>zabbix     <span class="hljs-number"> 2430 </span>  <span class="hljs-number"> 2428 </span><span class="hljs-number"> 0 </span>16:13 ?        00:00:00 /usr/sbin/zabbix_agentd: listener <span class="hljs-comment">#1 [waiting for connection]</span><br>zabbix     <span class="hljs-number"> 2431 </span>  <span class="hljs-number"> 2428 </span><span class="hljs-number"> 0 </span>16:13 ?        00:00:00 /usr/sbin/zabbix_agentd: listener <span class="hljs-comment">#2 [waiting for connection]</span><br>zabbix     <span class="hljs-number"> 2432 </span>  <span class="hljs-number"> 2428 </span><span class="hljs-number"> 0 </span>16:13 ?        00:00:00 /usr/sbin/zabbix_agentd: listener <span class="hljs-comment">#3 [waiting for connection]</span><br>zabbix     <span class="hljs-number"> 2433 </span>  <span class="hljs-number"> 2428 </span><span class="hljs-number"> 0 </span>16:13 ?        00:00:00 /usr/sbin/zabbix_agentd: active checks <span class="hljs-comment">#1 [idle 1 sec]</span><br>root       <span class="hljs-number"> 2437 </span>  <span class="hljs-number"> 1743 </span><span class="hljs-number"> 0 </span>16:14 pts/2    00:00:00 grep --color=auto zabbix<br></code></pre></td></tr></table></figure><h3 id="添加该主机"><a href="#添加该主机" class="headerlink" title="添加该主机"></a>添加该主机</h3><p><img src="image-20220830162452865.png" alt="image-20220830162452865"></p><h1 id="zabbix-proxy"><a href="#zabbix-proxy" class="headerlink" title="zabbix  proxy"></a>zabbix  proxy</h1><p>​依然可参考官网指南进行安装，仅作少量修改</p><h5 id="安装软件仓库并安装"><a href="#安装软件仓库并安装" class="headerlink" title="安装软件仓库并安装"></a>安装软件仓库并安装</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">rpm -Uvh https:<span class="hljs-regexp">//</span>repo.zabbix.com<span class="hljs-regexp">/zabbix/</span><span class="hljs-number">6.0</span><span class="hljs-regexp">/rhel/</span><span class="hljs-number">8</span><span class="hljs-regexp">/x86_64/</span>zabbix-release-<span class="hljs-number">6.0</span>-<span class="hljs-number">1</span>.el8.noarch.rpm<br>dnf install zabbix-proxy-mysql<br></code></pre></td></tr></table></figure><p>数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> zabbix_proxy <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 <span class="hljs-keyword">collate</span> utf8_bin;<br>mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;proxy&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt; <span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> zabbix_proxy.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;proxy&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>编辑配置文件 &#x2F;etc&#x2F;zabbix&#x2F;zabbix_proxy.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ProxyMode=0#0是主动模式 1是被动模式，会导致其他配置不同<br>DBHost=10.0.0.87<br>DBName=zabbix_proxy<br>DBUser=proxy<br>DBPassword=123456<br></code></pre></td></tr></table></figure><p>导入初始架构和数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">zcat <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>zabbix-proxy-mysql*/schema.sql.gz | mysql -uproxy -p123456 -h10.<span class="hljs-number">0.0</span>.<span class="hljs-number">87</span> zabbix_proxy<br></code></pre></td></tr></table></figure><p>agent编辑配置文件 &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/zabbix/zabbix_agentd.conf<br>Server=10.0.0.83,10.0.0.85  #运行proxy获取数据<br>ServerActive=10.0.0.85#主动发送健康数据给proxy<br></code></pre></td></tr></table></figure><p><img src="image-20220830234132144.png" alt="image-20220830234132144"></p>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建web架构</title>
    <link href="/2022/08/25/%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%95%B4web%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/08/25/%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%95%B4web%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>​本文主要描述了搭建一个web架构的主要过程，含有包括提供静态资源的nginx服务器、处理php应用的php-fpm服务器、处理Java应用程序的Tomcat服务器、haproxy和nginx负载均衡与代理等详细配置。、</p><span id="more"></span><p>​该架构目标是上线3个网站，<a href="http://www.9527.com、jsp.9527.com和blog.9527.com.www.9527.com具有html、js、图片等静态资源;jsp.9527.com网站提供jsp文件动态资源;blog.9527.com是基于wordpress的博客网站,需要php服务器,php服务器同时还处理www.9527.com的php请求./">www.9527.com、jsp.9527.com和blog.9527.com。www.9527.com具有html、js、图片等静态资源；jsp.9527.com网站提供jsp文件动态资源；blog.9527.com是基于WordPress的博客网站，需要php服务器，php服务器同时还处理www.9527.com的php请求。</a></p><p>​为承担较高的并发访问和方便后续扩容，架构设计先由haproxy四层负载均衡调度到两台nginx代理服务器；nginx监听8080端口对tomcat作负载均衡，监听80端口对后端nginx服务器和php服务器作七层代理；数据库采用PXC集群并为nginx和php服务器创建账号并授权；tomcat使用msm管理memcache实现session共享；nginx和php服务器上的文件可设计为分布式存放（需要代理对用户请求uri作哈希），也可使用nfs共享文件；使用Keepalived实现haproxy高可用。</p><p>​使用主机为一物理机上的13台虚拟机，受限于单机性能主机数量较少，每个集群精简至2台主机。</p><p>​架构拓扑图如下</p><p><img src="image-20220826194017276.png" alt="image-20220826194017276"></p><h1 id="主机规划"><a href="#主机规划" class="headerlink" title="主机规划"></a>主机规划</h1><p>以下采用CentOS8系统</p><p>​<strong>haproxy主机两台：</strong></p><p>​10.0.0.87  主机名haproxy1Keepalived节点1优先级100多播地址224.0.100.100</p><p>​10.0.0.88  主机名haproxy2Keepalived节点2优先级80多播地址224.0.100.100</p><p>​<strong>nginx（代理）主机两台：</strong></p><p>​10.0.0.157 主机名nginxproxy1</p><p>​10.0.0.150 主机名nginxproxy2</p><p>​<strong>nginx（静态资源）主机两台：</strong></p><p>​10.0.0.83 主机名nginx-server1</p><p>​10.0.0.84 主机名nginx-server2</p><p>​<strong>php+nginx主机两台：</strong></p><p>​10.0.0.85 主机名php-server1</p><p>​10.0.0.86 主机名php-server2</p><p>​<strong>tomcat主机两台：</strong></p><p>​10.0.0.108 主机名tomcat1</p><p>​10.0.0.118 主机名tomcat2</p><p>​<strong>nfs主机1台：</strong></p><p>​10.0.0.89 主机名nfs-server</p><p>以下采用CentOS7系统</p><p>​<strong>PXC集群数据库主机两台：</strong></p><p>​10.0.0.154 主机名mysql1</p><p>​10.0.0.155 主机名mysql2</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h3 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h3><p>​nginx代理和后端所用版本相同。未来若后端需要额外模块可编译安装再平滑升级。</p><p>​配置nginx官方yum源，配置后默认安装最新稳定版1.22。本次选择版本为nginx-1.18.0</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">[nginx-stable]<br>name=nginx stable repo<br>baseurl=http://nginx.org/packages/centos/$releasever/$basearch/<br>gpgcheck=1<br>enabled=1<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=true<br><br>[nginx-mainline]<br>name=nginx mainline repo<br>baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/<br>gpgcheck=1<br>enabled=0<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=true<br><br>[root@nginx-server1 ~]# yum info nginx-1.18.0<br>Last metadata expiration check: 1:13:17 ago on Thu 25 Aug 2022 03:59:18 PM CST.<br>Installed Packages<br>Name         : nginx<br>Epoch        : 1<br>Version      : 1.18.0<br></code></pre></td></tr></table></figure><h3 id="php安装"><a href="#php安装" class="headerlink" title="php安装"></a>php安装</h3><p>​架构中nginx异构代理，使用fastcgi协议。</p><p>​使用阿里云appstream源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">直接使用yum安装php-fpm及相关包</span><br>yum -y install php-fpm php-mysqlnd php-json<br>[root@php-server1 ~]#yum info php-fpm<br>Last metadata expiration check: 2:09:02 ago on Thu 25 Aug 2022 03:48:17 PM CST.<br>Installed Packages<br>Name         : php-fpm<br>Version      : 7.2.24<br>Release      : 1.module_el8.2.0+313+b04d0a66<br></code></pre></td></tr></table></figure><h3 id="haproxy安装"><a href="#haproxy安装" class="headerlink" title="haproxy安装"></a>haproxy安装</h3><p>​使用阿里云appstream源中的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@haproxy1 ~]#yum info haproxy<br>Last metadata expiration check: 1:56:55 ago on Thu 25 Aug 2022 03:58:38 PM CST.<br>Installed Packages<br>Name         : haproxy<br>Version      : 1.8.23<br></code></pre></td></tr></table></figure><h3 id="Keepalived安装"><a href="#Keepalived安装" class="headerlink" title="Keepalived安装"></a>Keepalived安装</h3><p>​使用阿里云appstream源安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@haproxy2 ~]#yum info keepalived<br>Last metadata expiration check: 2:25:31 ago on Thu 25 Aug 2022 03:58:55 PM CST.<br>Installed Packages<br>Name         : keepalived<br>Version      : 2.0.10<br>Release      : 11.el8_3.1<br></code></pre></td></tr></table></figure><h3 id="tomcat安装"><a href="#tomcat安装" class="headerlink" title="tomcat安装"></a>tomcat安装</h3><p>​注意tomcat需要java环境，采用openjdk1.8</p><p>​选择tomcat版本为tomcat-8&#x2F;v8.5.82。从清华tomcat镜像站点下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装java环境相关包</span><br>yum -y install java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel<br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载tomcat</span><br>[root@tomcat1 /usr/local]#wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.82/bin/apache-tomcat-8.5.82.tar.gz<br>[root@tomcat1 /usr/local]#tar xf apache-tomcat-8.5.82.tar.gz<br>[root@tomcat1 /usr/local]#ln -s apache-tomcat-8.5.82 tomcat<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指明java路径（新建tomcat.conf文件）</span><br>[root@tomcat1 /usr/local]#cat /usr/local/tomcat/conf/tomcat.conf <br>JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-0.el8_3.x86_64/jre<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加PATH变量</span><br>[root@tomcat1 /usr/local]#echo &#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27; &gt; /etc/profile.d/tomcat.sh<br>[root@tomcat1 /usr/local]#. /etc/profile.d/tomcat.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加service文件</span><br>[root@tomcat1 /usr/local]#cat /usr/lib/systemd/system/tomcat.service <br>[Unit]<br>Description=Tomcat<br>After=syslog.target network.target <br>[Service]<br>Type=forking<br>EnvironmentFile=/usr/local/tomcat/conf/tomcat.conf<br>ExecStart=/usr/local/tomcat/bin/startup.sh<br>ExecStop=/usr/local/tomcat/bin/shutdown.sh<br>PrivateTmp=true<br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">加载后可通过systemd管理tomcat</span><br>[root@tomcat1 /usr/local]#systemctl daemon-reload<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">tomcat进程将以root身份运行，未来考虑安全因素可专门为tomcat进程创建专属账号，修改service文件和tomcat相关文件所属者即可。</span><br></code></pre></td></tr></table></figure><h3 id="Percona-XtraDB-Cluster安装"><a href="#Percona-XtraDB-Cluster安装" class="headerlink" title="Percona XtraDB Cluster安装"></a><strong>Percona XtraDB Cluster</strong>安装</h3><p>​需要先配置yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[percona]<br>name=percona_repo<br>baseurl =<br>https://mirrors.tuna.tsinghua.edu.cn/percona/release/$releasever/RPMS/$basearch<br>enabled = 1<br>gpgcheck = 0<br></code></pre></td></tr></table></figure><p>​然后直接安装即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> -y install Percona-XtraDB-Cluster-<span class="hljs-number">57</span> <br></code></pre></td></tr></table></figure><h3 id="nfs服务器安装"><a href="#nfs服务器安装" class="headerlink" title="nfs服务器安装"></a>nfs服务器安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">使用yum安装，版本如下</span><br>[root@nfs-server ~]#yum info nfs-utils<br>Last metadata expiration check: 3:01:53 ago on Thu 25 Aug 2022 06:32:54 PM CST.<br>Installed Packages<br>Name         : nfs-utils<br>Epoch        : 1<br>Version      : 2.3.3<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进程名为nfs-server.service</span><br></code></pre></td></tr></table></figure><h3 id="memcache及msm（memcached-session-manager）安装"><a href="#memcache及msm（memcached-session-manager）安装" class="headerlink" title="memcache及msm（memcached session manager）安装"></a>memcache及msm（memcached session manager）安装</h3><p>​参考github上的指引下载msm所需jar包，网址如下</p><p><a href="https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration">https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">memcached直接安装阿里云appstream源中版本</span><br>[root@tomcat1 /usr/local]#yum info memcached<br>Last metadata expiration check: 2:47:05 ago on Thu 25 Aug 2022 03:48:48 PM CST.<br>Installed Packages<br>Name         : memcached<br>Version      : 1.5.22<br>Release      : 2.el8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">msm网页中提及所需jar包如下，下载后放入 /安装目录/tomcat/lib/下即可</span><br>kryo-3.0.3.jar<br>asm-5.2.jar<br>objenesis-2.6.jar<br>reflectasm-1.11.9.jar<br>minlog-1.3.1.jar<br>kryo-serializers-0.45.jar<br>msm-kryo-serializer-2.3.2.jar<br>memcached-session-manager-tc8-2.3.2.jar<br>spymemcached-2.12.3.jar<br>memcached-session-manager-2.3.2.jar<br></code></pre></td></tr></table></figure><h1 id="nginx静态资源服务器配置"><a href="#nginx静态资源服务器配置" class="headerlink" title="nginx静态资源服务器配置"></a>nginx静态资源服务器配置</h1><p>​涉及主机：代理10.0.0.150和10.0.0.157、后端10.0.0.83和10.0.0.84</p><h3 id="nginx后端配置"><a href="#nginx后端配置" class="headerlink" title="nginx后端配置"></a>nginx后端配置</h3><p>​nginx性能优化相关配置省略，未改动配置省略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">两主机以下配置相同</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">主配置文件</span><br>http &#123;<br>....<br>include /etc/nginx/conf.d/*.conf;#只配置文件放在最后，保证前面的配置生效<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#子配置文件</span></span><br>[root@nginx-server1 ~]# cat /etc/nginx/conf.d/9527.conf <br>server &#123;<br>listen 80;<br>server_namewww.9527.com;<br>root /usr/share/nginx/html/;<br>location = / &#123;<br>root /usr/share/nginx/html/;<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">图片和网页源码存放在不同目录</span><br>location ~ \.(jpe?g|png|gif)$ &#123;<br>root /data/images/;<br>&#125;<br>location ~ \.(html|js)$ &#123;<br>root /usr/share/nginx/html/static/;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="nginx代理配置"><a href="#nginx代理配置" class="headerlink" title="nginx代理配置"></a>nginx代理配置</h3><p>​两主机配置相同，为测试方便，调度使用默认的轮询算法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">主配置文件</span><br>[root@nginxproxy2 ~]$cat /etc/nginx/nginx.conf<br>http &#123;<br>...<br>include /etc/nginx/conf.d/*.conf;<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">子配置文件</span><br>[root@nginxproxy2 ~]$cat /etc/nginx/conf.d/static.conf <br>upstream static &#123;<br> server 10.0.0.83:80 weight=1 fail_timeout=5s max_fails=3; <br> server 10.0.0.84:80 weight=1 fail_timeout=5s max_fails=3;<br> &#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">定义虚拟主机，将静态资源请求调度到后端nginx集群</span><br>server&#123;<br>listen 80;<br> server_name www.9527.com;<br>location ~ \.(jpe?g|png|bmp|gif|html|js)$  &#123;<br>root /usr/share/nginx/html;<br>proxy_pass http://static;<br>proxy_next_upstream error;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="准备测试文件"><a href="#准备测试文件" class="headerlink" title="准备测试文件"></a>准备测试文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">两台主机在相同文件夹下准备文件名相同内容不同的文件</span><br>[root@nginx-server2 ~]#ls /data/images/<br>1.jpg<br>[root@nginx-server2 ~]#ls /usr/share/nginx/html/static/<br>1.html  2.html  index.html<br>[root@nginx-server2 ~]#cat /usr/share/nginx/html/static/1.html <br>nginx server2 on 10.0.0.84<br>[root@nginx-server2 ~]#cat /usr/share/nginx/html/static/index.html <br>index page on 10.0.0.84<br>nginx server2<br>[root@nginx-server1 ~]# cat /usr/share/nginx/html/static/index.html<br>index page on 10.0.0.83<br>nginx server1<br>[root@nginx-server1 ~]# cat /usr/share/nginx/html/static/1.html <br>nginx server1 on 10.0.0.83<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>​Linux或windows上作测试均可，均可修改域名解析文件通过域名访问，以下为示例。</p><p>​测试10.0.0.157无误后改为10.0.0.150测试另一代理是否配置正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">linux</span> <br>[root@8 ~]$cat /etc/hosts<br>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<br>10.0.0.157 www.9527.com blog.9527.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">windows修改C:\Windows\System32\drivers\etc\hosts,添加一行</span><br>10.0.0.157 www.9527.com blog.9527.com<br></code></pre></td></tr></table></figure><p><strong>linux</strong></p><p><img src="image-20220825193722734.png" alt="image-20220825193722734"></p><p><img src="image-20220825193742494.png" alt="image-20220825193742494"></p><p><strong>Windows</strong></p><p><img src="image-20220825193958604.png" alt="image-20220825193958604"></p><p><img src="image-20220825194009942.png" alt="image-20220825194009942"></p><h1 id="PHP服务器配置"><a href="#PHP服务器配置" class="headerlink" title="PHP服务器配置"></a>PHP服务器配置</h1><p>​涉及主机：代理10.0.0.150和10.0.0.157、后端10.0.0.85和10.0.0.86</p><p>​后端两主机安装nginx、php负责blog.9527.com的访问，nginx接收http请求转发到本机的php来处理。同时，还处理<a href="http://www.9527.com的php请求,由nginx代理直接代理到9000端口,不经过本机nginx代理./">www.9527.com的php请求，由nginx代理直接代理到9000端口，不经过本机nginx代理。</a></p><h3 id="php配置"><a href="#php配置" class="headerlink" title="php配置"></a>php配置</h3><p>​修改监听配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">仅修改以下行</span><br>;listen = /run/php-fpm/www.sock#注释该行，该行在php与fastcgi请求端在同一主机上时使用，某应用与php通过socket文件方式通讯<br>listen 9000#添加该行<br>;listen.allowed_clients = 127.0.0.1  #注释此行，允许所有IP访问<br></code></pre></td></tr></table></figure><h3 id="本机nginx配置"><a href="#本机nginx配置" class="headerlink" title="本机nginx配置"></a>本机nginx配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">http<br>server &#123;<br>        listen       80;<br>        server_name  blog.9527.com;<br>        location ~ \.html$ &#123;<br>root /data/php/wordpress;#测试时可用其他文件夹，安装好wordpress后可以用该文件夹<br>index index.html;<br>        &#125;<br>location ~ \.php$ &#123;<br>root /data/php/wordpress;<br>fastcgi_pass127.0.0.1:9000;<br>fastcgi_indexindex.php;<br>fastcgi_param SCRIPT_FILENAME$document_root$fastcgi_script_name;<br>includefastcgi_params;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="nginx代理配置-1"><a href="#nginx代理配置-1" class="headerlink" title="nginx代理配置"></a>nginx代理配置</h3><p>​Nginx基于模块ngx_http_fastcgi_module实现fastcgi协议转发，yum安装已有。</p><p>​测试时发现有时一些php网页依然会按照上文static.conf中规则调度，为了解决该问题，主配置文件中添加以下配置。两主机配置相同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">主配置文件/etc/nginx/nginx.conf</span><br>http&#123;<br>...<br>...<br>server &#123;#将访问php网页的请求转到本机81端口<br>listen 80;<br>server_name blog.9527.com;<br>location / &#123;<br>proxy_pass http://localhost:81;<br>&#125;<br>&#125;<br>    include /etc/nginx/conf.d/*.conf; <br></code></pre></td></tr></table></figure><p>​之前的static.conf也要配置fastcgi转发，博客网站的php请求转发在本机上已配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">子配置文件/etc/nginx/conf.d/php.conf</span><br>upstream blog &#123;<br>server 10.0.0.85:80 max_fails=3 fail_timeout=10s;<br>server 10.0.0.86:80 max_fails=3 fail_timeout=10s; <br>&#125;<br>server &#123;<br>listen 81;<br>server_name blog.9527.com;<br>location / &#123;<br>root /data/php/wordpress;#测试时可用其他文件夹，安装好wordpress后可以用该文件夹<br>proxy_pass http://blog;<br>proxy_next_upstream error;<br>&#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">子配置文件/etc/nginx/conf.d/static.conf</span> <br>upstream static &#123;<br> server 10.0.0.83:80 weight=1 fail_timeout=5s max_fails=3; <br> server 10.0.0.84:80 weight=1 fail_timeout=5s max_fails=3;<br> &#125;<br>upstream phpservers &#123;<br>server 10.0.0.85:9000 max_fails=3 fail_timeout=10s;<br>server 10.0.0.86:9000 max_fails=3 fail_timeout=10s; <br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">定义虚拟主机，将静态资源请求调度到后端nginx集群</span><br>server&#123;<br>listen 80;<br> server_name www.9527.com;<br>location ~ \.(jpe?g|png|bmp|gif|html|js)$  &#123;<br>root /usr/share/nginx/html;<br>proxy_pass http://static;<br>proxy_next_upstream error;<br>&#125;<br>location ~ \.php$ &#123;<br>root /data/php/www;<br>fastcgi_pass phpservers;<br>fastcgi_index index.php;<br>fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;<br>include fastcgi_params;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="准备测试文件-1"><a href="#准备测试文件-1" class="headerlink" title="准备测试文件"></a>准备测试文件</h3><p>​注意路径需要与nginx配置中指定的路径一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@php-server2 ~]#cat /data/php/www/index.php <br>&lt;?php<br>echo (&quot;10.0.0.86&quot;);<br>phpinfo();<br>?&gt;<br>[root@php-server1 ~]#cat /data/php/www/index.php <br>&lt;?php<br>echo (&quot;10.0.0.85&quot;);<br>phpinfo();<br>?&gt;<br></code></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>​Linux或windows上作测试均可，均可修改域名解析文件通过域名访问。</p><p>​测试10.0.0.157无误后改为10.0.0.150测试另一代理是否配置正确。</p><p><strong>linux</strong></p><p><img src="image-20220825201333696.png" alt="image-20220825201333696"></p><p><img src="image-20220825201404161.png" alt="image-20220825201404161"></p><p>Windows</p><p><img src="image-20220825201507380.png" alt="image-20220825201507380"></p><p><img src="image-20220825201517182.png" alt="image-20220825201517182"></p><p>此时可在该文件夹下部署WordPress</p><h1 id="安装WordPress"><a href="#安装WordPress" class="headerlink" title="安装WordPress"></a>安装WordPress</h1><p>​可直接去wordpress官网下载，将wordpress包解压到php目录下。浏览器访问wordpress文件夹将开始初始化安装。<img src="image-20220826161020612.png" alt="image-20220826161020612"></p><p><img src="image-20220826174643234.png" alt="image-20220826174643234"></p><p>选择任意数据库，如果数据库做了负载均衡，可填写代理主机地址。</p><p><img src="image-20220826180411943.png" alt="image-20220826180411943"></p><p>出现该提示，到wordpress文件夹下创建配置文件即可，复制网页中的内容。</p><p><img src="image-20220826180645902.png" alt="image-20220826180645902"></p><p><img src="image-20220826181309647.png" alt="image-20220826181309647"></p><h1 id="Tomcat服务器配置"><a href="#Tomcat服务器配置" class="headerlink" title="Tomcat服务器配置"></a>Tomcat服务器配置</h1><p>​涉及主机：后端Tomcat10.0.0.108、10.0.0.118和代理nginx10.0.0.150和10.0.0.157</p><p>​后端Tomcat服务器监听8080端口，nginx代理将http请求转到本机8080端口再由tcp协议转发Tomcat处理。</p><h3 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h3><p>​主配置文件&#x2F;安装路径&#x2F;tomcat&#x2F;conf&#x2F;server.xml</p><p>​其中绝大多数采用默认配置，监听默认的8080端口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">在结尾hostq前添加两行<br>...<br> <span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Host</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jsp.9527.com&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;/data/webapps1&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span><br>...<br>修改默认虚拟主机<br><span class="hljs-tag">&lt;<span class="hljs-name">Engine</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Catalina&quot;</span> <span class="hljs-attr">defaultHost</span>=<span class="hljs-string">&quot;jsp.9527.com&quot;</span> <span class="hljs-attr">jvmRoute</span>=<span class="hljs-string">&quot;Tomcat1&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure><h3 id="msm配置（session共享）"><a href="#msm配置（session共享）" class="headerlink" title="msm配置（session共享）"></a>msm配置（session共享）</h3><p>​配置文件位置&#x2F;安装路径&#x2F;tomcat&#x2F;conf&#x2F;context.xml</p><p>​参考指引网页配置<a href="https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration#configure-memcached-session-manager-as--context-manager">https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration#configure-memcached-session-manager-as--context-manager</a></p><p><img src="image-20220825210513309.png" alt="image-20220825210513309"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">Tomcat1配置，添加以下行。session默认存在另一主机memcached上，损坏后才存在本机的memcached<br><br><span class="hljs-tag">&lt;<span class="hljs-name">Manager</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">memcachedNodes</span>=<span class="hljs-string">&quot;n1:10.0.0.108:11211,n2:10.0.0.118:11211&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">failoverNodes</span>=<span class="hljs-string">&quot;n1&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">requestUriIgnorePattern</span>=<span class="hljs-string">&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span>             <span class="hljs-attr">transcoderFactoryClass</span>=<span class="hljs-string">&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br><br>Tomcat2配置类似<br><span class="hljs-tag">&lt;<span class="hljs-name">Manager</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">memcachedNodes</span>=<span class="hljs-string">&quot;n1:10.0.0.108:11211,n2:10.0.0.118:11211&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">failoverNodes</span>=<span class="hljs-string">&quot;n2&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">requestUriIgnorePattern</span>=<span class="hljs-string">&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span>             <span class="hljs-attr">transcoderFactoryClass</span>=<span class="hljs-string">&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="memcached配置"><a href="#memcached配置" class="headerlink" title="memcached配置"></a>memcached配置</h3><p>​两主机相同修改&#x2F;etc&#x2F;sysconfig&#x2F;memcached</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">注释该行</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">OPTIONS=<span class="hljs-string">&quot;-l 127.0.0.1,::1&quot;</span></span><br></code></pre></td></tr></table></figure><h3 id="nginx代理配置-2"><a href="#nginx代理配置-2" class="headerlink" title="nginx代理配置"></a>nginx代理配置</h3><p>​主配置文件与php部分配置类似，添加端口转发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">/etc/nginx/nginx.conf</span><br>http &#123;<br>...<br>...<br>server &#123;<br>        listen 80;<br>        server_name jsp.9527.com;<br>        location / &#123;<br>                proxy_pass http://localhost:8080;<br>                &#125;<br>        &#125;<br>    include /etc/nginx/conf.d/*.conf;<br>&#125;<br></code></pre></td></tr></table></figure><p>​子配置文件如下，对Tomcat作四层负载均衡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">/etc/nginx/conf.d/tom1.conf</span>  <br>  upstream tomcat &#123;<br>     server 10.0.0.108:8080 max_fails=3 fail_timeout=30s;<br>     server 10.0.0.118:8080 max_fails=3 fail_timeout=30s;<br>   &#125;<br>   server &#123;<br>    listen 8080; #默认tcp<br> location ~* \.jsp$ &#123;<br>    proxy_pass tomcat;<br>  &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="准备测试文件-2"><a href="#准备测试文件-2" class="headerlink" title="准备测试文件"></a>准备测试文件</h3><p>​两主机文件一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@tomcat1 /usr/local]#cat tomcat/webapps/app1/2.jsp <br>&lt;%@ page import=&quot;java.util.*&quot; %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>   &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;tomcat test&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt; tomcat website &lt;/h1&gt;<br>&lt;div&gt;On &lt;%=request.getServerName() %&gt;&lt;/div&gt;<br>&lt;div&gt;&lt;%=request.getLocalAddr() + &quot;:&quot; + request.getLocalPort() %&gt;&lt;/div&gt;<br>&lt;div&gt;SessionID = &lt;span style=&quot;color:blue&quot;&gt;&lt;%=session.getId() %&gt;&lt;/span&gt;&lt;/div&gt;<br>&lt;%=new Date()%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>​Linux或windows上作测试均可，均可修改域名解析文件通过域名访问。</p><p>​测试10.0.0.157无误后改为10.0.0.150测试另一代理是否配置正确。</p><p>​<strong>linux</strong></p><p>​curl毕竟不是真正的浏览器，可以看到sessionid不一致，会话丢失</p><p><img src="image-20220825212732986.png" alt="image-20220825212732986"></p><p>​<strong>Windows</strong></p><p>​实现会话保持（sessionid一致）</p><p><img src="image-20220825213214972.png" alt="image-20220825213214972"></p><p><img src="image-20220825213225121.png" alt="image-20220825213225121"></p><h1 id="NFS配置"><a href="#NFS配置" class="headerlink" title="NFS配置"></a>NFS配置</h1><p>​nfs服务器为10.0.0.89，仅需设置共享目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">建立共享目录</span><br>[root@nfs-server ~]#mkdir -p /data/nginx/9527<br><span class="hljs-meta prompt_">#</span><span class="language-bash">写入配置文件，no_root_squash可以保证其他主机的root可以修改，可以指定网段或某IP</span><br>[root@nfs-server ~]#cat /etc/exports<br>/data/nginx/952710.0.0.0/24(rw,no_root_squash)<br></code></pre></td></tr></table></figure><p>​使用共享文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">挂载该文件夹即可，可以写入/etc/fstab持久自动挂载</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以该服务器为例,加上_netdev参数在开机后网络通畅后挂载</span><br>[root@nginx-server2 ~]#cat /etc/fstab<br>...<br>...<br>10.0.0.89:/data/nginx/9527/data/nginxnfsdefaults,_netdev00<br><span class="hljs-meta prompt_">#</span><span class="language-bash">可用mount -a立即生效</span><br></code></pre></td></tr></table></figure><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nfs-server ~]#touch /data/nginx/9527/9527<br>[root@nginx-server2 ~]#ls /data/nginx/<br>9527<br><br>[root@nginx-server2 ~]#touch /data/nginx/666<br>[root@nfs-server ~]#ls /data/nginx/9527/<br>666  9527<br></code></pre></td></tr></table></figure><h1 id="PXC集群"><a href="#PXC集群" class="headerlink" title="PXC集群"></a>PXC集群</h1><p>​涉及主机：数据库集群10.0.0.154、10.0.0.155。</p><p>​直接使用过去文章中搭建的PXC多主架构，该文章已详细展示配置过程，此处不再赘述。</p><p><a href="https://gituserusegit.github.io/2022/07/26/PXC%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">https://gituserusegit.github.io/2022/07/26/PXC%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</a></p><p>​完成PXC集群搭建后，为后端服务器创建数据库和账号，然后授权。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create user &#x27;nginxadm&#x27;@&#x27;10.0.0.%&#x27; identified by &#x27;123456&#x27;;<br>mysql&gt; create database nginxdb;<br>mysql&gt; grant all on nginxdb.* to nginxadm@&#x27;10.0.0.%&#x27;;<br>mysql&gt; create user &#x27;phpadm&#x27;@&#x27;10.0.0.%&#x27; identified by &#x27;666666&#x27;;<br>mysql&gt; create database wordpress;<br>mysql&gt; grant all on wordpress.* to phpadm@&#x27;10.0.0.%&#x27;;<br></code></pre></td></tr></table></figure><h1 id="haproxy配置"><a href="#haproxy配置" class="headerlink" title="haproxy配置"></a>haproxy配置</h1><p>​haproxy主机：10.0.0.87和10.0.0.88。Keepalived设置VIP为10.0.0.100&#x2F;24</p><p>​haproxy1：10.0.0.87工作   haproxy2：10.0.0.88备用</p><p>​两主机配置一致 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在最后添加以下几行</span><br>[root@haproxy1 ~]#cat /etc/haproxy/haproxy.cfg<br>...<br>...<br><span class="hljs-meta prompt_">#</span><span class="language-bash">考虑客户端访问网站采用http协议，监听80端口</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">nginx接收到的php请求会从80转到自己的81端口，从而使用php.conf子配置文件规则调度；jsp请求则从80转到自己的8080端口并使用tom1.conf子配置文件规则调度</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用static-rr是为了测试方便</span><br>listen nginxproxy<br>    bind 10.0.0.100:80<br>    mode tcp<br>    balance static-rr<br>    server nginx1 10.0.0.150:80<br>    server nginx2 10.0.0.157:80<br></code></pre></td></tr></table></figure><h3 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h3><p>​Linux或windows上作测试均可，均可修改域名解析文件通过域名访问。</p><p>​测试10.0.0.87无误后改为10.0.0.88测试另一代理是否配置正确。</p><p>​应实现<a href="http://www.9527.com/">www.9527.com</a>  blog.9527.com jsp.9527.com的资源均可访问，且正确的结果应该如上文的测试结果一致。</p><h1 id="Keepalived配置"><a href="#Keepalived配置" class="headerlink" title="Keepalived配置"></a>Keepalived配置</h1><p>​解决haproxy单点失败问题，10.0.0.87为主（优先级100）,10.0.0.88为从（优先级80）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">首先启用内核参数并立即生效</span><br>[root@haproxy1 ~]#cat /etc/sysctl.conf <br>net.ipv4.ip_nonlocal_bind = 1<br>[root@haproxy1 ~]#sysctl -p <br>[root@haproxy2 ~]#cat /etc/sysctl.conf <br>net.ipv4.ip_nonlocal_bind = 1<br>[root@haproxy2 ~]#sysctl -p<br><br>[root@haproxy1 ~]#cat /etc/keepalived/keepalived.conf<br> global_defs &#123;<br> notification_email &#123;<br> root@localhost<br> &#125;<br> notification_email_from kaadmin@localhost<br> smtp_server 127.0.0.1<br> smtp_connect_timeout 30<br> router_id ka1.9527.com #每个Keepalived主机唯一标识（其实重名也没影响）<br> vrrp_mcast_group4 224.0.100.100#多播地址，同一Keepalived集群中一致<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">以上为报警邮件的设置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">健康性检查脚本设置，脚本名为check_haproxy，间隔1s执行/etc/keepalived/check_haproxy.sh检测，判定haproxy不能提供服务后本节点优先度-30</span><br>vrrp_script check_haproxy &#123;<br>script &quot;/etc/keepalived/check_haproxy.sh&quot;<br>interval 1<br>weight -30<br>fall 3<br>rise 2<br>timeout 2 <br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">虚拟路由配置</span><br>vrrp_instance VI_1 &#123;<br> state MASTER #其实没有影响，只是标记<br> interface ens160#VIP绑定哪个网卡<br> virtual_router_id 66#同一集群中虚拟ID一致<br> priority 100 #保证优先度最高，并且检测有问题后需要降低至比某其它节点低，从而VIP转移<br> advert_int 1<br> authentication &#123;#仅验证在同一Keepalived集群中用，没有加密，可以抓包看到<br> auth_type PASS<br>  auth_pass 123456<br> &#125;<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">虚拟IP</span><br> virtual_ipaddress &#123;<br> 10.0.0.100/24 dev ens160 label ens160:1<br> &#125;<br> track_interface &#123;#检查网卡是否有问题，如果该网卡故障也会转移<br> ens160<br> &#125;<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">调用脚本进行通知（发邮件）</span><br> notify_master &quot;/etc/keepalived/notify.sh master&quot;<br> notify_backup &quot;/etc/keepalived/notify.sh backup&quot;<br> notify_fault &quot;/etc/keepalived/notify.sh fault&quot;<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">调用上方定义的健康性检查脚本</span><br> track_script &#123;<br> check_haproxy <br> &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">另一节点配置绝大多数相同，以下为不同的行</span><br>[root@haproxy2 ~]#cat /etc/keepalived/keepalived.conf<br>global_defs &#123;<br>...<br>...<br>router_id ka2.9527.com<br><br>vrrp_instance VI_1 &#123;<br>state BACKUP<br>...<br>...<br>priority 80<br></code></pre></td></tr></table></figure><h3 id="上述配置中提及的脚本"><a href="#上述配置中提及的脚本" class="headerlink" title="上述配置中提及的脚本"></a>上述配置中提及的脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@haproxy2 ~]#cat /etc/keepalived/notify.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash">contact=<span class="hljs-string">&#x27;9527@163.com&#x27;</span></span><br>notify() &#123;<br> mailsubject=&quot;$(hostname) to be $1, vip floating&quot;<br> mailbody=&quot;$(date +&#x27;%F %T&#x27;): vrrp transition, $(hostname) changed to be $1&quot;<br>   echo &quot;$mailbody&quot; | mail -s &quot;$mailsubject&quot; $contact<br>   &#125;<br>   case $1 in<br>   master)<br>    notify master<br>     ;;<br>   backup)<br>    notify backup <br>     ;;<br>   fault)<br>    notify fault<br>     ;;<br>   *)<br> <br>    echo &quot;Usage: $(basename $0) &#123;master|backup|fault&#125;&quot;<br>        exit 1<br>         ;;<br>     esac<br>     <br>[root@haproxy2 ~]#cat /etc/keepalived/check_haproxy.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>/usr/bin/killall -0 haproxy #kill的0信号专门用来检测进程情况<br></code></pre></td></tr></table></figure><h3 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h3><p>​Linux或windows上作测试均可，均可修改域名解析文件通过域名访问。</p><p>​修改域名对应IP为VIP，即10.0.0.100。</p><p>​应实现<a href="http://www.9527.com/">www.9527.com</a>  blog.9527.com jsp.9527.com的资源均可访问，且正确的结果应该如上文的测试结果一致。</p><p>​以下为测试haproxy高可用，一节点故障后是否影响访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">目前节点1工作，VIP在该主机上</span><br>[root@haproxy1 ~]#ip a<br>2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000<br>    link/ether 00:0c:29:f0:5a:9f brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.87/24 brd 10.0.0.255 scope global noprefixroute ens160<br>       valid_lft forever preferred_lft forever<br>    inet 10.0.0.100/24 scope global secondary ens160:1<br>       valid_lft forever preferred_lft forever<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">抓包分析</span><br>[root@8 ~]$tcpdump -i eth0 -nn host 224.0.100.100<br>dropped privs to tcpdump<br>tcpdump: verbose output suppressed, use -v or -vv for full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes<br>07:23:56.322916 IP 10.0.0.87 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 100, authtype simple, intvl 1s, length 20<br>07:23:57.322746 IP 10.0.0.87 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 100, authtype simple, intvl 1s, length 20<br>07:23:58.323721 IP 10.0.0.87 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 100, authtype simple, intvl 1s, length 20<br>07:23:59.324692 IP 10.0.0.87 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 100, authtype simple, intvl 1s, length 20<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">模拟haproxy进程故障</span><br>[root@haproxy1 ~]#systemctl stop haproxy<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以看到该Keepalived节点优先级下降，另一节点发现自己优先级更高后上线</span><br>07:25:35.394666 IP 10.0.0.87 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 100, authtype simple, intvl 1s, length 20<br>07:25:36.395260 IP 10.0.0.87 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 100, authtype simple, intvl 1s, length 20<br>07:25:37.396454 IP 10.0.0.87 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 70, authtype simple, intvl 1s, length 20<br>07:25:38.396978 IP 10.0.0.87 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 70, authtype simple, intvl 1s, length 20<br>07:25:39.398006 IP 10.0.0.87 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 70, authtype simple, intvl 1s, length 20<br>07:25:40.084624 IP 10.0.0.88 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 80, authtype simple, intvl 1s, length 20<br>07:25:41.085025 IP 10.0.0.88 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 80, authtype simple, intvl 1s, length 20<br>07:25:42.085387 IP 10.0.0.88 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 80, authtype simple, intvl 1s, length 20<br>07:25:43.086345 IP 10.0.0.88 &gt; 224.0.100.100: VRRPv2, Advertisement, vrid 66, prio 80, authtype simple, intvl 1s, length 20<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">VIP漂到了另一节点</span><br>[root@haproxy1 ~]#ip a<br>2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000<br>    link/ether 00:0c:29:f0:5a:9f brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.87/24 brd 10.0.0.255 scope global noprefixroute ens160<br>       valid_lft forever preferred_lft forever<br>[root@haproxy2 ~]#ip a<br>2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000<br>    link/ether 00:0c:29:d3:7b:2b brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.88/24 brd 10.0.0.255 scope global noprefixroute ens160<br>       valid_lft forever preferred_lft forever<br>    inet 10.0.0.100/24 scope global secondary ens160:1<br>       valid_lft forever preferred_lft forever<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">完成切换后客户端访问不受影响则配置无误</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​完成以上配置并测试无误后，已成功搭建了一个完整的web架构。</p><p>​本架构比较简单，适合整体学习以上涉及的服务如何互相配合，未来可进一步优化和拓展。未来可拓展为以下更贴近真实的架构，也是本人学习的方向。</p><p><img src="web%E6%9E%B6%E6%9E%842(1).jpg" alt="web架构2(1)"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat性能优化</title>
    <link href="/2022/08/12/Tomcat%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2022/08/12/Tomcat%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>​本文主要介绍了Tomcat运行环境，总结了对优化Tomcat有帮助的参数。</p><p>​Tomcat的运行依赖于JVM（Java Virtual Machine），从虚拟机的角度把Tomcat的调整分为外部环境JVM 调优 和 Tomcat 自身调优两部分。</p><span id="more"></span><h1 id="JVM简介"><a href="#JVM简介" class="headerlink" title="JVM简介"></a>JVM简介</h1><h3 id="JVM组成"><a href="#JVM组成" class="headerlink" title="JVM组成"></a>JVM组成</h3><p><img src="image-20220812184227064.png" alt="image-20220812184227064"></p><p>​JVM可大致分为：类加载子系统，运行时数据区，执行引擎，本地方法接口。</p><p>​其中Runtime Data Areas（运行时数据区）是最消耗内存的空间,是Tomcat优化的关注重点。而该部分的heap在虚拟机启动时创建,存放创建的所有对象信息。如果对象无法申请到可用内存将抛出OOM异常，是主要优化和监控的目标。</p><h3 id="GC垃圾回收器"><a href="#GC垃圾回收器" class="headerlink" title="GC垃圾回收器"></a>GC垃圾回收器</h3><p>​垃圾指在堆内存中不再使用但仍占用着内存的过去创建对象。需要即使进行垃圾回收,从而释放内存空间给其它对象使用。 垃圾确定方法有引用计数和根搜索(可达)算法。</p><p>​垃圾回收算法主要有：</p><ul><li>​     标记-清除 Mark-Sweep：造成<strong>内存碎片</strong>,效率较高</li><li>​ 标记-压缩 (压实)Mark-Compact：没有内存碎片，内存整理消耗导致<strong>效率相对低下</strong></li><li>​ 复制 Copying：内存分为大小相同两块区域。没有内存碎片，效率较高，<strong>浪费内存</strong></li></ul><h3 id="heap内存结构"><a href="#heap内存结构" class="headerlink" title="heap内存结构"></a>heap内存结构</h3><p>​<img src="image-20220812190033758.png" alt="image-20220812190033758"></p><p>​年轻代：eden区保持新创建的对象，eden存满后启动GC，标记存活对象，存活对象复制survivor的S0区（也可以是S1区），eden剩余空间全部清除。再次触发GC时，标记eden区和之前存放的S0区中存活对象，全部存入S1区，清空eden和S0区。重复新建对象，触发GC时，对象会来回在S0、S1间转移，eden区总是被清空。</p><p>​老年代：如果对象一直存活，复制次数达到阈值，将复制到Tenured区长久保存。当Tenured区也满了之后，将触发full GC，即所有区域都会触发垃圾回收。</p><p>​根据年轻代频繁写入、垃圾回收的特点，老年代区域大、垃圾回收较少的特点，采用适合的算法，年轻代eden为标记-清除，存活区为标记-压缩，老年代为标记-压缩。</p><h3 id="JVM内存部分参数"><a href="#JVM内存部分参数" class="headerlink" title="JVM内存部分参数"></a>JVM内存部分参数</h3><p>-为标准选项</p><p>-X为稳定非标准选项</p><p>-XX为不稳定选项</p><p>​-Xms设置应用程序初始使用的堆内存大小（年轻代+老年代） </p><p>​-Xmx设置应用程序能获得的最大堆内存</p><p>​-XX:NewSize 设置初始新生代大小 </p><p>​-XX:MaxNewSize 设置最大新生代内存空间</p><p>​-Xss设置每个线程私有的栈空间大小,依据具体线程大小和数量  </p><p>​-XX:SurvivorRatioEden区与Survivor区的大小比值</p><p>​-XX:+UseFastAccessorMethods原始类型的快速优化</p><p>​-XX:MaxTenuringThreshold 垃圾最大年龄</p><p>​-XX:+AggressiveOpts 加快编译</p><p>​-XX:+UseBiasedLocking锁机制的性能改善</p><p>​-XX:SoftRefLRUPolicyMSPerMB每兆堆空闲空间中SoftReference的存活时间</p><p>​-XX:+UseParallelGCFull GC采用parallelMSC</p><p>​-XX:ParallelGCThreads 并行收集器的线程数</p><p>​-XX:+UseParallelOldGC老年代垃圾收集方式为并行收集</p><p>​-XX:+UseConcMarkSweepGC使用CMS内存收集</p><p>​-XX:CMSFullGCsBeforeCompaction多少次后进行内存压缩</p><p>​-XX:+CMSIncrementalMode设置为增量模式</p><h1 id="Tomcat优化配置"><a href="#Tomcat优化配置" class="headerlink" title="Tomcat优化配置"></a>Tomcat优化配置</h1><h3 id="JVM内存空间优化"><a href="#JVM内存空间优化" class="headerlink" title="JVM内存空间优化"></a>JVM内存空间优化</h3><p>​配置修改位置：&#x2F;安装路径&#x2F;tomcat&#x2F;bin&#x2F;catalina.sh </p><p>​可以通过JAVA_OPTS&#x3D;“” 来添加JVM环境参数</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">案例，在该文件中添加</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">其中比较通用的设置是：堆内存初始大小和最大大小一致，避免空间变化造成的性能下降；客户端或较小程序，内存使用量不大，可以使用串行回收；对于服务端大型计算，可以使用并行回收；大型WEB应用，客户端需要大量交互，要求尽量少的STW，可以使用并发回收。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">很多参数需要根据业务需求来决定</span><br>JAVA_OPTS=&quot;-server -Xms4g -Xmx4g -Xss512k -Xmn1g -XX:CMSInitiatingOccupancyFraction=65 -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:+DisableExplicitGC -XX:MaxTenuringThreshold=10 -XX:NewRatio=2 -XX:PermSize=128m -XX:MaxPermSize=512m -XX:CMSFullGCsBeforeCompaction=5 -XX:+ExplicitGCInvokesConcurrent -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods&quot;<br></code></pre></td></tr></table></figure><h3 id="Tomcat线程池调整"><a href="#Tomcat线程池调整" class="headerlink" title="Tomcat线程池调整"></a>Tomcat线程池调整</h3><p>​配置修改位置： &#x2F;安装路径&#x2F;tomcat&#x2F;conf&#x2F;server.xml</p><p>​在连接器部分中添加</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">#常用选项</span><br>connectionTimeout ：连接超时时长,单位ms<br>maxThreads：最大线程数，默认<span class="hljs-number">200</span><br>minSpareThreads：最小空闲线程数<br>maxSpareThreads：最大空闲线程数<br>acceptCount：当启动线程满了之后，等待队列的最大长度，默认<span class="hljs-number">100</span><br>URIEncoding：URI 地址编码格式，建议使用 UTF<span class="hljs-number">-8</span><br>enableLookups：是否启用客户端主机名的DNS反向解析，缺省禁用，建议禁用，就使用客户端IP就行<br>compression：是否启用传输压缩机制，需要综合考虑CPU和流量<br>compressionMinSize：启用压缩传输的数据流最小值，单位是字节<br>compressableMimeType：定义启用压缩功能的MIME类型<span class="hljs-built_in">text</span>/html, <span class="hljs-built_in">text</span>/xml, <span class="hljs-built_in">text</span>/css,<span class="hljs-built_in">text</span>/javascript<br></code></pre></td></tr></table></figure><h3 id="通过测试调整参数"><a href="#通过测试调整参数" class="headerlink" title="通过测试调整参数"></a>通过测试调整参数</h3><p>​关于以上多个参数具体数值需要反复尝试，使用压力测试工具，观察后进行调整。如使用PerfMa的heapdump。可以在网页中通过图形化界面进行参数分析和优化。</p><p><img src="image-20220812205848455.png" alt="image-20220812205848455"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat配置总结</title>
    <link href="/2022/08/10/Tomcat%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2022/08/10/Tomcat%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​本文主要总结了Tomcat的安装、使用和配置方法。</p><span id="more"></span><h1 id="Tomcat安装和使用"><a href="#Tomcat安装和使用" class="headerlink" title="Tomcat安装和使用"></a>Tomcat安装和使用</h1><p>​Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，并发性能较差，Tomcat 除了能处理HTML页面，还是一个Servlet和JSP容器，可以负责处理java应用。</p><p>​目前主流的使用的大版本是7和8。CentOS8包仓库中没有，其他Linux发行版带有的Tomcat版本较旧，依然需要自行下载安装。</p><p>​官网下载： <a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p>​国内镜像站点：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/">https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/</a></p><h3 id="安装和初始配置"><a href="#安装和初始配置" class="headerlink" title="安装和初始配置"></a>安装和初始配置</h3><p>​Tomcat需要JAVA环境，因此要先安装JDK，可以选择付费的Oracle JDK 或开源的Open JDK。</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">如安装Open JDK1.8版本需要以下两个软件包，可直接yum安装</span><br>java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装后可查看版本信息java -version</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载Tomcat软件后解包，并进到软件目录下</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">软件路径加入PATH变量</span><br>echo &#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27; &gt; /etc/profile.d/tomcat.sh<br>. /etc/profile.d/tomcat.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">若不指定该变量，将无法启动Tomcat</span><br>vim /usr/local/tomcat/conf/tomcat.conf<br>JAVA_HOME=/usr/local/jdk #或/usr/local/jdk/jre<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可采用以下安装后自带脚本管理</span><br>catalina.sh #直接运行可查看丰富的用法和描述，可以在后面加上显示的command进行管理<br>startup.sh#启动Tomcat<br>shutdown.sh#关闭<br><span class="hljs-meta prompt_">#</span><span class="language-bash">按以上方法启动的Tomcat进程可以看到是由root身份运行，不安全。解决方法如下</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为其进程创建专用账号</span> <br>useradd -r -s /sbin/nologin tomcat<br>chown -R tomcat.tomcat /安装路径/tomcat/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置service文件</span><br>vim /lib/systemd/system/tomcat.service<br>[Unit]<br>Description=Tomcat<br>After=syslog.target network.target <br>[Service]<br>Type=forking<br>EnvironmentFile=/安装路径/tomcat/conf/tomcat.conf<br>ExecStart=/安装路径/tomcat/bin/startup.sh<br>ExecStop=/安装路径/tomcat/bin/shutdown.sh<br>PrivateTmp=true<br>User=tomcat#使Tomcat进程以普通用户身份运行<br>Group=tomcat<br>[Install]<br>WantedBy=multi-user.target<br><br>systemctl daemon-reload<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以后可通过systemd管理</span><br></code></pre></td></tr></table></figure><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>Tomcat目录下有以下目录</p><ul><li><p>bin 服务启动、停止等相关程序和文件</p></li><li><p><strong>conf</strong> 配置文件</p></li><li><p>lib 库目录</p></li><li><p>logs 日志目录</p></li><li><p><strong>webapps</strong> 应用程序，应用部署目录</p><p>​每个部署的应用子目录含有以下文件</p><ul><li>主页配置：默认按以下顺序查找主页文件 index.html，index.htm、index.jsp</li><li>WEB-INF&#x2F;：当前目录WebApp的私有资源路径，通常存储当前应用使用的web.xml和context.xml配置文件</li><li>META-INF&#x2F;：类似于WEB-INF，也是私有资源的配置信息，和WEB-INF&#x2F;目录一样浏览器无法访问</li><li>classes&#x2F;：类文件，当前webapp需要的类</li><li>lib&#x2F;：当前应用依赖的jar包</li></ul></li><li><p>work   jsp编译后的结果文件，建议提前预热访问</p></li></ul><h3 id="Tomcat组件结构"><a href="#Tomcat组件结构" class="headerlink" title="Tomcat组件结构"></a>Tomcat组件结构</h3><ul><li>Server，代表整个Tomcat容器，一台主机可以启动多tomcat实例，需要确保端口不要产生冲突</li><li>Service，实现组织Engine和Connector，建立两者之间关联关系, service 里面只能包含一个Engine</li><li>Connector，有HTTP（默认端口8080&#x2F;tcp）、HTTPS（默认端口8443&#x2F;tcp）、AJP（默认端口8009&#x2F;tcp）协议的连接器，AJP（Apache Jserv protocol）是一种基于TCP的二进制通讯协议。</li><li>Engine、Host（虚拟主机）、Context(上下文件,解决路径映射)都是容器类组件，可以嵌入其它组件，内部配置如何运行应用程序。</li><li>可以内嵌到其他组件内，valve、logger、realm、loader、manager等。以logger举例，在不同容器组件内分别定义。</li><li>集群类组件listener、cluster</li></ul><p><img src="image-20220811145421292.png" alt="image-20220811145421292"></p><h3 id="conf目录主要配置文件"><a href="#conf目录主要配置文件" class="headerlink" title="conf目录主要配置文件"></a>conf目录主要配置文件</h3><p>​<strong>server.xml</strong> 主配置文件</p><p>​<strong>web.xml</strong>每个webapp只有“部署”后才能被访问，它的部署方式通常由web.xml进行定义，其存放位置为WEB-INF&#x2F;目录中；此文件为所有的webapps提供默认部署相关的配置,每个web应用也可以使用专用配置文件覆盖全局文件中的设置。</p><p>​<strong>context.xml</strong>用于定义所有web应用均需加载的Context配置，此文件为所有的webapps提供默认配置，每个web应用也可以使用自已专用的配置，它通常由专用的配置文件context.xml来定义，其存放位置为WEB-INF&#x2F;目录中,覆盖全局的文件</p><p>​其它文件省略</p><h3 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h3><p>​将webapp的源文件放置到目标目录，通过web.xml和context.xml文件中配置的路径就可以访问该webapp，通过类加载器加载其特有的类和依赖的类到JVM上。</p><p>​自动部署：将war包放到webapps&#x2F;目录下，Tomcat一旦发现多了一个web应用的war包，默认会自动把它解压缩，加载并启动起来，来源于conf&#x2F;server.xml配置文件的这一行。最终可看到生成同名文件夹。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span> <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​自动部署较为方便，想移除应用项目时仅需删除.war包，过几秒后会发现应用文件夹也被移除。</p><p>​手动部署：分冷部署，将webapp放到指定目录，才去启动Tomcat服务；热部署，Tomcat服务不停止，需要依赖manager、ant脚本、tcd等工具。</p><p>​</p><h1 id="Tomcat配置总结"><a href="#Tomcat配置总结" class="headerlink" title="Tomcat配置总结"></a>Tomcat配置总结</h1><p>​实际使用前需要解决一个8005端口的安全风险</p><h3 id="关闭管理端口"><a href="#关闭管理端口" class="headerlink" title="关闭管理端口"></a>关闭管理端口</h3><p>​在主配置文件conf&#x2F;server.xml中可以看到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Server</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8005&quot;</span> <span class="hljs-attr">shutdown</span>=<span class="hljs-string">&quot;SHUTDOWN&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​8005是Tomcat的管理端口，默认监听在本机上。无需验证就可发送SHUTDOWN字符串关闭server，tomcat接收到后就会执行该命令。但此行不能注释，否则无法启动Tomcat。</p><p>解决方法如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Server</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">shutdown</span>=<span class="hljs-string">&quot;SHUTDOWN&quot;</span>&gt;</span>无效端口，相当于关闭<br><span class="hljs-tag">&lt;<span class="hljs-name">Server</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">shutdown</span>=<span class="hljs-string">&quot;SHUTDOWN&quot;</span>&gt;</span>使用随机端口，但有被扫描到该端口的风险<br></code></pre></td></tr></table></figure><h3 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml">一般情况下，一个Server实例配置一个Service，name属性相当于该Service的ID<br><span class="hljs-tag">&lt;<span class="hljs-name">Service</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Catalina&quot;</span>&gt;</span><br><br>连接器配置，包括监听端口，协议，https访问也由该连接器负责<br>如果以普通用户Tomcat身份运行进程，则不能使用1024以下端口<br>   <span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br><br>引擎设置，其中指定了默认虚拟主机，即以IP地址形式访问本机时访问的虚拟主机<br>   <span class="hljs-tag">&lt;<span class="hljs-name">Engine</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Catalina&quot;</span> <span class="hljs-attr">defaultHost</span>=<span class="hljs-string">&quot;localhost&quot;</span>&gt;</span><br>       <br>       <br>虚拟主机配置<br>name 必须是主机名，用主机名来匹配<br>appBase 当前主机的网页根目录，是相对于 $CATALINA_HOME ，也可以使用绝对路径<br>unpackWARs 是否自动解压war格式<br>autoDeploy 热部署，自动加载并运行应用<br>       <br><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;web1.magedu.org&quot;</span> <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;/data/webapps/&quot;</span> <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;True&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>虚拟主机专有访问日志，&amp;quot是双引号<br><span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="hljs-attr">directory</span>=<span class="hljs-string">&quot;logs&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;web1_access_log&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;.txt&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%h %l %u %t <span class="hljs-symbol">&amp;quot;</span>%r<span class="hljs-symbol">&amp;quot;</span> %s </span></span><br><span class="hljs-string"><span class="hljs-tag">%b&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span><br> <br>如果不加日志也可以只写第一行<br></code></pre></td></tr></table></figure><h3 id="context配置"><a href="#context配置" class="headerlink" title="context配置"></a>context配置</h3><p>​该部分配置可实现路径映射：将url映射至指定路径，而非使用appBase下的物理目录，实现虚拟目录功能。应用独立配置，例如单独配置应用日志、单独配置应用访问控制。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">映射指定路径<br><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/test&quot;</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;/data/test&quot;</span> <span class="hljs-attr">reloadable</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>映射站点的根目录<br><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;/data/website&quot;</span> <span class="hljs-attr">reloadable</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><br>path：URL路径，如果path与appBase下面的子目录同名，context的docBase路径优先更高<br>docBase：可以是磁盘文件的绝对路径，也可以是相对路径<br>reloadable：true表示如果WEB-INF/classes或META-INF/lib目录下.class文件有改动，就会将WEB应用重新加载。生产环境中，建议使用false来禁用。<br><br>#范例，软件升级和回滚<br><span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">Host</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;node1.magedu.org&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;/data/webapps1&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/app1&quot;</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;/data/app1&quot;</span> <span class="hljs-attr">reloadable</span>=<span class="hljs-string">&quot;true&quot;</span> &gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">Context</span>&gt;</span><br>创建软链接<br>ln -s /data/app1-v1/ /data/app1 <br>访问http://node1.magedu.org:8080/app1/  实际上访问了/data/app1-v1/     <br>升级只需换软链接ln -s /data/app1-v2/ /data/app1   或修改配置文件，但需要重新加载<br>回滚同理<br></code></pre></td></tr></table></figure><h3 id="多虚拟主机配置实验"><a href="#多虚拟主机配置实验" class="headerlink" title="多虚拟主机配置实验"></a>多虚拟主机配置实验</h3><p>​模拟部署两个应用，客户端输入域名访问两个网站</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建目录，如果设置了Tomcat进程使用普通账号，这两个文件夹需要改所属者</span><br>mkdir /data/webapps&#123;1,2&#125;/ROOT -pv<br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备测试jsp文件，内容如下</span><br>vim /data/webapps1/ROOT/index.jsp<br><br>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;<br>    pageEncoding=&quot;UTF-8&quot;%&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;meta charset=&quot;utf-8&quot;&gt;<br>   &lt;title&gt;jsp例子&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>后面的内容是服务器端动态生成字符串，最后拼接在一起<br>&lt;br&gt;<br>&lt;%=request.getRequestURL()%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改conf/server.xml，添加四行</span><br> &lt;Host  name=&quot;node1.magedu.org&quot;  appBase=&quot;/data/webapps1&quot;&gt;<br>     &lt;/Host&gt;<br>     &lt;Host  name=&quot;node2.magedu.org&quot;  appBase=&quot;/data/webapps2&quot;&gt;<br>     &lt;/Host&gt;<br>     <br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Windows改域名解析文件后打开浏览器</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">访问 http://node1.magedu.org:8080/</span><br>后面的内容是服务器端动态生成字符串，最后拼接在一起<br>http://node1.magedu.org:8080/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">访问 http://node2.magedu.org:8080/</span><br>后面的内容是服务器端动态生成字符串，最后拼接在一起<br>http://node2.magedu.org:8080/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在Linux上查看</span><br>curl http://node1.magedu.org:8080/<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;meta charset=&quot;utf-8&quot;&gt;<br>   &lt;title&gt;jsp例子&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>后面的内容是服务器端动态生成字符串，最后拼接在一起<br>http://node1.magedu.org:8080/<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="开启管理页面"><a href="#开启管理页面" class="headerlink" title="开启管理页面"></a>开启管理页面</h3><p>​Tomcat的状态页可以查看服务器信息，JVM内存使用情况，管理页可以部署和删除应用</p><p>​Tomcat的默认页面可以看到有几个按钮，点击可进入状态页和管理页面，默认不能访问。访问后提示403，访问被拒绝，根据提示修改配置文件。本质上是访问了webapps&#x2F;manage文件夹</p><p><img src="image-20220811163555927.png" alt="image-20220811163555927"></p><p>只允许本机访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">修改conf/tomcat-users.xml    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-gui&quot;</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;admin-gui&quot;</span> /&gt;</span>      添加新的role <br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">&quot;manager-gui,admin-gui&quot;</span>/&gt;</span>   添加验证用户，可输入用户名密码访问页面<br></code></pre></td></tr></table></figure><p>允许远程访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">修改webapps/manager/META-INF/context.xml<br><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">antiResourceLocking</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">privileged</span>=<span class="hljs-string">&quot;true&quot;</span> &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">allow</span>=<span class="hljs-string">&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot;</span> /&gt;</span><br>    <br>可以猜到allow为允许的ipv4或ipv6地址，“|”为或的意思，添加允许的网段<br>allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|192\.168\.\d+\.\d+&quot; /&gt;<br></code></pre></td></tr></table></figure><h1 id="Session复制"><a href="#Session复制" class="headerlink" title="Session复制"></a>Session复制</h1><p>​尽管可以使用多台Tomcat+反向代理实现Tomcat的高可用，但一台主机下线将会导致session丢失，导致用户体验不佳。</p><p>​假设有多个Tomcat服务器都将Session持久化，如果节点A下线期间用户切换到了节点B上，节点B发现用户报文携带的节点A的session ID是陌生的，认为是新的会话，原有Sesssion将丢失。因此需要实现Session的高可用性来解决该问题。</p><p>​以下解决方案具有一定局限性（性能或并发性不佳），生产环境中一般使用Redis，小架构也可以使用memcached。</p><h3 id="Tomcat-Session-Replication-Cluster"><a href="#Tomcat-Session-Replication-Cluster" class="headerlink" title="Tomcat Session Replication Cluster"></a><strong>Tomcat Session Replication Cluster</strong></h3><p>​Tomcat 官方实现的Session 复制集群。此方案的缺点是基于多播实现心跳，TCP单播实现复制，Tomcat集群规模越大越不适合。且高并发连接时，单机上的所有session占据的内存空间非常巨大，甚至耗尽内存。</p><p>​可直接使用官方配置，稍作修改。</p><p><a href="https://tomcat.apache.org/tomcat-8.5-doc/cluster-howto.html">https://tomcat.apache.org/tomcat-8.5-doc/cluster-howto.html</a></p><p><img src="image-20220812175643796.png" alt="image-20220812175643796"></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pf">仅有以下内容可能需要修改<br> address=<span class="hljs-string">&quot;228.0.0.4&quot;</span>         <span class="hljs-comment">#指定的多播地址</span><br> <span class="hljs-keyword">port</span>=<span class="hljs-string">&quot;45564&quot;</span>    <span class="hljs-comment">#采用UDP</span><br> frequency=<span class="hljs-string">&quot;500&quot;</span>             <span class="hljs-comment">#间隔500ms发送</span><br> <span class="hljs-keyword">drop</span>Time=<span class="hljs-string">&quot;3000&quot;</span>/&gt;           <span class="hljs-comment">#故障阈值3s</span><br> <br> address=<span class="hljs-string">&quot;auto&quot;</span>    <span class="hljs-comment">#监听地址,此项建议修改为当前主机的IP</span><br> <span class="hljs-keyword">port</span>=<span class="hljs-string">&quot;4000&quot;</span>  <span class="hljs-comment">#监听端口</span><br> autoBind=<span class="hljs-string">&quot;100&quot;</span>  <span class="hljs-comment">#如果端口冲突,自动绑定其它端口,范围是4000-4100</span><br> selectorTimeout=<span class="hljs-string">&quot;5000&quot;</span>     <span class="hljs-comment">#自动绑定超时时长5s</span><br> <span class="hljs-keyword">max</span>Threads=<span class="hljs-string">&quot;6#最大线程数</span><br></code></pre></td></tr></table></figure><h3 id="Session服务器"><a href="#Session服务器" class="headerlink" title="Session服务器"></a>Session服务器</h3><p>​使用MSM（memcached session manager）提供将Tomcat的session保持到memcached或redis的程序，可以实现高可用。</p><p><img src="image-20220812180929330.png" alt="image-20220812180929330"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">反向代理可以说nginx，HAproxy等软件，调度配置省略</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">两台session服务器安装memcached，配置需要相同</span><br>vim /etc/sysconfig/memcached<br>PORT=&quot;11211&quot;<br>USER=&quot;memcached&quot;<br>MAXCONN=&quot;1024&quot;<br>CACHESIZE=&quot;64&quot;<br>OPTIONS=&quot;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Tomcat配置 在Tomcat安装目录下的conf文件夹修改server.xml</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在最后加入</span><br>&lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;<br>    memcachedNodes=&quot;n1:10.0.0.103:11211,n2:10.0.0.104:11211&quot;  <br>    failoverNodes=&quot;n1&quot;<br>    requestUriIgnorePattern=&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;<br>   <br>transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFact<br>ory&quot;<br><span class="hljs-meta prompt_">   /&gt;</span><span class="language-bash"></span><br><span class="language-bash"></span><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">另一节点配置完全相同，仅修改该行</span><br>failoverNodes=&quot;n2&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">需要将以下包放到Tomcat安装目录下的lib（库）目录</span><br>asm-5.2.jar<br>kryo-3.0.3.jar<br>kryo-serializers-0.45.jar<br>memcached-session-manager-2.3.2.jar<br>memcached-session-manager-tc8-2.3.2.jar<br>minlog-1.3.1.jar<br>msm-kryo-serializer-2.3.2.jar<br>objenesis-2.6.jar<br>reflectasm-1.11.9.jar<br>spymemcached-2.12.3.jar<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HAproxy配置总结</title>
    <link href="/2022/08/09/HAproxy%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2022/08/09/HAproxy%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​本文主要总结了HAproxy的常用配置，提供了HAproxy使用案例。</p><span id="more"></span><h1 id="HAproxy简介"><a href="#HAproxy简介" class="headerlink" title="HAproxy简介"></a>HAproxy简介</h1><p>​HAProxy，high available proxy，是具备高并发(一万以上)、高性能的TCP和HTTP负载均衡器，支持基于cookie的持久性，自动故障切换，支持正则表达式及web状态统计。</p><p>​官方文档<a href="http://cbonte.github.io/haproxy-dconv/">http://cbonte.github.io/haproxy-dconv/</a></p><p>​   <a href="http://cbonte.github.io/haproxy-dconv/2.1/configuration.html">http://cbonte.github.io/haproxy-dconv/2.1/configuration.html</a></p><p>主要功能：</p><ul><li>TCP 和 HTTP反向代理</li><li>SSL&#x2F;TSL服务器</li><li>可以针对HTTP请求添加cookie，进行路由后端服务器</li><li>可平衡负载至后端服务器，并支持持久连接</li><li>支持所有主服务器故障切换至备用服务器</li><li>支持专用端口实现监控服务</li><li>支持停止接受新连接请求，而不影响现有连接</li><li>可以在双向添加，修改或删除HTTP报文首部</li><li>响应报文压缩</li><li>支持基于pattern实现连接请求的访问控制</li><li>通过特定的URI为授权用户提供详细的状态信息</li></ul><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>​Lua环境：需要先编译安装lua（自带版本较旧），源码包 <a href="http://www.lua.org/ftp/%E9%9C%80%E8%A6%81%E5%89%8D%E7%BD%AEgcc">http://www.lua.org/ftp/需要前置gcc</a> readline-devel，解包后到目录下执行make linux test。</p><p>​HAproxy需要前置 gcc openssl-devel pcre-devel systemd-devel 。解包后可在目录下查看帮助文件README和INSTALL</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">参考文档进行安装</span><br>make ARCH=x86_64 TARGET=linux-glibc USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1 USE_LUA=1 LUA_INC=/usr/local/src/lua-5.3.5/src/ LUA_LIB=/usr/local/src/lua-5.3.5/src/<br><br>make install PREFIX=/apps/haproxy<br><br>ln -s /apps/haproxy/sbin/haproxy /usr/sbin/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在/usr/lib/systemd/system/下准备启动文件</span><br>[Unit]<br>Description=HAProxy Load Balancer<br>After=syslog.target network.target<br>[Service]<br>ExecStartPre=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg  -c -q<br>ExecStart=/usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p<br>/var/lib/haproxy/haproxy.pid<br>ExecReload=/bin/kill -USR2 $MAINPID<br>LimitNOFILE=100000<br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备socket文件目录</span><br>mkdir /var/lib/haproxy<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置用户和目录权限</span><br>useradd -r -s /sbin/nologin -d /var/lib/haproxy haproxy<br>systemctl enable --now haproxy<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">访问状态页</span><br>http://HAproxy主机的IP:9999/haproxy-status<br></code></pre></td></tr></table></figure><h1 id="HAproxy配置详解"><a href="#HAproxy配置详解" class="headerlink" title="HAproxy配置详解"></a>HAproxy配置详解</h1><p>​目录&#x2F;usr&#x2F;local&#x2F;src&#x2F;haproxy-2.1.3&#x2F;examples&#x2F;下有配置文件的范例可供学习</p><p>​HAProxy 的配置文件haproxy.cfg由两大部分组成，分别是global和proxies部分。</p><p>​global：全局配置段，其中定义了进程及安全配置相关的参数，性能调整相关参数和Debug参数。</p><p>​proxies：代理配置段，可分为四大模块，其中defaults部分为frontend, backend, listen提供默认配置；frontend配置前端，相当于nginx中的server {}块；backend配置后端，相当于nginx中的upstream {}块；listen：同时拥有前端和后端配置,配置简单,生产推荐使用。</p><h3 id="global配置参数"><a href="#global配置参数" class="headerlink" title="global配置参数"></a>global配置参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">chroot #锁定运行目录<br>deamon #以守护进程运行<br>stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin process 1 #socket文件<br>user, group, uid, gid  #运行haproxy的用户身份<br>nbproc   n #开启的haproxy worker 进程数，默认进程数是一个<br>nbthread 1 #和多进程 nbproc配置互斥（版本有关,CentOS8的haproxy1.8无此问题）,指定每个haproxy进程开启的线程数，默认为每个进程一个线程<br>cpu-map 1 0   #绑定haproxy worker 进程至指定CPU，将第1个work进程绑定至0号CPU<br>cpu-map 2 1     #绑定haproxy worker 进程至指定CPU，将第2个work进程绑定至1号CPU<br>maxconn n   #每个haproxy进程的最大并发连接数<br>maxsslconn n   #每个haproxy进程ssl最大连接数,用于haproxy配置了证书的场景下<br>maxconnrate n   #每个进程每秒创建的最大连接数量<br>spread-checks n #后端server状态check随机提前或延迟百分比时间，建议2-5(20%-50%)之间，默认值0<br>pidfile #指定pid文件路径<br>log 127.0.0.1 local2 info #定义全局的syslog服务器；日志服务器需要开启UDP协议，最多可以定义两个<br></code></pre></td></tr></table></figure><h3 id="proxies配置参数"><a href="#proxies配置参数" class="headerlink" title="proxies配置参数"></a>proxies配置参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs shell">option redispatch     #当server Id对应的服务器挂掉后，强制定向到其他健康的服务器，重新派发<br>option abortonclose   #当服务器负载很高时，自动结束掉当前队列处理比较久的连接，针对业务情况选择开启<br>option http-keep-alive #开启与客户端的会话保持<br>option forwardfor     #透传客户端真实IP至后端web服务器<br>mode http|tcp #设置默认工作类型,使用TCP服务器性能更好，减少压力<br>timeout http-keep-alive 120s #session 会话保持超时时间，此时间段内会转发到相同的后端服务器<br>timeout connect 12s #客户端请求从haproxy到后端server最长连接等待时间(TCP连接之前)，默认单位ms<br>timeout server 60s #客户端请求从haproxy到后端服务端的请求处理超时时长(TCP连接之后)，默认单位ms，如果超时，会出现502错误，此值建议设置较大些，访止502错误<br>timeout client 600s #设置haproxy与客户端的最长非活动时间，默认单位ms，建议和timeout server相同<br>timeout check   5s   #对后端服务器的默认检测超时时间<br>default-server inter 1000 weight 3   #指定后端服务器的默认设置<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">frontend 配置参数：</span><br>bind： #指定HAProxy的监听地址，可以是IPV4或IPV6，可以同时监听多个IP或端口，可同时用于listen字段中<br>bind [&lt;address&gt;]:&lt;port_range&gt; [, ...] [param*]#注意：如果需要绑定在非本机的IP，需要开启内核参数：net.ipv4.ip_nonlocal_bind=1<br>backlog &lt;backlog&gt; #针对所有server配置,当前端服务器的连接数达到上限后的后援队列长度，注意：不支持backend<br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例</span><br>frontend magedu_web_port #可以采用后面形式命名：业务-服务-端口号<br>   bind :80,:8080<br>   bind 10.0.0.7:10080,:8801-8810,10.0.0.17:9001-9010<br>   mode http|tcp     #指定负载协议类型<br>   use_backend &lt;backend_name&gt;  #调用的后端服务器组名称<br>   <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">backend配置参数：</span><br>mode http|tcp  #指定负载协议类型,和对应的frontend必须一致<br>option #配置选项，可用于实现更多应用层检测功能。<br>server   #定义后端real server,必须指定IP和端口<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">server 配置</span><br>check #对指定real进行健康状态检查，如果不加此设置，默认不开启检查,只有check后面没有其它配置也可以启用检查功能<br> addr &lt;IP&gt;   #可指定的健康状态监测IP，可以是专门的数据网段，减少业务网络的流量<br> port &lt;num&gt; #指定的健康状态监测端口<br>inter &lt;num&gt; #健康状态检查间隔时间，默认2000 ms<br> fall &lt;num&gt;   #后端服务器从线上转为下线的检查的连续失效次数，默认为3<br>rise &lt;num&gt;   #后端服务器从下线恢复上线的检查的连续有效次数，默认为2<br>weight &lt;weight&gt; #默认为1，最大值为256，0(状态为蓝色)表示不参与负载均衡，但仍接受持久连接<br>backup #将后端服务器标记为备份状态,只在所有非备份主机down机时提供服务，类似Sorry Server<br>disabled #将后端服务器标记为不可用状态，即维护状态，除了持久模式，将不再接受连接,状态为深黄色,优雅下线,不再接受新用户的请求<br>redirect prefix http://www.baidu.com/ #将请求临时(302)重定向至其它URL，只适用于http模式<br>redir http://www.baidu.com       #将请求临时(302)重定向至其它URL，只适用于http模式<br>maxconn &lt;maxconn&gt; #当前后端server的最大并发连接数<br>send-proxy#IP透传，需要后端日志变量$proxy_protocol_addr显示<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例：客户端访问10.0.0.7调度到后端两台服务器</span><br>frontend WEB_PORT_80<br>   bind 10.0.0.7:80<br>   mode http<br>   use_backend web_prot_http_nodes<br>backend web_prot_http_nodes<br>   mode http<br>   option forwardfor#请求报文中添加首部字段，实现IP透传<br>   server 10.0.0.17 10.0.0.17:8080   check inter 3000 fall 3 rise 5  <br>   server 10.0.0.27 10.0.0.27:8080   check inter 3000 fall 3 rise 5<br></code></pre></td></tr></table></figure><h3 id="健康性检测"><a href="#健康性检测" class="headerlink" title="健康性检测"></a>健康性检测</h3><p>​基于应用层http协议，采有不同的监测方式，对后端real server进行状态监测。</p><p>​backend中的option参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">option httpchk   #启用七层健康性检测，对tcp 和 http 模式都支持，默认为：OPTIONS / HTTP/1.0<br>option httpchk &lt;uri&gt;<br>option httpchk &lt;method&gt; &lt;uri&gt;<br>option httpchk &lt;method&gt; &lt;uri&gt; &lt;version&gt;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">期望以上检查得到的响应码</span><br>http-check expect [!] &lt;match&gt; &lt;pattern&gt;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例：</span><br>http-check expect status 200#响应码为200认为健康<br>http-check expect ! status ^5 #支持正则表达式<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例</span><br>listen web_host<br> bind 10.0.0.7:80<br> mode http<br> balance roundrobin<br><span class="hljs-meta prompt_">  #</span><span class="language-bash">option httpchk GET /monitor/check.html <span class="hljs-comment">#默认HTTP/1.0</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash">option httpchk GET /monitor/check.html HTTP/1.0</span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash">option httpchk GET /monitor/check.html HTTP/1.1   <span class="hljs-comment">#HTTP/1.1强制要求必须有Host字段</span></span><br> option httpchk HEAD /monitor/check.html HTTP/1.1\r\nHost:\ 10.0.0.7 #使用HEAD减少网络流量<br> server web1 10.0.0.17:80 cookie web1 check inter 3000 fall 3 rise 5<br> server web2 10.0.0.27:80 cookie web2 check inter 3000 fall 3 rise 5<br></code></pre></td></tr></table></figure><h3 id="启用状态页"><a href="#启用状态页" class="headerlink" title="启用状态页"></a>启用状态页</h3><p>​相关配置选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">stats enable   #基于默认的参数启用stats page<br>stats hide-version   #将状态页中haproxy版本隐藏<br>stats refresh &lt;delay&gt; #设定自动刷新时间间隔，默认不自动刷新,以秒为单位<br>stats uri &lt;prefix&gt; #自定义stats page uri，默认值：/haproxy?stats <br>stats realm &lt;realm&gt; #账户认证时的提示信息<br>stats auth &lt;user&gt;:&lt;passwd&gt; #认证时的账号和密码，可定义多个用户,每行指定一个用户.默认：no authentication<br>stats admin &#123; if | unless &#125; &lt;cond&gt; #启用stats page中的管理功能<br></code></pre></td></tr></table></figure><p>​配置文件中启用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">listen haproxy-status<br> bind :9999<br> stats enable<br> stats uri /haproxy-status         #自定义stats page uri<br> stats realm HAProxy\ Stats\ Page     #账户认证时的提示信息<br> stats auth haadmin:123456   #两个用户<br> stats auth admin:123456<br> stats refresh 30<br> stats admin if TRUE #安全原因，不建议打开<br></code></pre></td></tr></table></figure><h3 id="HTTPS配置"><a href="#HTTPS配置" class="headerlink" title="HTTPS配置"></a>HTTPS配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置HAProxy支持https协议，支持ssl会话；</span><br>bind *:443 ssl crt /PATH/TO/SOME_PEM_FILE<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指令 crt 后证书文件为PEM格式，需要同时包含证书和所有私钥</span> <br> cat demo.key demo.crt &gt; demo.pem<br><span class="hljs-meta prompt_">#</span><span class="language-bash">把80端口的请求重向定443</span><br> bind *:80<br> redirect scheme https if !&#123; ssl_fc &#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">向后端传递用户请求的协议和端口（frontend或backend）</span><br> http_request set-header X-Forwarded-Port %[dst_port]<br> http_request add-header X-Forwared-Proto https if &#123; ssl_fc &#125; <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例</span><br>frontend magedu_http_port<br> bind 10.0.0.7:80<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加https设置</span><br> bind 10.0.0.7:443 ssl crt /etc/haproxy/certs/haproxy.pem<br> redirect scheme https if !&#123; ssl_fc &#125;<br> http-request set-header X-forwarded-Port   %[dst_port]<br> http-request add-header X-forwarded-Proto https if &#123; ssl_fc &#125;<br> mode http<br> balance roundrobin<br></code></pre></td></tr></table></figure><h1 id="HAproxy调度"><a href="#HAproxy调度" class="headerlink" title="HAproxy调度"></a>HAproxy调度</h1><p>​HAProxy通过固定参数 balance 指明对后端服务器的调度算法，该参数可以配置在listen或backend选</p><p>项中。HAProxy的调度算法分为静态和动态调度算法，但是有些算法可以根据参数在静态和动态算法中相互转</p><p>换。调度算法与LVS中的类似。</p><h3 id="HAproxy常见调度算法"><a href="#HAproxy常见调度算法" class="headerlink" title="HAproxy常见调度算法"></a>HAproxy常见调度算法</h3><p>​static-rr：基于权重的轮询调度，不支持运行时利用socat进行权重的动态调整(只支持0和1,不支持其它</p><p>值)及后端服务器慢启动，其后端主机数量没有限制，相当于LVS中的 wrr。</p><p>​roundrobin：基于权重的轮询动态调度算法，支持权重的运行时调整，不同于lvs中的rr轮训模式，</p><p>支持慢启动，其每个后端backend中最多支持4095个RS，支持权重动态调整，roundrobin为默认调度算法。</p><p>​leastconn ：加权的最少连接的动态，支持权重的运行时调整和慢启动，即:根据当前连接最少的后端服务</p><p>器而非权重进行优先调度(新客户端连接)，比较适合长连接的场景使用，比如MySQL场景。</p><p>​   random：其基于随机数作为一致性hash的key负载平衡算法，随机负载平衡对于大型服务器场或经常添加或删除服务器非常有用，支持weight的动态调整，weight较大的主机有更大概率获取新请求。</p><p>​source：源地址hash，基于用户源地址hash并将请求转发到后端服务器，后续同一个源地址请求将被转发至同一个后端web服务器。此方式当后端服务器数据量发生变化时，会导致很多用户的请求转发至新的后端服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">示例</span><br> listen web_host<br> bind 10.0.0.7:80,:8801-8810,10.0.0.7:9001-9010<br> mode http<br> balance roundrobin#上述几种算法配置仅需在balance后指定<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">hashtype consistent<span class="hljs-comment">#若采用source还需要指定hash类型，如一致性哈希算法、uri作哈希等</span></span><br> server web1 10.0.0.17:80 weight 1 check inter 3000 fall 2 rise 5<br> server web2 10.0.0.27:80 weight 2 check inter 3000 fall 2 rise 5<br></code></pre></td></tr></table></figure><h3 id="实用管理工具socat"><a href="#实用管理工具socat" class="headerlink" title="实用管理工具socat"></a>实用管理工具socat</h3><p>​对服务器动态权重和其它状态可以利用 socat工具进行调整，Socat 是 Linux 下的一个多功能的网络工</p><p>具，名字来由是Socket CAT。主要特点就是在两个数据流之间建立双向通道，且支持众多协议和链接方式，如 IP、TCP、 UDP、IPv6、Socket文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">默认是交互式的，可以通过接受标准输入的方式执行命令</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改权重，注意只针对单进程有效</span><br>echo &quot;set weight magedu-test-80/web2 2&quot; | socat stdio /var/lib/haproxy/haproxy.sock<br>echo &quot;get weight magedu-test-80/web2&quot; | socat stdio /var/lib/haproxy/haproxy.sock         2 (initial 3)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">权重为0则下线</span><br>echo &quot;set weight magedu-test-80/web1 0&quot; | socat stdio /var/lib/haproxy/haproxy.sock<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启用禁用后端服务器</span><br>echo &quot;disable server magedu-test-80/web2&quot; | socat stdio /var/lib/haproxy/haproxy.sock<br>echo &quot;enable server magedu-test-80/web2&quot; | socat stdio /var/lib/haproxy/haproxy.sock<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">针对多进程需要在haproxy.cfg配置文件中进行绑定</span><br></code></pre></td></tr></table></figure><h3 id="ACL灵活调度原理"><a href="#ACL灵活调度原理" class="headerlink" title="ACL灵活调度原理"></a>ACL灵活调度原理</h3><p>​访问控制列表Access Control Lists，是一种基于包过滤的访问控制技术，根据设定的条件对经过服务器传输的数据包进行过滤，基于请求报文头部中的源地址、源端口、目标地址、目标端口、请求方法、URL、文件后缀等信息内容进行匹配并执行进一步操作，比如允许其通过或丢弃。</p><p>​还要很多预定义的acl，详见官方文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">格式</span><br>acl   &lt;aclname&gt; &lt;criterion&gt;   [flags]     [operator]   [&lt;value&gt;]<br>acl     名称     匹配规范     匹配模式     具体操作符     操作对象类型<br></code></pre></td></tr></table></figure><p><strong>criterion匹配规范</strong></p><p>​可以理解为条件判断</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdr string，提取在一个HTTP请求报文的首部<br>hdr（[&lt;name&gt; [，&lt;occ&gt;]]）#完全匹配字符串,header的指定信息，&lt;occ&gt; 表示在多值中使用的值的出现次数<br>hdr_beg（[&lt;name&gt; [，&lt;occ&gt;]]）#前缀匹配，header中指定匹配内容的开头<br>hdr_end（[&lt;name&gt; [，&lt;occ&gt;]]）#后缀匹配，header中指定匹配内容结尾<br>hdr_dom（[&lt;name&gt; [，&lt;occ&gt;]]）#域匹配，header中的域名<br>hdr_dir（[&lt;name&gt; [，&lt;occ&gt;]]）#路径匹配，header的uri路径<br>hdr_len（[&lt;name&gt; [，&lt;occ&gt;]]）#长度匹配，header的长度匹配<br>hdr_reg（[&lt;name&gt; [，&lt;occ&gt;]]）#正则表达式匹配，自定义表达式(regex)模糊匹配<br>hdr_sub（[&lt;name&gt; [，&lt;occ&gt;]]）#子串匹配，header中的uri模糊匹配<br><br>-i 不区分大小写<br>-m 使用指定的pattern匹配方法<br>整数比较：eq、ge、gt、le、lt<br>字符比较：<br>- exact match     (-m str) :字符串必须完全匹配模式<br>- substring match (-m sub) :在提取的字符串中查找模式，如果其中任何一个被发现，ACL将匹配<br>- prefix match   (-m beg) :在提取的字符串首部中查找模式，如果其中任何一个被发现，ACL将匹配<br>- suffix match   (-m end) :将模式与提取字符串的尾部进行比较，如果其中任何一个匹配，则ACL进<br>行匹配<br>- subdir match   (-m dir) :查看提取出来的用斜线分隔&quot;/&quot;的字符串，如其中任一个匹配，则ACL进行匹配<br>- domain match   (-m dom) :查找提取的用点&quot;.&quot;分隔字符串，如果其中任何一个匹配，则ACL进行匹配<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例：报文首部字段中浏览器为curl和wget则禁止访问</span><br>acl bad_agent hdr_sub(User-Agent) -i curl wget<br>block if bad_agent<br><span class="hljs-meta prompt_">#</span><span class="language-bash">匹配用户请求报文中host的开头是不是www</span><br>acl short_form hdr_beg(host)       www<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">URL内容匹配</span><br>完整的URL为&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;&lt;frag&gt;<br>base : string#返回第一个主机头和请求的路径部分的连接，该请求从主机名开始，并在问号之前结束  即是&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">以下为base匹配方式</span><br> base     : 准确匹配<br> base_beg : prefix match<br> base_dir : subdir match<br> base_dom : domain match<br> base_end : suffix match<br> base_len : length match<br> base_reg : regex match<br> base_sub : substring match<br> <br>path : string#提取请求的URL路径，该路径从第一个斜杠开始，并在问号之前结束（无主机部分）  即是&lt;path&gt;;&lt;params&gt;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">以下为path匹配方式</span><br> path     : exact string match<br> path_beg : prefix match  #请求的URL开头，如/static、/images、/img、/css<br> path_end : suffix match  #请求的URL中资源的结尾，如 .gif .png .css .js .jpg <br>.jpeg<br> path_dom : domain match<br> path_dir : subdir match<br> path_len : length match<br> path_reg : regex match<br> path_sub : substring match<br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例：匹配部分资源</span><br> path_beg -i /haproxy-status/ #路径开头<br> path_end .jpg .jpeg .png .gif #图片后缀<br> path_reg ^/images.*\.jpeg$ #正则匹配<br> path_sub image  #路径包含image<br> <br>url : string#提取请求中的整个URL。一个典型的应用是具有预取能力的缓存，以及需要从数据库聚合多个信息并将它们保存在缓存中的网页门户入口，推荐使用path<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以匹配http协议，如只允许get和<span class="hljs-built_in">head</span></span><br>acl valid_method method GET HEAD<br>http-request deny if ! valid_method<br></code></pre></td></tr></table></figure><h3 id="根据域名调度"><a href="#根据域名调度" class="headerlink" title="根据域名调度"></a>根据域名调度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">前端</span><br>frontend magedu_http_port<br> bind 10.0.0.7:80<br> mode http<br> balance roundrobin#采用roundrobin方便测试时观察<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设定acl</span><br> acl pc_domain hdr_dom(host)      -i www.magedu.org<br> acl mobile_domain hdr_dom(host)   -i mobile.magedu.org<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">针对列表选择主机，如pc域名调度给pc网页服务器，移动端域名调度mobile网页服务器</span><br> use_backend pc_hosts   if   pc_domain<br> use_backend mobile_hosts     if   mobile_domain<br> default_backend pc_hosts   #所有ACL都不匹配,则使用的默认backend<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">后端服务器</span><br>backend mobile_hosts<br> mode http<br> server web1 10.0.0.17:80 check inter 2000 fall 3 rise 5<br> server web1 10.0.0.27:80 check inter 2000 fall 3 rise 5<br>backend pc_hosts<br> mode http<br> server web2 10.0.0.37:80 check inter 2000 fall 3 rise 5<br> server web2 10.0.0.47:80 check inter 2000 fall 3 rise 5<br></code></pre></td></tr></table></figure><h3 id="根据文件名后缀调度"><a href="#根据文件名后缀调度" class="headerlink" title="根据文件名后缀调度"></a>根据文件名后缀调度</h3><p>​相当于实现了动静分离</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">前端</span><br>frontend magedu_http_port<br> bind 10.0.0.7:80<br> mode http<br> balance roundrobin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">定义acl</span><br> acl acl_static path_end -i .jpg .jpeg .png .gif .css .js .html  <br> acl acl_php   path_end -i .php<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">选择后端主机群</span><br> use_backend mobile_hosts if acl_static<br> use_backend app_hosts if acl_php<br> default_backend pc_hosts<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同一主机可在多个后端集群中</span><br>backend mobile_hosts<br> mode http<br> server web1 10.0.0.17:80 check inter 2000 fall 3 rise 5<br> server web1 10.0.0.27:80 check inter 2000 fall 3 rise 5<br>backend pc_hosts<br> mode http<br> server web2 10.0.0.37:80 check inter 2000 fall 3 rise 5<br> server web1 10.0.0.47:80 check inter 2000 fall 3 rise 5<br>backend app_hosts<br> mode http<br> server web1 10.0.0.47:80 check inter 2000 fall 3 rise 5<br> server web2 10.0.0.57:80 check inter 2000 fall 3 rise 5<br></code></pre></td></tr></table></figure><h3 id="根据访问路径调度"><a href="#根据访问路径调度" class="headerlink" title="根据访问路径调度"></a>根据访问路径调度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">前端</span><br>frontend magedu_http_port<br> bind 10.0.0.7:80<br> mode http<br> balance roundrobin<br><span class="hljs-meta prompt_">#</span><span class="language-bash">定义acl</span><br> acl acl_static path_beg  -i /static /images /javascript        #基于路径的ACL<br> acl acl_static path_end  -i .jpg .jpeg .png .gif .css .js .html .htm  <br><span class="hljs-meta prompt_">#</span><span class="language-bash">acl同名为或关系</span><br> acl acl_app path_beg  -i /api<br><br> use_backend static_hosts if acl_static<br> use_backend app_hosts   if acl_app<br> default_backend app_hosts<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">后端</span><br>backend static_hosts<br> mode http<br> server web1 10.0.0.17 check inter 2000 fall 3 rise 5<br>backend app_hosts<br> mode http<br> server web2 10.0.0.27:80 check inter 2000 fall 3 rise 5<br></code></pre></td></tr></table></figure><h3 id="ACL四层访问控制"><a href="#ACL四层访问控制" class="headerlink" title="ACL四层访问控制"></a>ACL四层访问控制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">拒绝某网段或IP的tcp请求</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">前端</span><br>frontend web_host<br> bind 10.0.0.7:80<br> mode http<br> balance roundrobin<br> log global<br> option httplog<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">acl定义</span> <br> acl static_path path_beg  -i /static /images /javascript<br> acl invalid_src src 192.168.1.0/24 10.0.0.8<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">tcp访问控制</span><br>use_backend static_path_host if HTTP_1.1 TRUE static_path<br>tcp-request connection reject if invalid_src<br>default_backend default_web<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">后端</span><br>backend static_path_host<br> mode http<br> server web1 10.0.0.27 check inter 2000 fall 3 rise 5<br>backend default_web<br> mode http<br> server web1 10.0.0.37:80 check inter 2000 fall 3 rise 5<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>反向代理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HAproxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Keepalived的配置和应用</title>
    <link href="/2022/08/09/Keepalived%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <url>/2022/08/09/Keepalived%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>​本文总结了Keepalived的配置方法，提供了使用案例。</p><span id="more"></span><h1 id="安装文件说明"><a href="#安装文件说明" class="headerlink" title="安装文件说明"></a>安装文件说明</h1><p>​yum和apt安装软件包：keepalived</p><p>​编译安装需要前置：gcc   openssl-devel libnl3-devel net-snmp-devel</p><p>​源码包官网： <a href="https://keepalived.org/software">https://keepalived.org/software</a></p><p>​编译安装后&#x2F;etc&#x2F;下缺失配置文件，需要从 &#x2F;usr&#x2F;local&#x2F;keepalived&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf手动复制，否则无法启动</p><ul><li><p>软件包名：keepalived </p></li><li><p>主程序文件：&#x2F;usr&#x2F;sbin&#x2F;keepalived</p></li><li><p>主配置文件：&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</p></li><li><p>配置文件示例：&#x2F;usr&#x2F;share&#x2F;doc&#x2F;keepalived&#x2F;</p></li><li><p>Unit File：&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;keepalived.service</p></li><li><p>Unit File的环境配置文件：</p><p>&#x2F;etc&#x2F;sysconfig&#x2F;keepalived CentOS</p><p>&#x2F;etc&#x2F;default&#x2F;keepalived Ubuntu</p></li></ul><h1 id="Keepalived配置和使用"><a href="#Keepalived配置和使用" class="headerlink" title="Keepalived配置和使用"></a>Keepalived配置和使用</h1><p>​配置文件组成</p><p><strong>GLOBAL CONFIGURATION</strong></p><p>​Global definitions：定义邮件配置，route_id，vrrp配置，多播地址等</p><p><strong>VRRP CONFIGURATION</strong></p><p>​VRRP instance(s)：定义每个vrrp虚拟路由器</p><p><strong>LVS CONFIGURATION</strong></p><p>​Virtual server group(s)</p><p>​Virtual server(s)：LVS集群的VS和RS</p><p>可以使用man  keepalived.conf查看配置文件帮助</p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">global_defs &#123;<br> notification_email &#123;<br> root@localhost #keepalived 发生故障切换时邮件发送的目标邮箱，可以按行区分写多个<br> 9527@qq.com <br> &#125;<br> notification_email_from keepalived@localhost  #发邮件的地址<br> smtp_server 127.0.0.1     #邮件服务器地址<br> smtp_connect_timeout 30   #邮件服务器连接timeout<br> router_id ka1.example.com #每个keepalived主机唯一标识，建议使用当前主机名，但多节点重名不影响<br> vrrp_skip_check_adv_addr  #对所有通告报文都检查，会比较消耗性能，启用此配置后，如果收到的通告报文和上一个报文是同一个路由器，则跳过检查，默认值为全检查<br> vrrp_strict #严格遵守VRRP协议,启用此项后以下状况将无法启动服务:1.无VIP地址 2.配置了单播邻居 3.在VRRP版本2中有IPv6地址，开启动此项并且没有配置vrrp_iptables时会自动开启iptables防火墙规则，默认导致VIP无法访问,建议不加此项配置<br> vrrp_garp_interval 0 #gratuitous ARP messages 报文发送延迟，0表示不延迟<br> vrrp_gna_interval 0  #unsolicited NA messages （不请自来）消息发送延迟<br> vrrp_mcast_group4 224.0.0.18 #指定组播IP地址范围：224.0.0.0到239.255.255.255,默认值：224.0.0.18<br></code></pre></td></tr></table></figure><h3 id="虚拟路由配置"><a href="#虚拟路由配置" class="headerlink" title="虚拟路由配置"></a>虚拟路由配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">vrrp_instance &lt;STRING&gt; &#123; #&lt;String&gt;为vrrp的实例名,一般为业务名称<br> 配置参数<br> ......<br> &#125;<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置参数：</span><br>state MASTER|BACKUP#当前节点在此虚拟路由器上的初始状态，状态为MASTER或者BACKUP<br>interface IFACE_NAME #绑定为当前虚拟路由器使用的物理接口，如：eth0,bond0,br0,可以和VIP不在一个网卡<br>virtual_router_id VRID #每个虚拟路由器惟一标识，范围：0-255，每个虚拟路由器此值必须唯一，否则服务无法启动，同属一个虚拟路由器的多个keepalived节点必须相同,务必要确认在同一网络中此值必须唯一<br>priority 100 #当前物理节点在此虚拟路由器的优先级，范围：1-254，值越大优先级越高,每个Keepalived主机节点此值不同<br>advert_int 1 #vrrp通告的时间间隔，默认1s<br>authentication &#123; #认证机制<br> auth_type AH|PASS   #AH为IPSEC认证(不推荐),PASS为简单密码(建议使用)<br> auth_pass &lt;PASSWORD&gt; #预共享密钥，仅前8位有效，同一个虚拟路由器的多个keepalived节点必须一样<br>&#125;<br>virtual_ipaddress &#123; #虚拟IP,生产环境可能指定上百个IP地址<br> &lt;IPADDR&gt;/&lt;MASK&gt; brd &lt;IPADDR&gt; dev &lt;STRING&gt; scope &lt;SCOPE&gt; label &lt;LABEL&gt;<br> 192.168.200.100 #指定VIP，不指定网卡，默认为eth0,注意：不指定/prefix,默认为/32<br> 192.168.200.101/24 dev eth1   #指定VIP的网卡，建议和interface指令指定的岗卡不在一个网卡<br> 192.168.200.102/24 dev eth2 label eth2:1 #指定VIP的网卡label <br>&#125;<br>track_interface &#123; #配置监控网络接口，一旦出现故障，则转为FAULT状态实现地址转移<br> eth0<br> eth1<br> …<br>&#125;<br><br>include /etc/keepalived/conf.d/*.conf   #将VRRP相关配置放在子配置文件中<br></code></pre></td></tr></table></figure><h3 id="单主架构"><a href="#单主架构" class="headerlink" title="单主架构"></a>单主架构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">master配置</span><br>global_defs &#123;<br> notification_email &#123;<br> root@localhost #keepalived 发生故障时邮件发送给本机的root<br> &#125;<br> notification_email_from keepalived@localhost<br> smtp_server 127.0.0.1<br> smtp_connect_timeout 30<br> router_id ka1.example.com#本机Keepalived服务器的名称，同一集群中方便区分<br> vrrp_skip_check_adv_addr #所有报文都检查比较消耗性能，此配置为如果收到的报文和上一个报文是同一个路由器则跳过检查报文中的源地址<br> vrrp_garp_interval 0 #ARP报文发送延迟<br> vrrp_gna_interval 0 #消息发送延迟<br> vrrp_mcast_group4 224.0.100.100 #默认组播IP地址，可指定组播范围：224.0.0.0到239.255.255.255<br> &#125;<br>vrrp_instance VI_1 &#123;<br> state MASTER           #在另一个结点上为BACKUP<br> interface eth0<br> virtual_router_id 66 #每个虚拟路由器必须唯一，同属一个虚拟路由器的多个keepalived节点必须相同<br> priority 100           #需要比备用的高<br> advert_int 1<br> authentication &#123;<br>   auth_type PASS       #预共享密钥认证<br>   auth_pass 12345678<br> &#125;<br> virtual_ipaddress &#123;<br>    10.0.0.10 dev eth0 label eth0:0#虚拟ip设置，带标签<br> &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">backup配置，可直接复制上方配置作少量修改</span><br>global_defs &#123;<br> notification_email &#123;<br> root@localhost<br> &#125;<br> notification_email_from keepalived@localhost<br> smtp_server 127.0.0.1<br> smtp_connect_timeout 30<br> router_id ka2.example.com         #需要修改，方便区分<br> vrrp_skip_check_adv_addr <br><span class="hljs-meta prompt_">  #</span><span class="language-bash">vrrp_strict</span> <br> vrrp_garp_interval 0<br> vrrp_gna_interval 0<br> vrrp_mcast_group4 224.0.100.100<br>&#125;<br>vrrp_instance VI_1 &#123;<br> state BACKUP #修改此行，标注为备用节点<br> interface eth0<br> virtual_router_id 66 <br> priority 80 #修改此行，需要比主节点低<br> advert_int 1<br> authentication &#123;<br>   auth_type PASS<br>   auth_pass 12345678<br> &#125;<br> virtual_ipaddress &#123;<br>    10.0.0.10 dev eth0 label eth0:0<br> &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认为抢占模式preempt，即当高优先级的主机恢复在线后，会抢占低优先级的主机的master角色，造成网络抖动，建议设置为非抢占模式 nopreempt ，即高优先级主机恢复后，并不会抢占低优先级主机的master角。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">要关闭 VIP抢占，必须将各 keepalived 服务器state配置为BACKUP</span><br></code></pre></td></tr></table></figure><h3 id="多主架构"><a href="#多主架构" class="headerlink" title="多主架构"></a>多主架构</h3><p>​master&#x2F;slave的单主架构，同一时间只有一个Keepalived对外提供服务，此主机繁忙，而另一台主机却</p><p>很空闲，利用率低下，可以使用master&#x2F;master的双主架构，解决此问题。即将两个或以上VIP分别运行在不同的keepalived服务器，以实现服务器并行提供web访问的目的，提高服务器资源利用率。</p><p>​以下是双主架构，一台主机有2个vip，2主机互为备用服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">依然复制上方配置，仅需少量修改</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以下也可分别写入子配置文件中</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">主机1</span><br>global_defs &#123;<br> notification_email &#123;<br> root@wangxiaochun.com<br> &#125;<br> notification_email_from keepalived@localhost<br> smtp_server 127.0.0.1<br> smtp_connect_timeout 30<br> router_id ka1.magedu.org<br> vrrp_mcast_group4 224.0.100.100<br>&#125;<br>vrrp_instance VI_1 &#123;<br> state MASTER   #另一个主机上为BACKUP<br> interface eth0<br> virtual_router_id 66 #集群1<br> priority 100   <br> advert_int 1<br> authentication &#123;<br> auth_type PASS<br> auth_pass 12345678<br> &#125;<br> virtual_ipaddress &#123;<br> 10.0.0.10/24 dev eth0 label eth0:1 #指定VIP1<br> &#125;<br>&#125;<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">仿照集群1编写</span><br>vrrp_instance VI_2 &#123;           <br> state BACKUP   #在另一个主机上为MASTER<br> interface eth0<br> virtual_router_id 88 #集群2<br> priority 80     #注意优先值<br> advert_int 1<br> authentication &#123;<br> auth_type PASS<br> auth_pass 12345678<br> &#125;<br> virtual_ipaddress &#123;<br> 10.0.0.20/24 dev eth0 label eth0:1  #指定VIP2<br> &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">主机2同上，仅有以下行不同</span><br>router_id ka2.magedu.org#方便区分主机<br>vrrp_instance VI_1 &#123;<br>...<br>state BACKUP#在集群1中备用<br>priority 80<br>...<br>&#125;<br>vrrp_instance VI_1 &#123;<br>...<br>state MASTER#集群2中工作<br>priority 100<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实现服务器高可用"><a href="#实现服务器高可用" class="headerlink" title="实现服务器高可用"></a>实现服务器高可用</h1><h3 id="虚拟服务器配置"><a href="#虚拟服务器配置" class="headerlink" title="虚拟服务器配置"></a>虚拟服务器配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">实际使用在上文的配置块后加入以下配置</span><br>virtual_server IP port &#123;<br>   ...<br> real_server &#123;<br> ...<br> &#125;<br> real_server &#123;<br> ...<br> &#125;<br> …<br>&#125;<br><br>virtual_server IP port     #定义虚拟主机IP地址及其端口<br>virtual_server fwmark int #ipvs的防火墙打标，实现基于防火墙的负载均衡集群<br>virtual_server group string #使用虚拟服务器组<br><br>virtual_server IP port &#123; #VIP和PORT<br> delay_loop &lt;INT&gt; #检查后端服务器的时间间隔<br> lb_algo rr|wrr|lc|wlc|lblc|sh|dh #定义调度算法<br> lb_kind NAT|DR|TUN #集群的类型,注意要大写<br> persistence_timeout &lt;INT&gt; #持久连接时长<br> protocol TCP|UDP|SCTP #指定服务协议,一般为TCP<br> sorry_server &lt;IPADDR&gt; &lt;PORT&gt; #所有RS故障时，备用服务器地址<br> <br> real_server &lt;IPADDR&gt; &lt;PORT&gt; &#123;          #RS的IP和PORT<br> weight &lt;INT&gt;   #RS权重<br> notify_up &lt;STRING&gt;|&lt;QUOTED-STRING&gt;  #RS上线通知脚本，需要自己编写，一般为邮件通知<br>notify_down &lt;STRING&gt;|&lt;QUOTED-STRING&gt; #RS下线通知脚本<br> HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK &#123; ... &#125; #定义当前主机健康状态检测方法<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="应用层监测"><a href="#应用层监测" class="headerlink" title="应用层监测"></a>应用层监测</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在上文real_server配置块中</span><br>HTTP_GET|SSL_GET &#123;<br> url &#123;<br>   path &lt;URL_PATH&gt; #定义要监控的URL<br>   status_code &lt;INT&gt; #判断上述检测机制为健康状态的响应码，一般为 200<br> &#125;<br> connect_timeout &lt;INTEGER&gt; #客户端请求的超时时长, 相当于haproxy的timeout server<br> nb_get_retry &lt;INT&gt; #重试次数<br> delay_before_retry &lt;INT&gt; #重试之前的延迟时长<br> connect_ip &lt;IP ADDRESS&gt; #向当前RS哪个IP地址发起健康状态检测请求<br> connect_port &lt;PORT&gt; #向当前RS的哪个PORT发起健康状态检测请求<br> bindto &lt;IP ADDRESS&gt; #向当前RS发出健康状态检测请求时使用的源地址<br> bind_port &lt;PORT&gt; #向当前RS发出健康状态检测请求时使用的源端口<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="传输层TCP监测"><a href="#传输层TCP监测" class="headerlink" title="传输层TCP监测"></a>传输层TCP监测</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">TCP_CHECK &#123;<br>     connect_ip &lt;IP ADDRESS&gt; #向当前RS的哪个IP地址发起健康状态检测请求<br>     connect_port &lt;PORT&gt; #向当前RS的哪个PORT发起健康状态检测请求<br>     bindto &lt;IP ADDRESS&gt; #发出健康状态检测请求时使用的源地址<br>     bind_port &lt;PORT&gt; #发出健康状态检测请求时使用的源端口<br>     connect_timeout &lt;INTEGER&gt; #客户端请求的超时时长, 等于haproxy的timeout server   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LVS高可用"><a href="#LVS高可用" class="headerlink" title="LVS高可用"></a>LVS高可用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">LVS环境准备、配置过程省略</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备两台RS网页内容 10.0.0.7为rs1.test.com10.0.0.17为rs1.test.com     两台Keepalived主机上sorry server页面分别为Sorry Server on ka1    Sorry Server on ka2</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可沿用上文部分配置</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">节点1</span><br>global_defs &#123;<br> notification_email &#123;<br> root@localhost<br> &#125;<br> notification_email_from keepalived@localhost<br> smtp_server 127.0.0.1<br> smtp_connect_timeout 30<br> router_id ka1.magedu.org<br> vrrp_mcast_group4 224.0.100.100<br> &#125;<br>vrrp_instance VI_1 &#123;<br> state MASTER<br> interface eth0<br> virtual_router_id 66<br> priority 100<br> advert_int 1<br> authentication &#123;<br> auth_type PASS<br> auth_pass 123456<br> &#125;<br> virtual_ipaddress &#123;<br> 10.0.0.10/24 dev eth0 label eth0:1<br> &#125;<br> &#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##################以上与之前的相同#########################################################</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">触发通知脚本，脚本为根据后面参数发不同的邮件</span><br>notify_master &quot;/etc/keepalived/notify.sh master&quot;<br>notify_backup &quot;/etc/keepalived/notify.sh backup&quot;<br>notify_fault &quot;/etc/keepalived/notify.sh fault&quot;<br><br>virtual_server 10.0.0.10 80 &#123;<br> delay_loop 3<br> lb_algo rr<br> lb_kind DR<br> protocol TCP<br> sorry_server 127.0.0.1 80#本机作为sorry server<br> real_server 10.0.0.7 80 &#123;<br> weight 1<br>  HTTP_GET &#123;               #应用层检测<br>  url &#123;<br> path /<br> status_code 200#设定认为健康的返回状态码为200<br> &#125;<br> connect_timeout 1#客户端请求超时时长1秒<br> nb_get_retry 3#最多重试3次<br>  delay_before_retry 1#重试前的延迟<br> &#125;<br> &#125;<br> real_server 10.0.0.17 80 &#123;<br> weight 1<br>       TCP_CHECK &#123;              #另一台主机使用TCP检测<br>       connect_timeout 5<br>       nb_get_retry 3<br>       delay_before_retry 3<br>            connect_port 80#向80端口发起健康状态检测请求<br>     &#125;<br> &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">节点2可直接复制节点1配置，仅需修改以下3行</span><br>global_defs &#123;<br>...<br>router_id ka2.magedu.org<br>...<br>&#125;<br>vrrp_instance VI_1 &#123;<br>...<br>state BACKUP <br> ...<br>priority 80 <br>...<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试</span><br>[root@centos8 ~]#curl 10.0.0.10<br>rs1.test.com<br>[root@centos8 ~]#curl 10.0.0.10<br>rs2.test.com<br><span class="hljs-meta prompt_">#</span><span class="language-bash">自动生成IPVS规则</span><br>[root@ka1 ~]#ipvsadm -Ln<br>IP Virtual Server version 1.2.1 (size=4096)<br>Prot LocalAddress:Port Scheduler Flags<br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br>TCP  10.0.0.10:80 rr<br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">10.0.0.7:80                 Route   1      0          0</span>         <br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">10.0.0.17:80                 Route   1      0          0</span>  <br><span class="hljs-meta prompt_">  </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一台RS1故障，检测到故障后即使采用rr算法也不会调度到RS1上</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">实际原理是修改了IPVS规则，删除了RS1</span><br>[root@rs1 ~]#systemctl stop httpd<br>[root@centos8 ~]#curl 10.0.0.10<br>rs2.test.com<br>[root@centos8 ~]#curl 10.0.0.10<br>rs2.test.com<br>[root@rs2 ~]#systemctl stop httpd<br>[root@centos8 ~]#curl 10.0.0.10<br>Sorry Server on ka1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ka1故障，ka2自动获得VIP</span><br>[root@ka1 ~]#killall keepalived<br>[root@ka2 ~]#hostname -I<br>10.0.0.18 10.0.0.10<br>[root@centos8 ~]#curl 10.0.0.10<br>Sorry Server on ka2<br></code></pre></td></tr></table></figure><h3 id="实现其它应用的高可用"><a href="#实现其它应用的高可用" class="headerlink" title="实现其它应用的高可用"></a>实现其它应用的高可用</h3><p>​想要配合其它应用实现高可用，需要使用vrrp_script：自定义资源监控脚本。注意脚本定义一定要放在调用部分之前。</p><p>​定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">vrrp_script &lt;SCRIPT_NAME&gt; &#123;<br> script &lt;STRING&gt;|&lt;QUOTED-STRING&gt; #shell命令或脚本路径(注意执行权限)<br>     interval &lt;INTEGER&gt; #间隔时间，单位为秒，默认1秒<br>     timeout &lt;INTEGER&gt; #超时时间<br>     weight &lt;INTEGER:-254..254&gt; #默认为0,如果设置此值为负数，当上面脚本返回值为非0时，会将此值与本节点权重相加可以降低本节点权重，即表示fall. 如果是正数，当脚本返回值为0，会将此值与本节点权重相加可以提高本节点权重，即表示 rise.通常使用负值<br>     fall &lt;INTEGER&gt;       #执行脚本连续几次都失败,则转换为失败，建议设为2次以上<br>     rise &lt;INTEGER&gt;       #执行脚本连续几次都成功，把服务器从失败标记为成功<br>     user USERNAME [GROUPNAME] #执行监测脚本的用户或组      <br>     init_fail         #设置默认标记为失败状态，监测成功之后再转换为成功状态<br>&#125;<br></code></pre></td></tr></table></figure><p>​调用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">vrrp_instance VI_1 &#123;<br> …<br> track_script &#123;<br> <span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT_NAME</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT_NAME2</span>&gt;</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例：实现Nginx高可用"><a href="#案例：实现Nginx高可用" class="headerlink" title="案例：实现Nginx高可用"></a>案例：实现Nginx高可用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">两台Nginx配置如下</span><br>http &#123;<br> upstream websrvs &#123;<br> server 10.0.0.7:80 weight=1;<br> server 10.0.0.17:80 weight=1;<br> &#125;<br> server &#123;<br> listen 80;<br> location / &#123;<br> proxy_pass http://websrvs/;<br>     &#125;<br> &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">节点1Keepalived配置</span><br>global_defs &#123;<br> notification_email &#123;<br> root@localhost<br> &#125;<br> notification_email_from kaadmin@localhost<br> smtp_server 127.0.0.1<br> smtp_connect_timeout 30<br> router_id ka1.magedu.org <br> vrrp_mcast_group4 224.0.100.100<br>&#125;<br>vrrp_script check_nginx &#123;<br>   script &quot;/usr/bin/killall -0 nginx&quot;   #发送检查信号<br>   interval 1<br>   weight -30#故障则本节点优先值-30<br>   fall 3#3次返回非0值认为故障<br>   rise 5#连续5次检测为健康则认为修复<br>   timeout 2 <br>   &#125;<br>vrrp_instance VI_1 &#123;<br> state MASTER <br> interface eth0<br> virtual_router_id 66<br> priority 100 <br> advert_int 1<br> authentication &#123;<br> auth_type PASS<br> auth_pass 123456<br> &#125;<br> virtual_ipaddress &#123;<br> 10.0.0.10/24 dev eth0 label eth0:1<br> &#125;<br> track_interface &#123;<br> eth0<br> &#125;<br> notify_master &quot;/etc/keepalived/notify.sh master&quot;<br> notify_backup &quot;/etc/keepalived/notify.sh backup&quot;<br> notify_fault &quot;/etc/keepalived/notify.sh fault&quot;<br> track_script &#123;#调用脚本<br> check_nginx<br> &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">节点2可直接复制节点1配置，依然只修改上一个案例3行</span><br>router_id ka2.magedu.org<br>state BACKUP<br>priority 80<br></code></pre></td></tr></table></figure><h3 id="案例：Mysql高可用"><a href="#案例：Mysql高可用" class="headerlink" title="案例：Mysql高可用"></a>案例：Mysql高可用</h3><p>​Mysql采用多主架构，配合Keepalived实现高可用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">与上个案例类似，更换脚本即可</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Mysql多主架构搭建过程参考往期文章</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">健康性检查脚本check_mysql.sh内容</span><br>mysqladmin -uroot -p123456  ping &amp;&gt; /dev/null<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">节点1Keepalived配置</span><br>global_defs &#123;<br> notification_email &#123;<br> root@localhost<br> &#125;<br> notification_email_from kaadmin@localhost<br> smtp_server 127.0.0.1<br> smtp_connect_timeout 30<br> router_id ka1.magedu.org <br> vrrp_mcast_group4 224.0.100.100<br>&#125;<br>vrrp_script check_mysql &#123; <br>   script &quot;/etc/keepalived/check_mysql.sh&quot;#可先写成shell脚本<br>   interval 1<br>   weight -30<br>   fall 3<br>   rise 2<br>   timeout 2 <br>   &#125;<br>vrrp_instance VI_1 &#123;<br> state MASTER <br> interface eth0<br> virtual_router_id 66<br> priority 100 <br> advert_int 1<br> authentication &#123;<br> auth_type PASS<br> auth_pass 123456<br> &#125;<br> virtual_ipaddress &#123;<br> 10.0.0.10/24 dev eth0 label eth0:1<br> &#125;<br> track_interface &#123;<br> eth0<br> &#125;<br> notify_master &quot;/etc/keepalived/notify.sh master&quot;<br> notify_backup &quot;/etc/keepalived/notify.sh backup&quot;<br> notify_fault &quot;/etc/keepalived/notify.sh fault&quot;<br>   track_script &#123;#调用脚本<br>       check_mysql <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>高可用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LVS原理和配置</title>
    <link href="/2022/08/09/LVS%E5%8E%9F%E7%90%86%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/08/09/LVS%E5%8E%9F%E7%90%86%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>​本文主要总结了LVS几种工作模式原理和调度算法，LVS的配置示例。</p><span id="more"></span><p>​Cluster：集群,为解决某个特定问题将多台计算机组合起来形成的单个系统。分为三种类型：LB，Load Balancing，负载均衡，多个主机组成，每个主机只承担一部分访问请求。HA：High Availiablity，高可用，避免单点失败。HPC：High-performance computing，高性能。</p><p>​最常用的四层调度软件就是LVS，七层常用的为nginx和HAproxy</p><h1 id="工作模式和调度算法"><a href="#工作模式和调度算法" class="headerlink" title="工作模式和调度算法"></a>工作模式和调度算法</h1><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>​LVS：Linux Virtual Server，是内核级功能，工作在INPUT链的位置，将发往INPUT的流量进行处理。根据请求报文的目标IP和目标协议及端口将其调度转发至某RS（real server），根据调度算法来挑选RS。</p><p>​客户端访问流程：CIP &lt;–&gt; VIP （LVS） DIP &lt;–&gt; RIP </p><p>​采用不同的工作模式，LVS对数据报文的修改不同。采用不同调度算法，分配主机的方式不同。</p><ul><li>lvs-nat：修改请求报文的目标IP,多目标IP的DNAT</li><li>lvs-dr：操纵封装新的MAC地址</li><li>lvs-tun：在原请求IP报文之外新加一个IP首部</li><li>lvs-fullnat：修改请求报文的源和目标IP</li></ul><h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h3><p>​VS：Virtual Server，Director Server(DS), Dispatcher(调度器)，Load Balancer</p><p>​RS：Real Server(lvs), upstream server(nginx), backend server(haproxy)</p><p>​CIP：Client IP</p><p>​VIP：Virtual serve IP VS的外网IP</p><p>​DIP：Director IP VS的内网IP</p><p>​RIP：Real server IP </p><h3 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h3><p>​lvs-nat：本质是多目标IP的DNAT，通过将请求报文中的目标地址和目标端口修改为某挑出的RS的RIP和PORT实现转发</p><p>需要注意：</p><ol><li>​RIP和DIP应在同一个IP网络，且应使用私网地址；RS的网关要指向DIP</li><li>​请求报文和响应报文都必须经VS修改，压力较大</li><li>​支持端口映射，可修改请求报文的目标PORT</li><li>​VS必须是Linux系统，RS可以是任意OS系统</li></ol><p><img src="image-20220809135040101.png" alt="image-20220809135040101"></p><h3 id="DR模式（最常用）"><a href="#DR模式（最常用）" class="headerlink" title="DR模式（最常用）"></a>DR模式（最常用）</h3><p>​LVS-DR：Direct Routing，直接路由，LVS默认模式,应用最广泛,通过为请求报文重新封装一个MAC首部</p><p>进行转发，源MAC是DIP所在的接口的MAC，目标MAC是某挑选出的RS的RIP所在接口的MAC地址；源</p><p>IP&#x2F;PORT，以及目标IP&#x2F;PORT均保持不变。</p><p>需要注意：</p><ol><li><div class="code-wrapper"><pre><code class="hljs">    Director和各RS都配置有VIP</code></pre></div></li><li>​ RS的RIP可以使用私网地址，也可以是公网地址</li><li>​RS和Director要在同一个物理网络</li><li>​请求报文要经由Director，但响应报文不经由Director，而由RS直接发往Client</li><li>​不支持端口映射（端口不能修改）</li><li>​无需开启 ip_forward</li></ol><p><img src="image-20220809135804652.png" alt="image-20220809135804652"></p><h3 id="TUN（tunnel）模式"><a href="#TUN（tunnel）模式" class="headerlink" title="TUN（tunnel）模式"></a>TUN（tunnel）模式</h3><p>​转发方式：不修改请求报文的IP首部（源IP为CIP，目标IP为VIP），而在原IP报文之外再封装一个IP首部</p><p>（源IP是DIP，目标IP是RIP），将报文发往挑选出的目标RS；RS直接响应给客户端（源IP是VIP，目标IP</p><p>是CIP）</p><p>需要注意：</p><ol><li>RIP和DIP可以不处于同一物理网络中，RS的网关一般不能指向DIP,且RIP可以和公网通信。也就是说集群节点可以跨互联网实现。DIP, VIP, RIP可以是公网地址</li><li>RealServer的tun接口上需要配置VIP地址，以便接收director转发过来的数据包，以及作为响应的报文源IP</li><li>Director转发给RealServer时需要借助隧道，隧道外层的IP头部的源IP是DIP，目标IP是RIP，而RealServer响应给客户端的IP头部是根据隧道内层的IP头分析得到的，源IP是VIP，目标IP是CIP</li><li>请求报文要经由Director，但响应不经由Director,响应由RealServer自己完成不支持端口映射</li><li>RS的OS须支持隧道功能</li></ol><p><img src="image-20220809140808737.png" alt="image-20220809140808737"></p><p><img src="image-20220809141130114.png" alt="image-20220809141130114"></p><h3 id="静态调度算法"><a href="#静态调度算法" class="headerlink" title="静态调度算法"></a>静态调度算法</h3><p>​仅根据算法本身进行调度：</p><p>1、RR：roundrobin，轮询,较常用</p><p>2、WRR：Weighted RR，加权轮询,较常用</p><p>3、SH：Source Hashing，实现session sticky，源IP地址hash；将来自于同一个IP地址的请求始终发往</p><p>第一次挑中的RS，从而实现会话绑定</p><p>4、DH：Destination Hashing；目标地址哈希，第一次轮询调度至RS，后续将发往同一个目标地址的</p><p>请求始终转发至第一次挑中的RS，典型使用场景是正向代理缓存场景中的负载均衡,如: Web缓存</p><h3 id="动态调度算法"><a href="#动态调度算法" class="headerlink" title="动态调度算法"></a>动态调度算法</h3><p>​主要根据每RS当前的负载状态及调度算法进行调度，不同的算法采用不同公式计算Overhead，value 较小的RS将被调度</p><p>1、LC：least connections 最少链接算法。适用于长连接应用。</p><p>公式为Overhead&#x3D;activeconns（活动链接数）*256+inactiveconns（不活跃链接数）</p><p>2、WLC：Weighted LC，加权重的LC，默认调度方法,较常用。</p><p>公式为Overhead&#x3D;(activeconns*256+inactiveconns)&#x2F;weight</p><p>3、SED：Shortest Expection Delay，初始连接高权重优先,只检查活动连接,而不考虑非活动连接</p><p>公式为Overhead&#x3D;(activeconns+1)*256&#x2F;weight</p><h1 id="LVS配置"><a href="#LVS配置" class="headerlink" title="LVS配置"></a>LVS配置</h1><h3 id="管理软件和命令"><a href="#管理软件和命令" class="headerlink" title="管理软件和命令"></a>管理软件和命令</h3><p>​使用程序包为<strong>ipvsadm</strong></p><p>​提供Unit File:为ipvsadm.service，主程序&#x2F;usr&#x2F;sbin&#x2F;ipvsadm，规则保存工具&#x2F;usr&#x2F;sbin&#x2F;ipvsadm-save，规则重载工具&#x2F;usr&#x2F;sbin&#x2F;ipvsadm-restore</p><p>​配置文件：&#x2F;etc&#x2F;sysconfig&#x2F;ipvsadm-config</p><p>​ipvs调度规则文件：&#x2F;etc&#x2F;sysconfig&#x2F;ipvsadm</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">管理集群服务</span><br>ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]] [-M netmask] <br>[--pe persistence_engine] [-b sched-flags]<br>-t: TCP协议的端口，VIP:TCP_PORT 如: -t 10.0.0.100:80<br>    -u: UDP协议的端口，VIP:UDP_PORT<br>    -f：firewall MARK，标记，一个数字<br>    lvs类型：<br>    -g: gateway, dr类型，默认<br>    -i: ipip, tun类型<br>    -m: masquerade, nat类型        <br>-w weight：权重<br>ipvsadm -D -t|u|f service-address #删除<br>ipvsadm –C #清空<br>ipvsadm –R #重载,相当于ipvsadm-restore<br>ipvsadm -S [-n] #保存,相当于ipvsadm-save<br><span class="hljs-meta prompt_">#</span><span class="language-bash">管理集群中的RS</span><br>ipvsadm -a|e -t|u|f service-address -r server-address [-g|i|m] [-w weight]  <br>ipvsadm -d -t|u|f service-address -r server-address<br>ipvsadm -L|l [options]<br>ipvsadm -Z [-t|u|f service-address]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">保存</span><br>ipvsadm-save &gt; /PATH/TO/IPVSADM_FILE<br>ipvsadm -S &gt; /PATH/TO/IPVSADM_FILE<br>systemctl stop ipvsadm.service  #会自动保存规则至/etc/sysconfig/ipvsadm<br><span class="hljs-meta prompt_">#</span><span class="language-bash">加载：</span> <br>ipvsadm-restore &lt; /PATH/FROM/IPVSADM_FILE<br>systemctl  start ipvsadm.service  #会自动加载/etc/sysconfig/ipvsadm中规则<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例</span><br>ipvsadm -A -t 10.0.0.100:80 -s wrr#建立集群，使用tcp协议，wrr算法，vip10.0.0.180<br>ipvsadm -a -t 10.0.0.100:80 -r 10.0.0.7:80 -m -w 3    #该集群添加RS，工作模式NAT，权重3<br></code></pre></td></tr></table></figure><h3 id="DR模式配置案例"><a href="#DR模式配置案例" class="headerlink" title="DR模式配置案例"></a>DR模式配置案例</h3><p>​<img src="image-20220809145329583.png" alt="image-20220809145329583"></p><p>DR模型中各主机上均需要配置VIP，解决地址冲突的方式有三种：</p><p>(1) 在前端网关做静态绑定</p><p>(2) 在各RS使用arptables</p><p>(3) 在各RS修改内核参数，来限制arp响应和通告的级别</p><p><strong>限制响应级别：</strong>arp_ignore</p><p>0：默认值，表示可使用本地任意接口上配置的任意地址进行响应</p><p>1：仅在请求的目标IP配置在本地主机的接收到请求报文的接口上时，才给予响应</p><p><strong>限制通告级别：</strong>arp_announce</p><p>0：默认值，把本机所有接口的所有信息向每个接口的网络进行通告</p><p>1：尽量避免将接口信息向非直接连接网络进行通告</p><p>2：必须避免将接口信息向非本网络进行通告</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">客户端和路由配置为图中IP，由一台主机添加1块网卡、开启转发充当路由，过程省略</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">两台RS和VS配置网关为图中路由</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">两台RS配置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">RS准备网页</span><br>hostname -I &gt; /var/www/html/index.html#访问将会显示RS的IP<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解决地址冲突问题，关闭通告</span><br>echo 1 &gt;   /proc/sys/net/ipv4/conf/all/arp_ignore<br>echo 2 &gt;   /proc/sys/net/ipv4/conf/all/arp_announce <br>echo 1 &gt;   /proc/sys/net/ipv4/conf/lo/arp_ignore<br>echo 2 &gt;   /proc/sys/net/ipv4/conf/lo/arp_announce<br>ifconfig lo:1 10.0.0.100/32#设置虚拟IP，响应报文的源地址<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">VS配置</span><br>ifconfig lo:1 10.0.0.100/32#设置虚拟IP，同上<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加规则</span><br>ipvsadm -A -t 10.0.0.100:80 -s rr<br>ipvsadm -a -t 10.0.0.100:80 -r 10.0.0.7:80 -g <br>ipvsadm -a -t 10.0.0.100:80 -r 10.0.0.17:80 -g <br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看规则</span><br>ipvsadm -Ln<br>IP Virtual Server version 1.2.1 (size=4096)<br>Prot LocalAddress:Port Scheduler Flags<br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br>TCP  10.0.0.100:80 rr<br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">10.0.0.7:80                 Route   1      0          0</span>         <br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">10.0.0.17:80                 Route   1      0          0</span>    <br></code></pre></td></tr></table></figure><p>测试访问</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@internet ~]</span>#curl <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">100</span><br><span class="hljs-number">10.0.0.17</span> <br><span class="hljs-string">[root@internet ~]</span>#curl <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">100</span><br><span class="hljs-number">10.0.0.7</span><br></code></pre></td></tr></table></figure><h3 id="LVS缺陷"><a href="#LVS缺陷" class="headerlink" title="LVS缺陷"></a>LVS缺陷</h3><ul><li>​Director不可用，整个系统将不可用</li><li>​某RS不可用时，Director依然会调度请求至此RS</li></ul><p>因此需要Keepalived等软件实现高可用性</p>]]></content>
    
    
    <categories>
      
      <category>反向代理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LVS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx反向代理和web服务配置</title>
    <link href="/2022/08/08/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8Cweb%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/08/08/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8Cweb%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>​主要总结了Nginx提供web服务、实现四层和七层反向代理的配置方法。</p><span id="more"></span><h1 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h1><ul><li>主配置文件：nginx.conf</li><li>子配置文件: include conf.d&#x2F;*.conf</li><li>fastcgi， uwsgi，scgi 等协议相关的配置文件</li><li>mime.types：支持的mime类型，MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型，MIME消息能包含文本、图像、音频、视频以及其他应用程序专用的数据，是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</li></ul><h3 id="配置文件格式"><a href="#配置文件格式" class="headerlink" title="配置文件格式"></a>配置文件格式</h3><ul><li>配置文件由指令与指令块构成</li><li>每条指令以;分号结尾，指令与值之间以空格符号分隔</li><li>可以将多条指令放在同一行,用分号分隔即可,但可读性差,不推荐</li><li>指令块以{ }大括号将多条指令组织在一起,且可以嵌套指令块</li><li>include语句允许组合多个配置文件以提升可维护性</li><li>使用#符号添加注释，提高可读性</li><li>使用$符号使用变量</li><li>部分指令的参数支持正则表达式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">主配置文件可分为event、http、mail、stream四部分</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">全局配置端，对全局生效，主要设置nginx的启动用户/组，启动的工作进程数量，工作模式，Nginx的PID</span><br>路径，日志路径等。<br>main block：主配置段，即全局配置段，对http,mail都有效<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">事件驱动相关的配置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">events设置快，主要影响nginx服务器与用户的网络连接，比如是否允许同时接受多个网络连接，使用哪种事件驱动模型处理请求，每个工作进程可以同时支持的最大连接数，是否开启对多工作进程下的网络连接进行序列化等。</span><br>event &#123;<br> ...<br>&#125;   <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">http/https 协议相关配置段</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">http块是Nginx服务器配置中的重要部分，缓存、代理和日志格式定义等绝大多数功能和第三方模块都可以在这设置，http块可以包含多个server块，而一个server块中又可以包含多个location块，server块可以配置文件引入、MIME-Type定义、日志自定义、是否启用sendfile、连接超时时间和单个链接的请求上限等。</span><br>http &#123;<br>   include       mime.types;<br>   default_type application/octet-stream;<br>   sendfile       on;#作为web服务器的时候打开sendfile加快静态文件传输，指定是否使用sendfile系统调用来传输文件,sendfile系统调用在两个文件描述符之间直接传递数据，从而避免了数据在内核缓冲区和用户缓冲区之间的拷贝，被称之为零拷贝。<br>   keepalive_timeout  65;  #长连接超时时间，单位是秒<br>   server &#123; #设置一个虚拟机主机，可以包含自己的全局快，同时也可以包含多个location模块。比如本虚拟机监听的端口、本虚拟机的名称和IP配置，多个server 可以使用一个端口，比如都使用80端口提供web服务<br>       listen       80;  #配置server监听的端口<br>       server_name localhost; #本server的名称，当访问此名称的时候nginx会调用当前serevr内部的配置进程匹配。<br>       location / &#123; #location是server的一个指令，为nginx服务器提供多且灵活的指令，基于nginx接受到的请求字符串，对用户请求的UIL进行匹配，并对特定的指令进行处理，实现地址重定向、数据缓存和应答控制等功能。<br>           root   html; #相当于默认页面的目录名称，默认是安装目录的相对路径，可以使用绝对路径配置。<br>           index index.html index.htm; #默认的页面文件名称<br><br>       &#125;<br>       error_page   500 502 503 504 /50x.html; #错误页面的文件名称<br>       location = /50x.html &#123; #location处理对应的不同错误码的页面定义到/50x.html，根为server中定义的目录。<br>           root   html;  #定义默认页面所在的目录<br>       &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认配置文件不包括下面两个块</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">mail 协议相关配置段</span><br>mail &#123;<br> ...<br>&#125;    <br><span class="hljs-meta prompt_">#</span><span class="language-bash">stream 服务器相关配置段</span><br>stream &#123;<br> ...<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入其他路径的配置文件</span><br>include /apps/nginx/conf.d/*.conf<br><br></code></pre></td></tr></table></figure><h1 id="Web服务配置"><a href="#Web服务配置" class="headerlink" title="Web服务配置"></a>Web服务配置</h1><p>基于不同的IP、不同的端口以及不用得域名实现不同的虚拟主机，依赖于核心模块ngx_http_core_module实现。</p><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p>​根据用户输入的url提供不同的页面，不同的访问错误页面，设置长连接、错误日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">为了便于修改和阅读，防止主配置文件过于臃肿，编写子配置文件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在主配置文件http段中添加server段（在配置文件的最后面添加此行）</span><br>http &#123;<br> ......<br> include /apps/nginx/conf/conf.d/*.conf; <br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">子配置文件</span><br>server &#123;<br> listen 80;<br> server_name www.test.com;<br> keepalive_requests 200;#长连接设置：一次长连接资源请求最多200次<br> keepalive_timeout  65 60;#长连接设置：一次长连接会话时间最多65秒，客户端显示60秒<br> error_log /apps/nginx/logs/test_error.log; #定义错误日志<br> error_page  500 502 503 504 /error.html;  #错误页<br> location = /error.html &#123;<br>   root /data/nginx/html;<br>&#125;<br> location / &#123;<br>   root /data/nginx/html/test;<br>   index index.html;<br> &#125;<br>&#125;<br>server &#123;<br> listen 80;<br> server_name www.test2.com;  <br> location / &#123;<br>   root /data/nginx/html/test2;<br>   index index.html;<br>   try_files $uri  $uri.html $uri/index.html /about/default.html;  #uri不存在则转到默认页面<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="location匹配详解"><a href="#location匹配详解" class="headerlink" title="location匹配详解"></a>location匹配详解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs shell">location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;<br>=   #用于标准uri前，需要请求字串与uri精确匹配，大小敏感,如果匹配成功就停止向下匹配并立即处理请求<br>^~  #用于标准uri前，表示包含正则表达式,并且匹配以指定的正则表达式开头,对uri的最左边部分做匹配检查，不区分字符大小写<br>~   #用于标准uri前，表示包含正则表达式,并且区分大小写<br>~*  #用于标准uri前，表示包含正则表达式,并且不区分大写<br>不带符号 #匹配起始于此uri的所有的uri<br>\   #用于标准uri前，表示包含正则表达式并且转义字符。可以将 . * ?等转义为普通符号<br><br>匹配优先级从高到低：=, ^~, ~/~*, 无符号<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">官方范例</span><br>location = / &#123;<br>   [ configuration A ]<br>&#125;<br>location / &#123;<br>   [ configuration B ]<br>&#125;<br>location /documents/ &#123;<br>   [ configuration C ]<br>&#125;<br>location ^~ /images/ &#123;<br>   [ configuration D ]<br>&#125;<br>location ~* \.(gif|jpg|jpeg)$ &#123;<br>   [ configuration E ]<br>&#125;<br>The “/” request will match configuration A(?), the “/index.html” request will <br>match configuration B,<br>the “/documents/document.html” request will match configuration C, the <br>“/images/1.gif” request will match configuration D, and the “/documents/1.jpg” <br>request will match configuration E.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生产案例</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">直接匹配网站根会加速Nginx访问处理</span><br>location = /index.html &#123;<br>   ......;<br>&#125;<br>location / &#123;<br>   ......;<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">静态资源配置方法1</span><br>location ^~ /static/ &#123;<br>   ......;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">静态资源配置方法2,应用较多</span><br>location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;<br>   ......;<br>&#125;#多应用配置<br>location ~* /app1 &#123;<br>     ......;<br>&#125;<br>location ~* /app2 &#123;<br>     ......;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="状态页"><a href="#状态页" class="headerlink" title="状态页"></a>状态页</h3><p>​基于nginx 模块 ngx_http_stub_status_module</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">实际使用时可加上验证功能</span><br>location /nginx_status &#123;<br>   stub_status;<br>   auth_basic           &quot;auth login&quot;;# 需要ngx_http_auth_basic_module 模块<br>   auth_basic_user_file /apps/nginx/conf/.htpasswd;<br> &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">状态页中数据</span><br>Active connections： #当前处于活动状态的客户端连接数，包括连接等待空闲连接数<br>=reading+writing+waiting<br>accepts：#统计总值，Nginx自启动后已经接受的客户端请求连接的总数。<br>handled：#统计总值，Nginx自启动后已经处理完成的客户端请求连接总数，通常等于accepts，除非有因<br>worker_connections限制等被拒绝的连接<br>requests：#统计总值，Nginx自启动后客户端发来的总的请求数。<br>Reading：#当前状态，正在读取客户端请求报文首部的连接的连接数,数值越大,说明排队现象严重,性能不足<br>Writing：#当前状态，正在向客户端发送响应报文过程中的连接数,数值越大,说明访问量很大<br>Waiting：#当前状态，正在等待客户端发出请求的空闲连接数，开启 keep-alive的情况下,这个值等于<br>active – (reading+writing)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用curl访问状态页配合文本工具筛选可统计访问情况</span><br></code></pre></td></tr></table></figure><p>实用变量，其中$proxy_add_x_forwarded_for可解决后端服务器不能统计客户端访问的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">remote_addr<span class="hljs-comment">#存放了客户端的地址，注意是客户端的公网IP</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">proxy_add_x_forwarded_for<span class="hljs-comment">#此变量表示将客户端IP追加请求报文中X-Forwarded-For首部字段,多个IP之间用逗号分隔,如果请求中没有X-Forwarded-For,就使用$remote_addr</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">args <span class="hljs-comment">#变量中存放了URL中的所有参数</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">is_args<span class="hljs-comment">#如果有参数为? 否则为空</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">document_root <span class="hljs-comment">#保存了针对当前资源的请求的系统根目录,例如:/apps/nginx/html</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_body_file <span class="hljs-comment">#做反向代理时发给后端服务器的本地资源的名称</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">request_uri<span class="hljs-comment">#包含请求参数的原始URI，不包含主机名，相当于:$document_uri?$args</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">scheme <span class="hljs-comment">#请求的协议，例如:http，https,ftp等</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">server_protocol <span class="hljs-comment">#保存了客户端请求资源使用的协议的版本，例如:HTTP/1.0，HTTP/1.1，HTTP/2.0等</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">host<span class="hljs-comment">#存放了请求的host名称</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">http_user_agent<span class="hljs-comment">#客户端浏览器的详细信息</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">cookie_&lt;name&gt;<span class="hljs-comment">#name为任意请求报文首部字部cookie的key名</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">http_cookie<span class="hljs-comment">#客户端的所有cookie信息</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">http_&lt;name&gt;<span class="hljs-comment">#name为任意请求报文首部字段,表示记录请求报文的首部字段，ame的对应的首部字段名需要为小写，如果有横线需要替换为下划线</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以使用<span class="hljs-built_in">set</span>自定义变量</span><br></code></pre></td></tr></table></figure><h3 id="HTTPS配置"><a href="#HTTPS配置" class="headerlink" title="HTTPS配置"></a>HTTPS配置</h3><p>​nginx 的https 功能基于模块ngx_http_ssl_module实现。yum安装自带，编译安装默认没有。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">自签名CA证书和服务器证书过程省略</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将服务器证书和CA证书.crt文件内容合并为一个.pem文件，服务器证书内容需要在前</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将所有请求重定向为https，在对安全有要求的网站非常常见，即使输入了使用http协议依然会转到https页面。</span><br>server &#123;<br> listen 80 default_server;<br> server_name www.test.com;<br> rewrite ^(.*)$ https://$server_name$1 permanent;<br>&#125;<br><br>server &#123;<br> listen 80;<br> listen 443 ssl;<br> ssl_certificate /apps/nginx/certs/www.test.com.pem;      #指定证书和私钥路径<br> ssl_certificate_key /apps/nginx/certs/www.test.com.key;<br> ssl_session_cache shared:sslcache:20m;#在各worker之间使用一个共享的缓存，需要定义一个缓存名称和缓存空间大小，一M可以存储4000个会话信息，多个虚拟主机可以使用相同的缓存名称<br> ssl_session_timeout 10m;#客户端连接可以复用ssl session cache中缓存的有效时长，默认5m<br> root /data/nginx/html; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="rewrite功能"><a href="#rewrite功能" class="headerlink" title="rewrite功能"></a>rewrite功能</h3><p>​需要用 ngx_http_rewrite_module 模块，编译安装需要PCRE库。</p><p>​rewrite是nginx服务器的重要功能之一，实现URL重写。rewrite指令通过正则表达式的匹配来改变URI，可以同时存在一个或多个指令，按照顺序依次对URI进行匹配，rewrite主要是针对用户请求的URL或者是URI做具体处理。</p><p>​实现在改变网站结构之后，客户端不需要修改原来的书签，也无需其他网站修改我们的链接，就可以设置为访问，另外还可以在一定程度上提高网站的安全性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">rewrite有四种不同的flag，分别是redirect(临时重定向302)、permanent(永久重定向301)、<span class="hljs-built_in">break</span>和last。其中前两种是跳转型的flag，后两种是代理型</span><br>redirect;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">临时重定向，重写完成后以临时重定向方式直接返回重写后生成的新URL给客户端，由客户端重新发起请求;使用相对路径,或者http://或https://开头，状态码：302</span><br>permanent;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重写完成后以永久重定向方式直接返回重写后生成的新URL给客户端，由客户端重新发起请求，状态码：301。与临时的区别是浏览器会缓存，只要有缓存不需要访问代理进行重定向。</span><br>break;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重写完成后,停止对当前URL在当前location中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置;结束循环，建议在location中使用。适用于一个URL一次重写</span><br>last;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重写完成后,停止对当前URI在当前location中后续的其它重写操作，而后对新的URL启动新一轮重写检查，不建议在location中使用</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">适用于一个URL多次重写，要注意避免出现超过十次以及URL重写后返回错误的给用户。</span><br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">接上文https配置，自动跳转https</span><br>location / &#123;    #针对全站跳转<br>   root /data/nginx/html/pc;<br>   index index.html;<br>    if ($scheme = http )&#123;  #如果没有加条件判断，会导致无限重定向，产生错误<br>   rewrite / https://$host redirect;<br>   &#125;  <br> &#125;<br> location /login &#123;     #针对有安全需求的URL进行跳转https <br> if ($scheme = http )&#123;  <br>   rewrite / https://$host/login redirect;<br>   &#125; <br> &#125;<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">访问错误网页则回到某指引页面</span><br>location / &#123;<br>   root /data/nginx/html/pc;<br>   index index.html;<br>    if (!-e $request_filename) &#123;<br>       rewrite .* http://www.test.org/index.html; #实现客户端浏览器的302跳转<br>       #rewrite .* /index.html; #web服务器内部跳转<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p>​反向代理：reverse proxy，指的是代理外网用户的请求到内部的指定的服务器，并将数据返回给用户的</p><p>一种方式。</p><p>​Nginx代理模块常用的有：</p><p>​ngx_http_proxy_module： 将客户端的请求以http协议转发至指定服务器进行处理</p><p>​ngx_http_upstream_module ：用于定义为proxy_pass,fastcgi_pass,uwsgi_pass等指令引用的后端服务器分组</p><p>​ngx_stream_proxy_module：将客户端的请求以tcp协议转发至指定服务器处理</p><p>​ngx_http_fastcgi_module：将客户端对php的请求以fastcgi协议转发至指定服务器助理</p><p>​ngx_http_uwsgi_module： 将客户端对Python的请求以uwsgi协议转发至指定服务器处理</p><h3 id="HTTP协议代理"><a href="#HTTP协议代理" class="headerlink" title="HTTP协议代理"></a>HTTP协议代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">proxy_pass; 用来设置将客户端请求转发给的后端服务器的主机，可以是主机名(将转发至后端服务做为主机头首部)、IP地址：端口的方式</span><br>proxy_pass http://10.0.0.18:80;#类似于root<br>proxy_pass http://10.0.0.18:80/;#类似于alias  location使用正则表达式匹配uri时不能加/<br>proxy_hide_header field;#用于nginx作为反向代理的时候，在返回给客户端http响应时，隐藏后端服务器相应头部的信息，可以设置在http,server或location块<br>proxy_pass_header field;#默认nginx在响应报文中不传递后端服务器的首部字段Date, Server, X-Pad, X-Accel等参数，如果要传递的话则要使用 proxy_pass_header field声明将后端服务器返回的值传递给客户端<br><br>proxy_set_header;   #可更改或添加客户端的请求头部信息内容并转发至后端服务器，比如在后端服务器想要获取客户端的真实IP的时候，就要更改每一个报文的头部<br><span class="hljs-meta prompt_">#</span><span class="language-bash">IP透传</span><br>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>proxy_set_header X-Real-IP  $remote_addr;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在后端httpd服务器修改配置,添加日志记录X-Forwarded-For字段</span><br> LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot; \&quot;%&#123;X-Real-IP&#125;i\&quot;&quot; combined<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在后端服务器查看日志</span><br>[root@centos8 ~]#tail /var/log/httpd/access_log   -f<br>10.0.0.8 - - [09/Oct/2020:21:50:57 +0800] &quot;HEAD /static/index.html HTTP/1.0&quot; 200<br>- &quot;-&quot; &quot;curl/7.29.0&quot; &quot;10.0.0.7&quot;<br><br>proxy_connect_timeout 6s; #6s为自定义nginx与后端服务器建立连接的超时时间,超时会返回客户端504响应码<br>proxy_read_timeout time;#配置nginx服务器向后端服务器或服务器组发起read请求后，等待的超时时间，默认60s<br>proxy_send_timeout time; #配置nginx项后端服务器或服务器组发起write请求后，等待的超时时间，默认60s<br>proxy_next_upstream error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504;#当一台后端朋务器出错,超时,无效首部,500等时,切换至下一个后端服务器提供服务<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">缓存功能</span><br>proxy_cache_valid [code ...] time;#定义对特定响应码的响应内容的缓存时长，定义在http&#123;...&#125;中<br>proxy_cache_key $request_uri; #对指定的数据进行MD5的运算做为缓存的key<br>proxy_cache_valid 200 302 301 10m; #指定的状态码返回的数据缓存多长时间<br>proxy_cache_valid any 1m;   #除指定的状态码返回的数据以外的缓存多长时间,必须设置,否则不会缓<br>存<br>proxy_cache_path path;#定义可用于proxy功能的缓存<br>   levels=1:2:2 #定义缓存目录结构层次，1:2:2可以生成2^4x2^8x2^8=2^20=1048576个目录<br>   keys_zone=proxycache:20m #指内存中缓存的大小，主要用于存放key和metadata（如：使用次数）,一般1M可存放8000个左右的key<br>   inactive=120s  #缓存有效时间  <br>   max_size=10g; #最大磁盘占用空间，磁盘存入文件内容的缓存空间最大值<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">针对部分页面代理</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">客户端访问http://www.test.com/static,实际访问的是后端服务器10.0.0.18的/var/www/html/static/index.html</span><br> location /static &#123;<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">proxy_pass http://10.0.0.18:80/; <span class="hljs-comment">#注意有后面的/， 表示置换</span></span><br>   proxy_pass http://10.0.0.18:80;  #后面没有 / , 表示附加<br> &#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">针对部分资源</span><br>location ~ \.(jpe?g|png|bmp|gif)$ &#123;<br>   proxy_pass http://10.0.0.18;     #如果加/ 语法出错                                       <br> &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">缓存部分页面</span><br>location /static &#123;  #若放在server配置项对所有URL都进行缓存<br>   proxy_pass http://10.0.0.18:80;<br>   proxy_cache proxycache;<br>   proxy_cache_key $request_uri;<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">proxy_cache_key $host$uri$is_args<span class="hljs-variable">$args</span>;完整url</span><br>   proxy_cache_valid 200 302 301 10m;<br>   proxy_cache_valid any 5m;  #必须指定哪些响应码的缓存<br>   <br><span class="hljs-meta prompt_">   #</span><span class="language-bash">proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;                   <span class="hljs-comment">#只添加客户端IP到</span></span><br>请求报文头部,转发至后端服务器<br>   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #添加客户端IP和反向代理服务器IP到请求报文头部<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>​Nginx 可以基于ngx_http_upstream_module模块提供服务器分组转发、权重分配、状态监测、调度算法等高级功能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">自定义一组服务器，配置在http块内</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以是server name，也可以是IP:port</span><br>upstream name &#123; <br> server .....<br> ......<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">server后可加如下参数：</span><br>weight=number #设置权重，默认为1,实现类似于LVS中的WRR,WLC等<br>max_conns=number  #给当前后端server设置最大活动链接数，默认为0表示没有限制<br>max_fails=number  #后端服务器的下线条件,当客户端访问时,对本次调度选中的后端服务器连续进行检测多少次,如果都失败就标记为不可用,默认为1次,当客户端访问时,才会利用TCP触发对探测后端服务器健康性检查,而非周期性的探测<br>fail_timeout=time #后端服务器的上线条件,对已经检测到处于不可用的后端服务器,每隔此时间间隔再次进行检测是否恢复可用，如果发现可用,则将后端服务器参与调度,默认为10秒<br>backup  #设置为备份服务器，当所有后端服务器不可用时,才会启用此备用服务器<br>down    #标记为down状态,可以平滑下线后端服务器<br>resolve #当server定义的是主机名的时候，当A记录发生变化会自动应用新IP而不用重启Nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">若缓存放在后端服务器，调度到别的主机会丢失缓存，因此需要一致性<span class="hljs-built_in">hash</span>算法调度</span><br>hash $request_uri consistent; #基于用户请求的uri做hash<br>hash $cookie_sessionid  #基于cookie中的sessionid这个key进行hash调度,实现会话绑定<br>ip_hash;#源地址hash调度方法，基于的客户端的remote_addr(源地址IPv4的前24位或整个IPv6地址)做hash计算，以实现会话保持<br></code></pre></td></tr></table></figure><p><img src="image-20220809095617774.png" alt="image-20220809095617774"></p><p>​如果节点较少可能出现哈希环偏斜现象，即聚集分布导致一个节点处理大多数请求，可以按比例增加虚拟节点解决该问题，如1:1变为1000:1000。</p><p>调度示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">访问http://www.test.com/web调度到2台后端服务器</span><br>http &#123;<br> upstream webserver &#123;<br> least_conn;#最少连接调度算法，优先将客户端请求调度到当前连接最少的后端服务器,相当于LVS中的WLC<br> server 10.0.0.101:80 weight=1 fail_timeout=5s max_fails=3; #后端服务器状态监测<br> server 10.0.0.102:80 weight=1 fail_timeout=5s max_fails=3;<br> server 127.0.0.1:80 weight=1 fail_timeout=5s max_fails=3 backup;#本机备用，可作sorry server<br> &#125;<br>server &#123;<br> listen 80;<br> server_name www.test.com;<br> location / &#123;<br>   index index.html index.php;<br>   root /data/nginx/html/pc;<br>   &#125;<br> location /web &#123;<br>   index index.html;<br>   proxy_pass http://webserver/;#调度到webserver组<br>   proxy_next_upstream error | timeout | invalid_header | http_500 | http_502 | <br>http_503 | http_504;#后端服务器出错后转为另一台提供服务<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h3><p>​其基于ngx_stream_proxy_module模块实现tcp负载，依然需要模块ngx_stream_upstream_module</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">stream &#123; #定义stream相关的服务；Context:main<br>   upstream backend &#123; #定义后端服务器<br>       hash $remote_addr consistent; #定义调度算法为对客户端IP作一致性hash<br>       server backend1.example.com:12345 weight=5; #定义具体server<br>       server 127.0.0.1:12345      max_fails=3 fail_timeout=30s;<br>       server unix:/tmp/backend3;<br>   &#125;<br>   upstream dns &#123;  #定义后端服务器<br>       server 10.0.0.1:53535;  #定义具体server<br>       server dns.example.com:53;<br>   &#125;<br>   server &#123; #定义server<br>       listen 12345; #监听IP:PORT<br>       proxy_connect_timeout 1s; #连接超时时间<br>       proxy_timeout 3s; #转发超时时间<br>       proxy_pass backend; #转发到具体服务器组<br>   &#125;<br>   server &#123;<br>       listen 127.0.0.1:53 udp reuseport;<br>       proxy_timeout 20s;<br>       proxy_pass dns;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">代理mysql和redis，同一主机可在多个组内</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Nginx的四层代理与LVS的不同，LVS只修改MAC地址，而Nginx对客户端和后端分别作三次握手，相当于默认后端不能看到真实客户端IP，</span><br>stream &#123;<br>   upstream mysql &#123;<br>     server 10.0.0.18:3306 max_fails=3 fail_timeout=30s;<br>     server 10.0.0.28:3306 max_fails=3 fail_timeout=30s;<br>   &#125;<br>   upstream redis &#123;<br>     server 10.0.0.18:6379 max_fails=3 fail_timeout=30s;<br>     server 10.0.0.28:6379 max_fails=3 fail_timeout=30s;<br>   &#125;<br>   server &#123;<br>    listen 3306;  #默认tcp，想用udp需要在后面加<br>    proxy_pass mysql;<br>   &#125;<br>   server &#123;<br>    listen 6379;  <br>    proxy_pass redis;<br>   &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">DNS代理</span><br>stream &#123; <br> upstream dns &#123; <br> server 10.0.0.7:53; <br> server 10.0.0.17:53; <br>   &#125; <br>   server &#123; <br>   listen 53 udp; <br>   proxy_pass dns; <br>   proxy_timeout 1s; <br>   proxy_responses 1;  #使用UDP协议时，设置代理服务器响应客户端期望的数据报文数。该值<br>作为会话的终止条件<br>   error_log logs/dns.log; <br>   &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h3><p>​nginx&#x2F;apache服务器并不能直接运行 php、java这样的文件，apache实现的方式是打补丁，但是nginx缺通过与第三方基于协议实现，即通过某种特定协议将客户端请求转发给第三方服务处理，第三方服务器会新建新的进程处理用户的请求，处理完成后返回数据给Nginx并回收进程.</p><p>​基于模块ngx_http_fastcgi_module</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastcgi_pass address:port;#转发请求到后端服务器，address为后端的fastcgi server的地址，可用位置：location, if in location<br>fastcgi_index name;#fastcgi默认的主页资源，如fastcgi_index index.php;<br>fastcgi_param parameter value [if_not_empty];#设置传递给FastCGI服务器的参数值，可以是文本，变量或组合，可用于将Nginx的内置变量赋值给自定义key，如fastcgi_param REMOTE_ADDR $remote_addr;<br>fastcgi_cache_key string; #定义用作缓存项的key的字符串，示例：fastcgi_cache_key $request_uri;<br>fastcgi_cache_valid [code ...] time; #不同的响应码各自的缓存时间<br>fastcgi_cache_path path;#缓存定义，参数同proxy_cache_path<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">根据是否为php资源来调度（动静分离）</span><br>location / &#123;<br>   proxy_pass http://10.0.0.28;<br>   index index.html;<br> &#125;<br> location ~ \.php$ &#123;<br>   root /data/php;<br>   fastcgi_pass   10.0.0.18:9000;<br>   fastcgi_index index.php;<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">fastcgi_param SCRIPT_FILENAME /data/php<span class="hljs-variable">$fastcgi_script_name</span>;</span><br>   fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;#传递URL<br>   include       fastcgi_params;#默认有一个参数文件定义了大量参数，直接调用。<br> &#125;<br></code></pre></td></tr></table></figure><h1 id="系统参数优化"><a href="#系统参数优化" class="headerlink" title="系统参数优化"></a>系统参数优化</h1><p>​默认的Linux内核参数考虑的是最通用场景，不符合用于支持高并发访问的Web服务器的定义。实际使用需要根据nginx的角色如内容服务器、反向代理或者提供压缩服务器的服务器，进行不同的内核参数调整。</p><h3 id="x2F-etc-x2F-sysctl-conf"><a href="#x2F-etc-x2F-sysctl-conf" class="headerlink" title="&#x2F;etc&#x2F;sysctl.conf"></a>&#x2F;etc&#x2F;sysctl.conf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">fs.file-max = 1000000#表示单个进程较大可以打开的句柄数<br>net.ipv4.tcp_tw_reuse = 1 #参数设置为 1 ，表示允许将TIME_WAIT状态的socket重新用于新的TCP链接，这对于服务器来说意义重大，因为总有大量TIME_WAIT状态的链接存在<br>net.ipv4.tcp_keepalive_time = 600#当keepalive启动时，TCP发送keepalive消息的频度;默认是2小时，将其设置为10分钟，可更快的清理无效链接<br>net.ipv4.tcp_fin_timeout = 30#当服务器主动关闭链接时，socket保持在FIN_WAIT_2状态的较大时间8.2 PAM 资源限制优化<br>net.ipv4.tcp_max_tw_buckets = 5000#表示操作系统允许TIME_WAIT套接字数量的较大值，如超过此值，TIME_WAIT套接字将立刻被清除并打印警告信息,默认为8000，过多的TIME_WAIT套接字会使Web服务器变慢<br>net.ipv4.ip_local_port_range = 1024 65000#定义UDP和TCP链接的本地端口的取值范围<br>net.ipv4.tcp_rmem = 10240 87380 12582912#定义了TCP接受缓存的最小值、默认值、较大值<br>net.ipv4.tcp_wmem = 10240 87380 12582912#定义TCP发送缓存的最小值、默认值、较大值<br>net.core.netdev_max_backlog = 8096#当网卡接收数据包的速度大于内核处理速度时，会有一个列队保存这些数据包。这个参数表示该列队的较大值<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">四个参数根据业务不同有较大差异</span><br>net.core.rmem_default = 6291456#表示内核套接字接受缓存区默认大小<br>net.core.wmem_default = 6291456#表示内核套接字发送缓存区默认大小<br>net.core.rmem_max = 12582912#表示内核套接字接受缓存区较大大小<br>net.core.wmem_max = 12582912#表示内核套接字发送缓存区较大大小<br><br>net.ipv4.tcp_syncookies = 1 #与性能无关。用于解决TCP的SYN攻击<br>net.ipv4.tcp_max_syn_backlog = 8192#这个参数表示TCP三次握手建立阶段接受SYN请求列队的较大长度，默认1024，将其设置的大一些可使出现Nginx繁忙来不及accept新连接时，Linux不至于丢失客户端发起的链接请求<br>net.ipv4.tcp_tw_recycle = 1 #这个参数用于设置启用timewait快速回收<br>net.core.somaxconn=262114#选项默认值是128，这个参数用于调节系统同时发起的TCP连接数，在高并发的请求中，默认的值可能会导致链接超时或者重传，因此需要结合高并发请求数来调节此值。<br>net.ipv4.tcp_max_orphans=262114<br><span class="hljs-meta prompt_">#</span><span class="language-bash">选项用于设定系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤立链接将立即被复位并输出警告信息。这个限制指示为了防止简单的DOS攻击，不用过分依靠这个限制甚至认为的减小这个值，更多的情况是增加这个值</span><br></code></pre></td></tr></table></figure><h3 id="x2F-etc-x2F-security-x2F-limits-conf"><a href="#x2F-etc-x2F-security-x2F-limits-conf" class="headerlink" title="&#x2F;etc&#x2F;security&#x2F;limits.conf"></a>&#x2F;etc&#x2F;security&#x2F;limits.conf</h3><p>​修改PAM资源限制</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">soft</span> nofile <span class="hljs-number">65535</span><br><span class="hljs-attribute">hard</span> nofile <span class="hljs-number">65535</span><br><span class="hljs-attribute">soft</span> nproc <span class="hljs-number">65535</span><br><span class="hljs-attribute">hard</span> nproc <span class="hljs-number">65535</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>反向代理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx基础</title>
    <link href="/2022/08/08/Nginx%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/08/Nginx%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>​本文主要介绍了Nginx基础原理和编译安装。</p><span id="more"></span><h1 id="Nginx基础原理"><a href="#Nginx基础原理" class="headerlink" title="Nginx基础原理"></a>Nginx基础原理</h1><h3 id="Nginx进程结构"><a href="#Nginx进程结构" class="headerlink" title="Nginx进程结构"></a>Nginx进程结构</h3><p>​Nginx是多进程组织模型，而且是一个由Master主进程和Worker工作进程组成。</p><p>​master进程的功能包括：接收外部的操作并对内转发，通过信号管理 Worker进程。监控 worker 进程的运行状态，worker 进程异常终止后，自动重启 worker 进程。读取Nginx 配置文件并验证其有效性和正确性。建立、绑定和关闭socket连接，按照配置生成、管理和结束工作进程。编译和处理perl脚本。</p><p>​worker进程的功能包括：实际负责处理网络请求，接受处理客户端请求并依次送入各个功能模块进行处理</p><p>I&#x2F;O调用，获取响应数据。与后端服务器通信，接收后端服务器的处理结果。缓存数据，访问缓存索引，查询和调用缓存数据。发送请求结果，响应客户的请求。接收主程序指令，比如重启、升级和退出等。</p><p><img src="image-20220808171634822.png" alt="image-20220808171634822"></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="image-20220808171614416.png" alt="image-20220808171614416"></h3><h3 id="Nginx高性能原理"><a href="#Nginx高性能原理" class="headerlink" title="Nginx高性能原理"></a>Nginx高性能原理</h3><p>​ <strong>Nginx采用高性能事件驱动模型epoll：</strong></p><p>​epoll的处理方式是创建一个待处理的事件列表，然后把这个列表发给内核，返回的时候在去轮询检查这个表，以判断事件是否发生，epoll支持一个进程打开的最大事件描述符的上限是系统可以打开的文件的最大数，同时epoll库的I&#x2F;O效率不随描述符数目增加而线性下降，因为它只会对内核上报的“活跃”的描述符进行操作。</p><p><img src="image-20220808171519627.png" alt="image-20220808171519627"></p><p>​<strong>Nginx采用零拷贝技术：</strong></p><p>​传统的 Linux 系统的标准 I&#x2F;O 接口（read、write）是基于数据拷贝的，这样做的好处是，通过中间缓存的机制，减少磁盘 I&#x2F;O 的操作，但是坏处也很明显，大量数据的拷贝，用户态和内核态的频繁切换，会消耗大量的 CPU 资源，严重影响数据传输的性能。</p><p>​零拷贝就是上述问题的一个解决方案，通过尽量避免拷贝操作来缓解 CPU 的压力。零拷贝并没有真正做</p><p>到“0”拷贝，它更多是一种思想，很多的零拷贝技术都是基于这个思想去做的优化。</p><h3 id="Nginx特性"><a href="#Nginx特性" class="headerlink" title="Nginx特性"></a>Nginx特性</h3><ul><li>模块化设计，较好的扩展性</li><li>高可靠性</li><li>支持热部署：不停机更新配置文件，平滑升级版本，更换日志文件</li><li>低内存消耗：10000个keep-alive连接模式下的非活动连接，仅需2.5M内存</li><li>既可提供web服务又能实现四层或七层代理</li></ul><h1 id="使用nginx官方yum源安装"><a href="#使用nginx官方yum源安装" class="headerlink" title="使用nginx官方yum源安装"></a>使用nginx官方yum源安装</h1><p>​系统自带的nginx版本较旧，可先配置nginx官方提供的yum源。</p><p>​以下链接中详细描述了几个主要linux发行版系统的仓库配置方法。</p><p>​<a href="http://nginx.org/en/linux_packages.html">http://nginx.org/en/linux_packages.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">官网关于RHEL/CentOS部分介绍</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Install the prerequisites:</span><br><br>sudo yum install yum-utils<br><span class="hljs-meta prompt_">#</span><span class="language-bash">To <span class="hljs-built_in">set</span> up the yum repository, create the file named /etc/yum.repos.d/nginx.repo with the following contents:</span><br><br>[nginx-stable]<br>name=nginx stable repo<br>baseurl=http://nginx.org/packages/centos/$releasever/$basearch/<br>gpgcheck=1<br>enabled=1<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=true<br><br>[nginx-mainline]<br>name=nginx mainline repo<br>baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/<br>gpgcheck=1<br>enabled=0<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=true<br><span class="hljs-meta prompt_">#</span><span class="language-bash">By default, the repository <span class="hljs-keyword">for</span> stable nginx packages is used. If you would like to use mainline nginx packages, run the following <span class="hljs-built_in">command</span>:</span><br><br>sudo yum-config-manager --enable nginx-mainline<br><span class="hljs-meta prompt_">#</span><span class="language-bash">To install nginx, run the following <span class="hljs-built_in">command</span>:</span><br><br>sudo yum install nginx<br><span class="hljs-meta prompt_">#</span><span class="language-bash">When prompted to accept the GPG key, verify that the fingerprint matches 573B FD6B 3D8F BC64 1079 A6AB ABF5 BD82 7BD9 BF62, and <span class="hljs-keyword">if</span> so, accept it.</span><br></code></pre></td></tr></table></figure><h3 id="选择特定旧版本安装"><a href="#选择特定旧版本安装" class="headerlink" title="选择特定旧版本安装"></a>选择特定旧版本安装</h3><p>​yum list只列出了最新稳定版本的nginx相关包，但也可直接安装旧版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> list *nginx*<br><br><span class="hljs-attribute">Available</span> Packages<br><span class="hljs-attribute">nginx</span>-module-image-filter.x86_64                                    <span class="hljs-number">1</span>:<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.el8.ngx                                               nginx-stable<br><span class="hljs-attribute">nginx</span>-module-image-filter-debuginfo.x86_64                          <span class="hljs-number">1</span>:<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.el8.ngx                                               nginx-stable<br><span class="hljs-attribute">nginx</span>-module-njs.x86_64                                             <span class="hljs-number">1</span>:<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span>+<span class="hljs-number">0</span>.<span class="hljs-number">7</span>.<span class="hljs-number">6</span>-<span class="hljs-number">1</span>.el8.ngx                                         nginx-stable<br><span class="hljs-attribute">nginx</span>-module-njs-debuginfo.x86_64                                   <span class="hljs-number">1</span>:<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span>+<span class="hljs-number">0</span>.<span class="hljs-number">7</span>.<span class="hljs-number">6</span>-<span class="hljs-number">1</span>.el8.ngx                                         nginx-stable<br><span class="hljs-attribute">nginx</span>-module-perl.x86_64                                            <span class="hljs-number">1</span>:<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.el8.ngx                                               nginx-stable<br><span class="hljs-attribute">nginx</span>-module-perl-debuginfo.x86_64                                  <span class="hljs-number">1</span>:<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.el8.ngx                                               nginx-stable<br><span class="hljs-attribute">nginx</span>-module-xslt.x86_64                                            <span class="hljs-number">1</span>:<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.el8.ngx                                               nginx-stable<br><span class="hljs-attribute">nginx</span>-module-xslt-debuginfo.x86_64                                  <span class="hljs-number">1</span>:<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.el8.ngx                                               nginx-stable<br></code></pre></td></tr></table></figure><p>​如选择nginx1.18.0</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> -y install nginx-<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h1 id="Nginx编译安装"><a href="#Nginx编译安装" class="headerlink" title="Nginx编译安装"></a>Nginx编译安装</h1><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>​需要预先安装的软件： gcc     pcre-devel openssl-devel zlib-devel</p><p>​源码包官方地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a>      </p><h3 id="选择模块"><a href="#选择模块" class="headerlink" title="选择模块"></a>选择模块</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#进入源码包目录，执行.configue</span><br><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=</span>安装路径 \ <br><span class="hljs-params">--with-</span>模块名<br><span class="hljs-params">--with-http_v2_module</span> \ <br><span class="hljs-params">--with-http_ssl_module</span> \<br><span class="hljs-string">...</span><br><span class="hljs-comment">#添加第三方模块</span><br><span class="hljs-params">--add-module=</span>模块源码路径<br><span class="hljs-params">--add-module=/usr/local/src/echo-nginx-module</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>​执行make &amp;&amp; make install</p><p>​修改安装目录文件夹所属者为nginx</p><p>​安装目录中有四个主要文件夹：conf保存nginx所有的配置文件，其中nginx.conf是nginx服务器的最核心最主要的配置文件，其中有后缀.default的样板配置文件。html目录中保存了nginx服务器的web文件，但是可以更改为其他目录保存web文件,另外还有一个50x的web文件是默认的错误页面提示页面。logs用来保存nginx服务器的访问日志错误日志等日志。sbin保存nginx二进制启动脚本，可以接受不同的参数以实现不同的功能。</p><p>​nginx -V可查看当前nginx版本和带有的模块，日后想添加新模块可在编译安装时直接复制当前模块再加上新模块。</p><h3 id="创建service文件"><a href="#创建service文件" class="headerlink" title="创建service文件"></a>创建service文件</h3><p>​便于开机启动和使用systemd管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">可复制同一版本的nginx的yum安装生成的service文件，较新版本的yum安装需要先配置官方源，官网同上。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">service文件如下</span><br>[Unit]<br>Description=nginx - high performance web server<br>Documentation=http://nginx.org/en/docs/<br>After=network-online.target remote-fs.target nss-lookup.target<br>Wants=network-online.target<br>[Service]<br>Type=forking<br>PIDFile=/apps/nginx/run/nginx.pid<br>ExecStart=/apps/nginx/sbin/nginx -c /apps/nginx/conf/nginx.conf<br>ExecReload=/bin/kill -s HUP $MAINPID<br>ExecStop=/bin/kill -s TERM $MAINPID<br>LimitNOFILE=100000<br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置文件，方便查看nginx进程编号</span><br>mkdir /apps/nginx/run/<br>vim /apps/nginx/conf/nginx.conf<br>pid   /apps/nginx/run/nginx.pid;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ansible管理LAMP架构</title>
    <link href="/2022/07/27/Ansible%E7%AE%A1%E7%90%86LAMP%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/07/27/Ansible%E7%AE%A1%E7%90%86LAMP%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>​本文概述了通过Ansible部署LAMP架构、修改配置、使用web应用的主要流程</p><p>​<span id="more"></span></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>​主控端：</p><p>​10.0.0.150  安装Ansible，编写角色和playbook</p><p>​受控端：</p><p>​10.0.0.83 提供web服务       </p><p>​10.0.0.84  为web服务器处理php程序  </p><p>​10.0.0.157 数据库</p><h3 id="Ansible准备"><a href="#Ansible准备" class="headerlink" title="Ansible准备"></a>Ansible准备</h3><p>​以上受控主机root密码一致，若不一致还需要先实现基于Key验证的SSH免密登录</p><p>​需要注意selinux和防火墙规则，防止影响实验</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建必要文件</span><br>[root@centos8 ~]<span class="hljs-variable">$mkdir</span> /root/LAMP/ansible -p<br>[root@centos8 ~]<span class="hljs-variable">$cd</span> /root/LAMP/ansible<br><br><span class="hljs-comment">#编写主机清单 自动填写ssh密码</span><br>[root@centos8 ~/LAMP/ansible]<span class="hljs-variable">$vim</span> inventory<br>[Apache]<br>10.0.0.83<br><br>[php]<br>10.0.0.84<br><br>[mysql]<br>10.0.0.157<br><br>[all:vars]<br>ansible_user=root<br>ansible_password=12345<br><br><span class="hljs-comment">#修改配置文件（当前目录的配置文件优先生效）</span><br>[root@centos8 ~/LAMP/ansible]<span class="hljs-variable">$cp</span> /etc/ansible/ansible.cfg ./<br>[root@centos8 ~/LAMP/ansible]<span class="hljs-variable">$mkdir</span> roles<br>[root@centos8 ~/LAMP/ansible]<span class="hljs-variable">$vim</span> ansible.cfg<br>inventory = /root/LAMP/ansible/inventory<br>roles_path = /root/LAMP/ansible/roles<br>host_key_checking = False<br>remote_user = root<br><br><span class="hljs-comment">#测试</span><br>[root@centos8 ~/LAMP/ansible]<span class="hljs-variable">$ansible</span> all -m ping <br>10.0.0.83 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">&quot;ansible_facts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;discovered_interpreter_python&quot;</span>: <span class="hljs-string">&quot;/usr/libexec/platform-python&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;ping&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br>10.0.0.84 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">&quot;ansible_facts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;discovered_interpreter_python&quot;</span>: <span class="hljs-string">&quot;/usr/libexec/platform-python&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;ping&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br>10.0.0.157 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">&quot;ansible_facts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;discovered_interpreter_python&quot;</span>: <span class="hljs-string">&quot;/usr/libexec/platform-python&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;ping&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br><span class="hljs-comment">#Ansible准备完成</span><br></code></pre></td></tr></table></figure><h1 id="LAMP部署"><a href="#LAMP部署" class="headerlink" title="LAMP部署"></a>LAMP部署</h1><p>​创建角色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos8 ~/LAMP/ansible]<span class="hljs-variable">$cd</span> roles<br>[root@centos8 ~/LAMP/ansible/roles]<span class="hljs-variable">$ansible</span>-galaxy init apache<br>[root@centos8 ~/LAMP/ansible/roles]<span class="hljs-variable">$ansible</span>-galaxy init php<br>[root@centos8 ~/LAMP/ansible/roles]<span class="hljs-variable">$ansible</span>-galaxy init mysql<br><br><span class="hljs-comment">#apache安装和配置</span><br>[root@centos8 ~/LAMP/ansible]<span class="hljs-variable">$cd</span> roles/apache<br><span class="hljs-comment">#为httpd准备配置文件</span><br>[root@centos8 ~/LAMP/ansible/roles/apache]<span class="hljs-variable">$vim</span> files/LAMPfcgi.conf<br>DirectoryIndex index.php<br>ProxyRequests Off<br>ProxyPassMatch ^/(.*\.php)$ fcgi://10.0.0.84/data/html/<span class="hljs-variable">$1</span><br>ProxyPassMatch ^/(fpm_status|ping) fcgi://10.0.0.84<br><br><span class="hljs-comment">#编写任务</span><br>[root@centos8 ~/LAMP/ansible/roles/apache]<span class="hljs-variable">$vim</span> tasks/main.yml<br>---<br>- name: install<br>  yum: name=httpd state=present<br>- name: copy config<br>  copy: src=LAMPfcgi.conf dest=/etc/httpd/conf.d/<br>- name: start service<br>  service: name=httpd state=started enabled=<span class="hljs-built_in">yes</span><br><br><br><br><span class="hljs-comment">#php-fpm安装和配置</span><br><span class="hljs-comment">#httpd配置文件中指明了php页面路径应该在/data/html/下</span><br>[root@centos8 ~/LAMP/ansible/roles/apache]<span class="hljs-variable">$cd</span> ../php<br>[root@centos8 ~/LAMP/ansible/roles/php]<span class="hljs-variable">$vim</span> files/info.php<br>&lt;?php phpinfo() ?&gt;<br><br><span class="hljs-comment">#在原有php配置文件基础上修改</span><br>[root@centos8 ~/LAMP/ansible/roles/php]<span class="hljs-variable">$vim</span> files/www.conf<br>listen = 0.0.0.0:9000  <span class="hljs-comment">#允许接收所有主机的FastCGI请求</span><br>;listen.allowed_clients = 127.0.0.1<span class="hljs-comment">#注释此行恢复默认值允许所有</span><br>ping.path = /ping<br>pm.status_path = /fpm_status  <span class="hljs-comment">#启用状态页，注意名字需要跟httpd配置文件中相同</span><br><br>[root@centos8 ~/LAMP/ansible/roles/php]<span class="hljs-variable">$vim</span> tasks/main.yml<br>---<br>- name: install php<br>  yum: name=php-fpm state=present<br>- name: install php2<br>  yum: name=php-json state=present<br>- name: copy config<br>  copy: src=www.conf dest=/etc/php-fpm.d/www.conf<br>- name: <span class="hljs-built_in">mkdir</span><br>  file: path=/var/www/html state=directory  owner=apache group=apache<br>- name: copy phpinfo<br>  copy: src=info.php dest=/data/html/info.php owner=apache group=apache<br>- name: start service<br>  service: name=php-fpm state=started enabled=<span class="hljs-built_in">yes</span><br>  <br>  <br>  <span class="hljs-comment">#mariadb安装和配置</span><br>[root@centos8 ~/LAMP/ansible/roles/apache]<span class="hljs-variable">$cd</span> ../mysql/<br>[root@centos8 ~/LAMP/ansible/roles/mysql]<span class="hljs-variable">$vim</span> tasks/main.yml<br>---<br>- name: install mariadb<br>  yum: name=mariadb-server state=present<br>- name: start mariadb<br>  service: name=mariadb state=started enabled=<span class="hljs-built_in">yes</span><br>- name: change password<br>  shell: mysql -uroot  -e <span class="hljs-string">&quot; alter user root@&#x27;localhost&#x27; identified by &#x27;12345&#x27;;&quot;</span><br>- name: add database<br>  shell: mysql -uroot -p12345 -e  <span class="hljs-string">&quot;create database wordpress;&quot;</span><br>- name: add user<br>  shell: mysql -uroot -p12345 -e <span class="hljs-string">&quot;grant all on wordpress.* to wpuser@&#x27;10.0.0.%&#x27; identified by &#x27;12345&#x27; ;&quot;</span><br><br><br><span class="hljs-comment">#调用角色</span><br>[root@centos8 ~/LAMP/ansible]<span class="hljs-variable">$vim</span> LAMP.yml<br>---<br>- name: apache<br>  hosts: Apache<br>  roles:<br>        - apache<br>        <br>- name: php<br>  hosts: php<br>  roles:<br>        - php<br>        <br>- name: mysql<br>  hosts: mysql<br>  roles:<br>        - mysql<br><span class="hljs-comment">#测试无误后执行</span><br>[root@centos8 ~/LAMP/ansible]<span class="hljs-variable">$ansible</span>-playbook  LAMP.yml<br>PLAY RECAP **************************************************************************************************************************************<br>10.0.0.157                 : ok=6    changed=5    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <br>10.0.0.83                  : ok=4    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <br>10.0.0.84                  : ok=7    changed=6    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <br><br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>​一般网页存放在10.0.0.83上，php文件放在10.0.0.84。客户端访问php页面时web服务器将会转发给10.0.0.84php服务器处理。</p><p>​此时已可访问php状态页 10.0.0.83&#x2F;info.php，实际访问10.0.0.84:&#x2F;data&#x2F;html&#x2F;info.php</p><p><img src="image-20220727221545776.png" alt="image-20220727221545776"></p><p>​可使用LAMP应用，如WordPress博客，PhpMyAdmin数据库网页管理，Discuz!论坛等。</p><p>​需要使用某应用只需下载安装包，解压到httpd关于php的配置文件中指定的路径中，在网页中访问该文件夹位置，会进入初始安装界面。此时可输入数据库已设定好的用户和密码。以下为WordPress为例。</p><p>​需要注意的是WordPress文件夹如果所属者不是apache，则apache没有对博客文件的写权限，需要修改所属者和所属组。 </p><p><img src="image-20220728103229011.png" alt="image-20220728103229011"></p><p><img src="image-20220728104452699.png" alt="image-20220728104452699"></p><p><img src="image-20220728105358738.png" alt="image-20220728105358738"></p><p><img src="image-20220728105549630.png" alt="image-20220728105549630"></p><p><img src="image-20220728123302214.png" alt="image-20220728123302214"></p><h1 id="LAMP更新"><a href="#LAMP更新" class="headerlink" title="LAMP更新"></a>LAMP更新</h1><p>​包含程序更新、配置更新、使用新版本网站应用，模拟实现网站升级更新。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#更新apache</span><br><span class="hljs-comment">#备份原有yml文件</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible/roles/apache</span>]<span class="hljs-string">$mv</span> <span class="hljs-string">tasks/main.yml</span>  <span class="hljs-string">tasks/install.yml</span><br><span class="hljs-comment">#由于copy模块默认覆盖，新的配置文件会覆盖原配置文件，实现配置更新</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible/roles/apache</span>]<span class="hljs-string">$vim</span> <span class="hljs-string">tasks/update.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">stop</span> <span class="hljs-string">service</span><br>  <span class="hljs-attr">service:</span> <span class="hljs-string">name=httpd</span> <span class="hljs-string">state=stopped</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">upgrade</span> <br>  <span class="hljs-attr">yum:</span> <span class="hljs-string">name=httpd</span> <span class="hljs-string">state=latest</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">config</span><br>  <span class="hljs-attr">copy:</span> <span class="hljs-string">src=LAMPfcgi.conf</span> <span class="hljs-string">dest=/etc/httpd/conf.d/</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">start</span> <span class="hljs-string">service</span><br>  <span class="hljs-attr">service:</span> <span class="hljs-string">name=httpd</span> <span class="hljs-string">state=started</span> <span class="hljs-string">enabled=yes</span><br><span class="hljs-comment">#以后可根据需要选择任务</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible/roles/apache</span>]<span class="hljs-string">$vim</span> <span class="hljs-string">tasks/main.yml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">inclued:</span> <span class="hljs-string">update.yml</span><br><br><span class="hljs-comment">#更新php同上</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible/roles/php</span>]<span class="hljs-string">$mv</span> <span class="hljs-string">tasks/main.yml</span>  <span class="hljs-string">tasks/install.yml</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible/roles/php</span>]<span class="hljs-string">$vim</span> <span class="hljs-string">tasks/update.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">stop</span> <span class="hljs-string">service</span><br>  <span class="hljs-attr">service:</span> <span class="hljs-string">name=php-fpm</span> <span class="hljs-string">state=stopped</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">php</span><br>  <span class="hljs-attr">yum:</span> <span class="hljs-string">name=php-fpm</span> <span class="hljs-string">state=latest</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">php2</span><br>  <span class="hljs-attr">yum:</span> <span class="hljs-string">name=php-json</span> <span class="hljs-string">state=latest</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">config</span><br>  <span class="hljs-attr">copy:</span> <span class="hljs-string">src=www.conf</span> <span class="hljs-string">dest=/etc/php-fpm.d/www.conf</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">start</span> <span class="hljs-string">service</span><br>  <span class="hljs-attr">service:</span> <span class="hljs-string">name=php-fpm</span> <span class="hljs-string">state=started</span> <span class="hljs-string">enabled=yes</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible/roles/php</span>]<span class="hljs-string">$vim</span> <span class="hljs-string">tasks/main.yml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">inclued:</span> <span class="hljs-string">update.yml</span>  <br><br><span class="hljs-comment">#更新mariadb同上</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible/roles/mysql</span>]<span class="hljs-string">$mv</span> <span class="hljs-string">tasks/main.yml</span>  <span class="hljs-string">tasks/install.yml</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible/roles/mysql</span>]<span class="hljs-string">$vim</span> <span class="hljs-string">tasks/update.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">stop</span> <span class="hljs-string">mariadb</span><br>  <span class="hljs-attr">service:</span> <span class="hljs-string">name=mariadb</span> <span class="hljs-string">state=stopped</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">mariadb</span><br>  <span class="hljs-attr">yum:</span> <span class="hljs-string">name=mariadb-server</span> <span class="hljs-string">state=present</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">start</span> <span class="hljs-string">mariadb</span><br>  <span class="hljs-attr">service:</span> <span class="hljs-string">name=mariadb</span> <span class="hljs-string">state=started</span> <span class="hljs-string">enabled=yes</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible/roles/mysql</span>]<span class="hljs-string">$vim</span> <span class="hljs-string">tasks/main.yml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">inclued:</span> <span class="hljs-string">update.yml</span><br><br><span class="hljs-comment">#playbook不变</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible</span>]<span class="hljs-string">$vim</span> <span class="hljs-string">LAMP.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">apache</span><br>  <span class="hljs-attr">hosts:</span> <span class="hljs-string">Apache</span><br>  <span class="hljs-attr">roles:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">apache</span><br>        <br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">php</span><br>  <span class="hljs-attr">hosts:</span> <span class="hljs-string">php</span><br>  <span class="hljs-attr">roles:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">php</span><br>        <br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">hosts:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">roles:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br>        <br>        <br><span class="hljs-comment">#更新WordPress版本</span><br><span class="hljs-comment">#由于WordPress数据都保存在数据库中，因此原WordPress文件夹中仅需备份配置文件和content下的网页相关文件，安装新版本WordPress后再导入</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">~/LAMP/ansible</span>]<span class="hljs-string">$vim</span> <span class="hljs-string">WordPress.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">php</span><br><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-string">-name:</span> <span class="hljs-string">remove</span> <span class="hljs-string">wordpress</span><br>     <span class="hljs-attr">file:</span> <span class="hljs-string">path=/data/html/wordpress</span> <span class="hljs-string">state=absent</span><br>    <span class="hljs-string">-name:</span> <span class="hljs-string">download</span> <span class="hljs-string">newest</span> <span class="hljs-string">wordpress</span><br>     <span class="hljs-attr">get_url:</span> <span class="hljs-string">url=https://cn.wordpress.org/latest-zh_CN.tar.gz</span>  <span class="hljs-string">dest=/data/html/wordpress.tar.gz</span><br>    <span class="hljs-string">-name:</span> <span class="hljs-string">unarchive</span><br>     <span class="hljs-attr">unarchive:</span> <span class="hljs-string">src=/data/html/wordpress.tar.gz</span>  <span class="hljs-string">dest=/data/html/</span> <span class="hljs-string">copy=no</span><br>    <span class="hljs-string">-name:</span> <span class="hljs-string">change</span> <span class="hljs-string">owner</span><br>     <span class="hljs-attr">file:</span> <span class="hljs-string">path=/data/html/wordpress</span> <span class="hljs-string">state=directory</span> <span class="hljs-string">owner=apache</span> <span class="hljs-string">group=apache</span> <span class="hljs-string">recurse=yes</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ansible基础</title>
    <link href="/2022/07/26/Ansible%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/07/26/Ansible%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>​本文简要介绍了Ansible基础使用方法，常用模块，编写简单的playbook</p><span id="more"></span><h1 id="Ansible介绍"><a href="#Ansible介绍" class="headerlink" title="Ansible介绍"></a>Ansible介绍</h1><p>​Ansible是基于Python开发的自动化运维工具，与自动化部署系统工具Cobbler为同一作者。调用特定的模块完成特定任务，支持自定义模块，可使用任何编程语言写模块。部署简单，基于python和SSH(默认已安装)，agentless，无需代理不依赖PKI（无需ssl）。playbook具有幂等性：任务重复执行效果一致，无需像shell脚本一样通过复杂条件判断实现幂等性。</p><p>​具有以下功能：</p><ul><li>批量执行远程命令,对远程多台主机进行批量安装和配置软件服务，以自动化的方式配置和管理各种服务。</li><li>编排高级的企业级复杂的IT架构任务, Ansible的Playbook和role可以轻松实现大型的IT复杂架构。</li><li>提供自动化运维工具的开发API,如Jumpserver。</li></ul><h1 id="Ansible基础"><a href="#Ansible基础" class="headerlink" title="Ansible基础"></a>Ansible基础</h1><h3 id="编写主机清单"><a href="#编写主机清单" class="headerlink" title="编写主机清单"></a>编写主机清单</h3><p>​在主机清单中按格式填写需要控制的主机列表，需要保障SSH连接畅通。</p><p>​默认的主机清单位置&#x2F;etc&#x2F;ansible&#x2F;hosts  ，实际使用时推荐在项目文件夹下创建hosts文件，针对性控制某个项目的主机群。</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">格式如下</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定连续的多个主机</span><br>[appservers]<br>10.0.0.[1:100]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">可指定SSH端口</span><br>[webservers]<br>www1.magedu.com:2222<br>www2.magedu.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可在主机后跟参数</span><br>ansible_ssh_host #将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.<br>ansible_ssh_port #ssh端口号.如果不是默认的端口号,通过此变量设置.这种可以使用 ip:端口<br>192.168.1.100:2222<br>ansible_ssh_user #默认的 ssh 用户名<br>ansible_ssh_pass #ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)<br>ansible_sudo_pass #sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)<br>ansible_sudo_exe (new in version 1.8) #sudo 命令路径(适用于1.8及以上版本)<br>ansible_connection #与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默<br>认使用 paramiko.1.2 以后默认使用 &#x27;smart&#x27;,&#x27;smart&#x27; 方式会根据是否支持 ControlPersist, 来<br>判断&#x27;ssh&#x27; 方式是否可行.<br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行ansible命令时显示别名,如web01</span><br>[websrvs]<br>web01 ansible_ssh_host=10.0.0.101<br>web02 ansible_ssh_host=10.0.0.102<br><span class="hljs-meta prompt_">#</span><span class="language-bash">对主机组设置变量</span><br>[websrvs:vars]<br>ansible_ssh_password=magedu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">定义testsrvs组中包括两个其它分组,实现组嵌套</span><br>[testsrvs:children] <br>webservers<br>dbservers<br></code></pre></td></tr></table></figure><h3 id="Ansible命令"><a href="#Ansible命令" class="headerlink" title="Ansible命令"></a>Ansible命令</h3><p>​ansible格式：ansible <host-pattern> [-m module_name] [-a args]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">--version #显示版本<br>-m module   #指定模块，默认为command<br>-v #详细过程 -vv -vvv更详细<br>--list-hosts #显示主机列表，可简写 --list<br>-C, --check   #检查，并不执行<br>-T, --timeout=TIMEOUT #执行命令的超时时间，默认10s<br>-k, --ask-pass     #提示输入ssh连接密码，默认Key验证 <br>-u, --user=REMOTE_USER #执行远程执行的用户,默认root<br>-b, --become    #代替旧版的sudo 切换<br>--become-user=USERNAME  #指定sudo的runas用户，默认为root<br>-K, --ask-become-pass  #提示输入sudo时的口令<br>-f FORKS, --forks FORKS #指定并发同时执行ansible任务的主机数<br></code></pre></td></tr></table></figure><p>​<strong>ansible-playbook</strong></p><p>​执行编写好的playbook。使用-C选项模拟执行，可以起到与语法检查类似的效果。</p><p>​<strong>ansible-vault</strong></p><p>​加密解密yml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible-vault [create|decrypt|edit|encrypt|rekey|view]<br>ansible-vault encrypt hello.yml #加密<br>ansible-vault decrypt hello.yml #解密<br>ansible-vault view hello.yml #查看<br>ansible-vault edit hello.yml #编辑加密文件<br>ansible-vault rekey hello.yml #修改口令<br>ansible-vault create new.yml #创建新文件<br></code></pre></td></tr></table></figure><p>​ <strong>ansible-galaxy</strong></p><p>​一般用于下载ansible角色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#搜索项目</span><br>[root@ansible ~]<span class="hljs-comment">#ansible-galaxy search lamp</span><br><span class="hljs-comment">#列出所有已安装的galaxy</span><br>ansible-galaxy list<br><span class="hljs-comment">#安装galaxy,默认下载到~/.ansible/roles下</span><br>ansible-galaxy install geerlingguy.mysql<br>ansible-galaxy install geerlingguy.redis<br><span class="hljs-comment">#删除galaxy</span><br>ansible-galaxy remove geerlingguy.redis<br></code></pre></td></tr></table></figure><p>​<strong>ansible-doc</strong></p><p>​显示模块帮助，包括使用范例</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">ansible-doc [options] [module.<span class="hljs-string">..</span>]<br>-l, <span class="hljs-params">--list</span>       <span class="hljs-comment">#列出可用模块</span><br>-s, <span class="hljs-params">--snippet</span> <span class="hljs-comment">#显示指定模块的playbook片段</span><br></code></pre></td></tr></table></figure><h3 id="Ansible常用模块"><a href="#Ansible常用模块" class="headerlink" title="Ansible常用模块"></a>Ansible常用模块</h3><p><strong>Ping模块： 测试受控主机SSH连接是否可行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible all -m ping<br></code></pre></td></tr></table></figure><p><strong>Shell模块 ：在远端主机用shell执行命令，不具有幂等性，绝大多数命令可由专门模块完成，使用较少。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible websrvs -m shell -a <span class="hljs-string">&#x27;echo $HOSTNAME&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>Copy模块 ：从ansible服务器主控端复制文件到远程主机，默认覆盖  注意: src&#x3D;file 如果是没指明路径,则为当前目录或当前目录下的files目录下的file文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#如目标存在，默认覆盖，此处指定先备份</span><br>ansible websrvs -m copy -a <span class="hljs-string">&quot;src=/root/test1.sh dest=/tmp/test2.sh   owner=wang </span><br><span class="hljs-string">mode=600 backup=yes&quot;</span><br><span class="hljs-comment">#复制/etc/下的文件，不包括/etc/目录自身,注意/etc/后面有/</span><br>ansible websrvs -m copy -a <span class="hljs-string">&quot;src=/etc/ dest=/backup</span><br></code></pre></td></tr></table></figure><p><strong>Get_url模块 : 用于将文件从http、https或ftp下载到被管理机节点上</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible websrvs -m get_url -a <span class="hljs-string">&#x27;url=http://nginx.org/download/nginx-1.18.0.tar.gz dest=/usr/local/src/nginx.tar.gz&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>File 模块：相当于shell中文件管理命令，设置文件属性,创建软链接等</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#state可指定创建目录或文件、删除、软连接等操作</span><br>ansible all -m file  -a <span class="hljs-string">&#x27;path=/data/test.txt state=touch&#x27;</span><br><span class="hljs-comment">#创建软链接</span><br>ansible all -m file -a <span class="hljs-string">&#x27;src=/data/testfile path|dest|name=/data/testfile-link state=link&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>stat 模块：检查文件或文件系统的状态</strong></p><p>#<strong>返回值exists： 判断是否存在  isuid： 调用用户的ID与所有者ID是否匹配</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible 127.0.0.1 -m <span class="hljs-built_in">stat</span> -a <span class="hljs-string">&#x27;path=/etc/passwd&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>Unarchive模块 ：解包解压缩  将ansible主机上的压缩包传到远程主机后解压缩至特定目录</strong><br><strong>Archive模块：打包压缩</strong><br><strong>#选项remote_src：和copy功能一样且互斥，yes表示在远程主机，不在ansible主机，no表示文件在ansible主机上</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible websrvs -m unarchive -a<span class="hljs-string">&#x27;src=https://releases.ansible.com/ansible/ansible-2.1.6.0-0.1.rc1.tar.gz dest=/data/   owner=root remote_src=yes&#x27;</span><br>ansible websrvs -m archive  -a <span class="hljs-string">&#x27;path=/var/log/ dest=/data/log.tar.bz2 format=bz2 </span><br><span class="hljs-string">owner=wang mode=0600&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>Cron模块 ：在远程主机创建定时任务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建任务</span><br>ansible 10.0.0.8 -m cron -a <span class="hljs-string">&#x27;hour=2 minute=30 weekday=1-5 name=&quot;backup mysql&quot; job=/root/mysql_backup.sh&#x27;</span> <span class="hljs-comment">#删除任务</span><br>ansible websrvs -m cron -a <span class="hljs-string">&quot;name=&#x27;backup mysql&#x27; state=absent&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Yum&#x2F;Apt模块： 可以安装、更新软件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible websrvs -m yum -a <span class="hljs-string">&#x27;name=httpd state=present&#x27;</span>  <span class="hljs-comment">#安装</span><br>ansible websrvs -m yum -a <span class="hljs-string">&#x27;name=* state=lastest exclude=kernel*,foo*&#x27;</span> <span class="hljs-comment">#升级除</span><br>kernel和foo开头以外的所有包<br></code></pre></td></tr></table></figure><p><strong>yum_repository 模块： 生成yum仓库文件 ，将仓库文件中的关键信息用键值对的形式表示</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#playbook中写法</span><br><span class="hljs-string">范例：</span><br> <span class="hljs-attr">tasks:</span><br><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Add</span> <span class="hljs-string">multiple</span> <span class="hljs-string">repositories</span> <span class="hljs-string">into</span> <span class="hljs-string">the</span> <span class="hljs-string">same</span> <span class="hljs-string">file</span> <br>     <span class="hljs-attr">yum_repository:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">EPEL</span> <span class="hljs-string">YUM</span> <span class="hljs-string">repo</span><br>      <span class="hljs-attr">file:</span> <span class="hljs-string">external_repos</span><br>      <span class="hljs-attr">baseurl:</span> <span class="hljs-string">https://download.fedoraproject.org/pub/epel/$releasever/$basearch/</span><br></code></pre></td></tr></table></figure><p><strong>service模块： 相当于systemctl</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible all -m service -a <span class="hljs-string">&#x27;name=httpd state=started enabled=yes&#x27;</span><br>ansible all -m service -a <span class="hljs-string">&#x27;name=httpd state=stopped&#x27;</span><br>ansible all -m service -a <span class="hljs-string">&#x27;name=httpd state=reloaded&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>User模块，Group模块 ： 进行用户和用户组管理，uid、gid、家目录、名字等使用键值对表示</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible all -m user -a <span class="hljs-string">&#x27;name=user1 comment=&quot;test user&quot; uid=2048 home=/app/user1 group=root&#x27;</span><br>ansible websrvs -m group  -a <span class="hljs-string">&#x27;name=nginx gid=88 system=yes&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>Setup 模块 : 收集主机的系统信息，可使用filter过滤</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible all -m setup -a <span class="hljs-string">&#x27;filter=ansible_python_version&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>debug 模块 ：此模块可以用于输出信息,并且通过 msg 定制输出的信息内容</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#可输出变量</span><br><span class="hljs-attr">tasks:</span> <br><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">output</span> <span class="hljs-string">variables</span><br>     <span class="hljs-attr">debug:</span><br>     <span class="hljs-attr">msg:</span> <span class="hljs-string">Host</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; ansible_nodename &#125;&#125;</span>&quot;</span> <span class="hljs-string">Ip</span>  <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; ansible_default_ipv4.address </span></span><br><span class="hljs-template-variable"><span class="hljs-string">     &#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h1 id="playbook编写"><a href="#playbook编写" class="headerlink" title="playbook编写"></a>playbook编写</h1><p>​一个playbook 中由多个组件组成,其中所用到的常见组件类型如下:</p><ul><li><p>Hosts 执行的远程主机列表</p></li><li><p>Tasks 任务集,由多个task的元素组成的列表实现,每个task是一个字典,一个完整的代码块功能需最少元素需包括 name 和 task,一个name只能包括一个task</p></li><li><p>Variables 内置变量或自定义变量在playbook中调用</p></li><li><p>Templates 模板，可替换模板文件中的变量并实现一些简单逻辑的文件</p></li><li><p>Handlers 和 notify 结合使用，由特定条件触发的操作，满足条件方才执行，否则不执行</p></li><li><p>tags 标签 指定某条任务执行，用于选择运行playbook中的部分代码。ansible具有幂等性，因此会自动跳过没有变化的部分，即便如此，有些代码为测试其确实没有发生变化的时间依然会非常地长。此时，如果确信其没有变化，就可以通过tags跳过此些代码片断。</p></li></ul><p>​playbook 剧本是由一个或多个”play”组成的列表。将预定义的一组主机，装扮成事先通过ansible中的task定义好的角色。Task实际是调用ansible的一个module，将多个play组织在一个playbook中，即可以让它们联合起来，按事先编排的机制执行预定义的动作。Playbook 文件是采用YAML语言编写的。</p><h3 id="安装httpd服务"><a href="#安装httpd服务" class="headerlink" title="安装httpd服务"></a>安装httpd服务</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#在hosts文件加入受控主机，安装httpd服务，放置测试网页，启动服务</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta">  </span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">websrvs</span><br><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">httpd</span><br>      <span class="hljs-attr">yum:</span> <span class="hljs-string">name=httpd</span> <span class="hljs-string">state=present</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">html</span><br>      <span class="hljs-attr">copy:</span> <span class="hljs-string">src=/data/index.html</span> <span class="hljs-string">/var/www/html/index.html</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">start</span> <span class="hljs-string">httpd</span><br>      <span class="hljs-attr">service:</span> <span class="hljs-string">name=httpd</span> <span class="hljs-string">state=started</span> <span class="hljs-string">enabled=yes</span><br><span class="hljs-comment">#测试语法，结果如下则没有问题</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">/data/ansible/httpd</span>]<span class="hljs-string">$ansible-playbook</span> <span class="hljs-string">--syntax</span> <span class="hljs-string">httpd.yml</span><br><br><span class="hljs-attr">playbook:</span> <span class="hljs-string">httpd.yml</span><br><span class="hljs-comment">#运行</span><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">/data/ansible/httpd</span>]<span class="hljs-string">$ansible-playbook</span>  <span class="hljs-string">httpd.yml</span><br><br><span class="hljs-string">PLAY</span> <span class="hljs-string">RECAP</span> <span class="hljs-string">**************************************************************************************************************************************</span><br><span class="hljs-attr">10.0.0.157                 :</span> <span class="hljs-string">ok=4</span>    <span class="hljs-string">changed=0</span>    <span class="hljs-string">unreachable=0</span>    <span class="hljs-string">failed=0</span>    <span class="hljs-string">skipped=0</span>    <span class="hljs-string">rescued=0</span>    <span class="hljs-string">ignored=0</span>   <br><br><br>[<span class="hljs-string">root@centos8</span> <span class="hljs-string">/data/ansible/httpd</span>]<span class="hljs-string">$curl</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.157</span><br><span class="hljs-string">hello</span> <span class="hljs-string">!</span><br></code></pre></td></tr></table></figure><p>​</p>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议工作过程</title>
    <link href="/2022/07/26/HTTP%E5%8D%8F%E8%AE%AE%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B/"/>
    <url>/2022/07/26/HTTP%E5%8D%8F%E8%AE%AE%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>​简要概括HTTP协议相关概念和工作过程</p><span id="more"></span><p>​</p><h1 id="HTTP基础概念"><a href="#HTTP基础概念" class="headerlink" title="HTTP基础概念"></a>HTTP基础概念</h1><p>​HTTP（HyperText Transfer Protocol，超文本传输协议）是一种用于分布式、协作式和超媒体信息系统</p><p>的应用层协议。</p><p>​浏览器访问网站的过程可分为：DNS解析、TCP连接、处理HTTP请求、浏览器渲染。其中HTTP服务通信过程则涉及客户端发送请求报文和接收服务器端响应报文。在建立通信连接的每一端，进程间的传输要有两个标志：IP地址和端口号，合称为套接字地址 socket address。</p><h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><p>​<img src="image-20220726163225881.png" alt="image-20220726163225881"></p><p>​方法为客户端对网页的操作，例如GET下载页面、POST上传；URL为统一资源定位符，版本为http协议版本，首部字段行内包含了访问页面位置。后续则为实际携带数据。</p><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p><img src="image-20220726163446893.png" alt="image-20220726163446893"></p><p>​<img src="image-20220726163702353.png" alt="image-20220726163702353"></p><h1 id="HTTP工作过程"><a href="#HTTP工作过程" class="headerlink" title="HTTP工作过程"></a>HTTP工作过程</h1><p>​客户端使用HTTP协议访问某静态网站。</p><p>​客户端通过网站域名解析得网站ip和端口号，创建新的套接字并尝试连接到该ip的对应端口上，服务器端收到请求，通过TCP协议建立连接，客户端确认连接成功后发送请求报文，服务器端收到请求报文后，分析请求报文中的方法、URL、首部字段行指定的位置，在返回的响应报文中包含了网页资源，发送后断开连接，客户端处理完响应报文后也断开连接，此时客户端浏览器将得到的资源渲染成看到的网页。</p><p>​由于HTTP协议完成一次请求和响应后就断开连接的特性，对事物处理没有记忆能力，无法实现交互式web应用程序，因此目前还需要配合cookie、session解决这一问题。</p><p>​<img src="image-20220726164736086.png" alt="image-20220726164736086"></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PXC集群搭建</title>
    <link href="/2022/07/26/PXC%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/07/26/PXC%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>​在3台主机上使用Percona Xtradb Cluster搭建简单的PXC集群。</p><span id="more"></span><p>​在之前的Mysql集群架构文章中，演示了多主架构，其具有容易数据不一致、同时进行某一操作会互相锁死的问题。而PXC架构则即具有多主架构的特点，又通过特殊的机制解决了上述问题。</p><h1 id="PXC原理"><a href="#PXC原理" class="headerlink" title="PXC原理"></a>PXC原理</h1><p>​全称Percona Xtradb Cluster，是Galera Cluste方案的一种版本，与MariaDB Cluster类似。Galera本身是具有多主特性的，即采用multi-master的集群架构，是一个既稳健，又在数据一致性、完整性及高性能方面有出色表现的高可用解决方案。</p><p>​Galera Cluster的优点有：实现多节点读写，节点间无延迟同步复制，故障切换方便，热插拔，自动克隆数据使新增节点或有节点停机时不需要人工备份。</p><p>​缺点：为了防止冲突，使用DDL语句时需要全局验证，集群性能由集群中最差性能节点决定。全量拷贝数据时，提供数据的donor节点无法对外提供读写服务。</p><h1 id="PXC集群搭建"><a href="#PXC集群搭建" class="headerlink" title="PXC集群搭建"></a>PXC集群搭建</h1><p>​使用软件版本：Percona XtraDB Cluster 5.7      （不支持CentOS8，与Mysql不兼容）</p><p>​使用虚拟机：10.0.0.152    10.0.0.154    10.0.0.155</p><p>​</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#若yum源中没有该软件，可添加国内镜像站点percona路径</span><br><span class="hljs-comment">#分别在3台主机上安装</span><br>[root@localhost ~]<span class="hljs-variable">$yum</span> install Percona-XtraDB-Cluster-57 -y<br><br><span class="hljs-comment">#修改配置文件</span><br><span class="hljs-comment">#位置/etc/percona-xtradb-cluster.conf.d   /etc/my.cnf</span><br>[root@localhost ~]<span class="hljs-variable">$ls</span> /etc/percona-xtradb-cluster.conf.d<br>mysqld.cnf  mysqld_safe.cnf  wsrep.cnf<br><br><span class="hljs-comment">#第一个节点</span><br>[root@localhost ~]<span class="hljs-variable">$vim</span> /etc/percona-xtradb-cluster.conf.d/wsrep.cnf<br><span class="hljs-comment">#添加集群节点</span><br>wsrep_cluster_address=gcomm://10.0.0.152,10.0.0.154,10.0.0.155 <br><span class="hljs-comment">#指定当前节点IP</span><br>wsrep_node_address=10.0.0.152<br><span class="hljs-comment">#在SST传输时需要用到的认证凭据，格式为：&quot;用户：密码&quot;，实际使用时需要修改为更安全的密码</span><br>wsrep_sst_auth=<span class="hljs-string">&quot;sstuser:s3cretPass&quot;</span><br><span class="hljs-comment">#当前节点名 If wsrep_node_name is not specified,  then system hostname will be used</span><br>wsrep_node_name=pxc-cluster-node-n67024<br><br><span class="hljs-comment">#第二个节点 未提及则同上</span><br>wsrep_node_address=10.0.0.154<br>wsrep_node_name=pxc-cluster-node-n67025<br><br><span class="hljs-comment">#第三个节点</span><br>wsrep_node_address=10.0.0.155<br>wsrep_node_name=pxc-cluster-node-n67026<br><br><br><span class="hljs-comment">#启动</span><br>[root@localhost ~]<span class="hljs-variable">$systemctl</span> <span class="hljs-built_in">enable</span> --now mysql@bootstrap.service<br><span class="hljs-comment">#通过4567端口进行集群内节点间连接，通过3306端口对外服务</span><br>[root@localhost ~]<span class="hljs-variable">$ss</span> -ntul<br>Netid State      Recv-Q Send-Q                         Local Address:Port                                        Peer Address:Port              <br>    <br>tcp   LISTEN     0      128                                        *:4567                                                   *:*                  <br>                  <br>tcp   LISTEN     0      80                                      [::]:3306                                                [::]:*                  <br><br><span class="hljs-comment">#设置密码</span><br><span class="hljs-comment">#使用临时密码登录</span><br>[root@localhost ~]<span class="hljs-variable">$grep</span> <span class="hljs-string">&quot;temporary password&quot;</span> /var/log/mysqld.log<br>2022-07-26T07:06:53.895451Z 1 [Note] A temporary password is generated <span class="hljs-keyword">for</span> root@localhost: 4&amp;g*HTiU*xkd<br>[root@localhost ~]<span class="hljs-variable">$mysql</span> -uroot -p<span class="hljs-string">&#x27;4&amp;g*HTiU*xkd&#x27;</span><br>mysql&gt; alter user root@localhost identified by <span class="hljs-string">&quot;12345&quot;</span>;<br><span class="hljs-comment">#创建SST传输用户账号，并授权</span><br>mysql&gt; create user <span class="hljs-string">&#x27;sstuser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified by <span class="hljs-string">&#x27;s3cretPass&#x27;</span>;<br>mysql&gt; grant all on *.* to sstuser@localhost;<br><br><span class="hljs-comment">#可通过变量信息查看当前节点状态</span><br>mysql&gt; show status like <span class="hljs-string">&#x27;wsrep%&#x27;</span>;<br><span class="hljs-comment">#查看SST是否完成，若为Joiner，则不可以加新节点</span><br>| wsrep_local_state_comment | Synced                               |<br><span class="hljs-comment">#集群规模</span><br>| wsrep_cluster_size         | 1                                   |<br><span class="hljs-comment">#是否已完全连接</span><br>| wsrep_cluster_status       | Primary                             |<br><br><span class="hljs-comment">#其他节点上启动集群</span><br>[root@localhost ~]<span class="hljs-variable">$systemctl</span> start mysql<br><span class="hljs-comment">#可观察到规模变化</span><br>mysql&gt; show status like <span class="hljs-string">&#x27;wsrep%&#x27;</span>;<br>| wsrep_cluster_size               | 2                                    |<br>mysql&gt; show status like <span class="hljs-string">&#x27;wsrep%&#x27;</span>;<br>| wsrep_cluster_size               | 3                                    |<br><br><span class="hljs-comment">#节点1</span><br>mysql&gt;  SHOW VARIABLES LIKE <span class="hljs-string">&#x27;wsrep_node_name&#x27;</span>;<br>+-----------------+-------------------------+<br>| Variable_name   | Value                   |<br>+-----------------+-------------------------+<br>| wsrep_node_name | pxc-cluster-node-n67024 |<br>+-----------------+-------------------------+<br>mysql&gt;  SHOW VARIABLES LIKE <span class="hljs-string">&#x27;wsrep_node_address&#x27;</span>;<br>+--------------------+------------+<br>| Variable_name      | Value      |<br>+--------------------+------------+<br>| wsrep_node_address | 10.0.0.152 |<br>+--------------------+------------+<br><span class="hljs-comment">#节点2</span><br>[root@localhost ~]<span class="hljs-variable">$mysql</span> -uroot -p12345<br>mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;wsrep_node_name&#x27;</span>;<br>+-----------------+---------------------------+<br>| Variable_name   | Value                     |<br>+-----------------+---------------------------+<br>| wsrep_node_name | pxc-cluster-node-1-n67025 |<br>+-----------------+---------------------------+<br>mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;wsrep_node_address&#x27;</span>;<br>+--------------------+------------+<br>| Variable_name      | Value      |<br>+--------------------+------------+<br>| wsrep_node_address | 10.0.0.154 |<br>+--------------------+------------+<br><span class="hljs-comment">#节点3</span><br>[root@localhost ~]<span class="hljs-variable">$mysql</span> -uroot -p12345<br>mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;wsrep_node_name&#x27;</span>;<br>+-----------------+---------------------------+<br>| Variable_name   | Value                     |<br>+-----------------+---------------------------+<br>| wsrep_node_name | pxc-cluster-node-1-n67026 |<br>+-----------------+---------------------------+<br>mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;wsrep_node_address&#x27;</span>;<br>+--------------------+------------+<br>| Variable_name      | Value      |<br>+--------------------+------------+<br>| wsrep_node_address | 10.0.0.155 |<br>+--------------------+------------+<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>​测试是否均可读写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#节点1<br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>mysql&gt; create database test;<br>#节点2<br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>| test               |<br>+--------------------+<br>mysql&gt; create database test2;<br>#节点3<br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>| test               |<br>| test2              |<br>+--------------------+<br>mysql&gt; create database test3;<br>#节点1<br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>| test               |<br>| test2              |<br>| test3              |<br>+--------------------+<br><br></code></pre></td></tr></table></figure><p>​测试同时输入相同操作是否产生冲突</p><p>​在控制终端中打开撰写栏，选择发送到所有会话</p><p><img src="image-20220726155515530.png" alt="image-20220726155515530"></p><p><img src="image-20220726155645418.png" alt="image-20220726155645418"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#第一个节点<br>mysql&gt; create database test4;<br>ERROR 1007 (HY000): Can&#x27;t create database &#x27;test4&#x27;; database exists<br>#第二个节点<br>mysql&gt; create database test4;<br>Query OK, 1 row affected (0.00 sec)<br>#第三个节点<br>mysql&gt; create database test4;<br>ERROR 1007 (HY000): Can&#x27;t create database &#x27;test4&#x27;; database exists<br></code></pre></td></tr></table></figure><p>​数据库成功创建并且没有卡死，在三个节点上也能查看到test4数据库。说明PXC集群解决了多主架构的冲突问题。</p><p>​若想要扩展新的节点也很简单，只要在新主机上安装并修改配置文件即可加入集群，需要注意由于Galare集群数据同步的特性将完全覆盖原有数据。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PXC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库总结</title>
    <link href="/2022/07/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><ul><li><p><strong>数据库基础</strong></p></li><li><p><strong>简述DDL,DML,DCL,DQL，并且说明mysql各个关键字查询时候的先后顺序</strong>，<strong>查询语句示例</strong></p><p><a href="https://gituserusegit.github.io/2022/07/19/SQL%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/">https://gituserusegit.github.io/2022/07/19/SQL%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</a></p></li><li><p><strong>xtrabackup备份和还原数据库练习</strong></p></li></ul><p><a href="https://gituserusegit.github.io/2022/07/20/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F/">https://gituserusegit.github.io/2022/07/20/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F/</a></p><ul><li><strong>实现mysql主从复制，主主复制和半同步复制</strong></li></ul><p><a href="https://gituserusegit.github.io/2022/07/20/Mysql%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/">https://gituserusegit.github.io/2022/07/20/Mysql%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/</a></p><ul><li><strong>用mycat实现mysql的读写分离</strong></li></ul><p><a href="https://gituserusegit.github.io/2022/07/20/Mycat%E5%AE%9E%E7%8E%B0Mysql%E7%9A%84%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/">https://gituserusegit.github.io/2022/07/20/Mycat%E5%AE%9E%E7%8E%B0Mysql%E7%9A%84%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</a></p><ul><li><strong>解决多主架构问题，PXC集群搭建</strong></li></ul><p><a href="https://gituserusegit.github.io/2022/07/26/PXC%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">https://gituserusegit.github.io/2022/07/26/PXC%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mycat实现Mysql的读写分离</title>
    <link href="/2022/07/20/Mycat%E5%AE%9E%E7%8E%B0Mysql%E7%9A%84%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    <url>/2022/07/20/Mycat%E5%AE%9E%E7%8E%B0Mysql%E7%9A%84%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<p>​本文将使用下方文章中的主从架构加上另一台Mycat主机实现读写分离。<a href="https://gituserusegit.github.io/2022/07/20/Mysql%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/">https://gituserusegit.github.io/2022/07/20/Mysql%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/</a></p><span id="more"></span><p>​Mycat是一个开源的分布式数据库系统，是一个实现了MySQL协议的服务器，前端用户可以把它看作是</p><p>一个数据库代理（类似于Mysql Proxy），用MySQL客户端工具和命令行访问，而其后端可以用MySQL</p><p>原生协议与多个MySQL服务器通信，也可以用JDBC协议与大多数主流数据库服务器通信，其核心功能是</p><p>分表分库，即将一个大表水平分割为N个小表，存储在后端MySQL服务器里或者其他数据库里。</p><h1 id="Mycat安装和配置"><a href="#Mycat安装和配置" class="headerlink" title="Mycat安装和配置"></a>Mycat安装和配置</h1><p>​规划的主机  Mycat：10.0.0.152   master:10.0.0.150   slave:10.0.0.157</p><p>​在10.0.0.152主机上安装</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]$yum install -y java<br>[root@localhost ~]$wget http://dl.mycat.org.cn/1.6.7.6/20210303094759/Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz<br>[root@localhost ~]$mkdir /apps<br>[root@localhost ~]$tar xvf Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz -C /apps/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置环境变量</span><br>[root@localhost ~]$echo &#x27;PATH=/apps/mycat/bin:$PATH&#x27; &gt; /etc/profile.d/mycat.sh<br>[root@localhost ~]$source /etc/profile.d/mycat.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看日志确定启动是否成功</span><br>[root@localhost ~]$mycat start<br>[root@localhost ~]$tail /apps/mycat/logs/wrapper.log<br>INFO   | jvm 1    | 2022/07/20 21:21:55 | MyCAT Server startup successfully. see logs in logs/mycat.log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">此时其他客户端主机已可访问Mycat</span><br>[root@rhel ~]# mysql -uroot -p123456  -h 10.0.0.152 -P8066 --default_auth=mysql_native_password<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 6<br>Server version: 5.6.29-mycat-1.6.7.6-release-20210303094759 MyCat Server (OpenCloudDB)<br><br>Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><span class="hljs-meta prompt_">#</span><span class="language-bash">此时看到的数据库在完成后续配置后将成为主从数据库的映射。用户访问看到的是主从服务器的内容</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show databases;</span><br>+----------+<br>| DATABASE |<br>+----------+<br>| TESTDB   |<br>+----------+<br><br></code></pre></td></tr></table></figure><h3 id="配置server-xml"><a href="#配置server-xml" class="headerlink" title="配置server.xml"></a>配置<strong>server.xml</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">[root@localhost ~]$vim /apps/mycat/conf/server.xml<br>...省略...<br>#修改下面行的8066改为3306复制到到独立非注释行<br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;serverPort&quot;</span>&gt;</span>3306<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;handlelDistributedTransactions&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> #将上面行放在此行前面<br>#或者删除注释,并修改下面行的8066改为3306<br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;serverPort&quot;</span>&gt;</span>3306<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;managerPort&quot;</span>&gt;</span>9066<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;idleTimeout&quot;</span>&gt;</span>300000<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;authTimeout&quot;</span>&gt;</span>15000<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bindIp&quot;</span>&gt;</span>0.0.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataNodeIdleCheckPeriod&quot;</span>&gt;</span>300000<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> #5 * 60 * 1000L; //连<br>接空闲检查 删除#后面此部分<br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;frontWriteQueueSize&quot;</span>&gt;</span>4096<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> </span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;processors&quot;</span>&gt;</span>32<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> #--&gt; 删除#后面此部分<br> .....<br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span>                                       #连接Mycat的用户名<br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>magedu<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>          #连接Mycat的密码<br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>           #数据库名要和schema.xml相对应<br></code></pre></td></tr></table></figure><h3 id="配置schema-xml实现读写分离"><a href="#配置schema-xml实现读写分离" class="headerlink" title="配置schema.xml实现读写分离"></a>配置<strong>schema.xml</strong>实现读写分离</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml">#修改多行后最终如下<br>[root@localhost ~]$vim /apps/mycat/conf/schema.xml<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mycat</span>:schema <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;schema.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mycat:schema</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TESTDB&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;hellodb&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;host1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;10.0.0.18:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">readHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;host2&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;10.0.0.28:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:schema</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="主从节点配置"><a href="#主从节点配置" class="headerlink" title="主从节点配置"></a>主从节点配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#主服务器为mycat服务创建账号并授权<br>#由于主从复制机制，从服务器上也进行了以下操作<br>mysql&gt; create user root@&#x27;10.0.0.%&#x27; identified by &#x27;123456&#x27;;<br>mysql&gt; GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;10.0.0.%&#x27;;<br>mysql&gt; flush privileges;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">此时已完成Mycat读写分离，客户端主机访问Mycat主机</span><br>[root@rhel ~]# mysql -uroot -p123456  -h 10.0.0.152 --default_auth=mysql_native_password<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">use TESTDB;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进行查询，读操作实际访问从节点</span><br><span class="hljs-meta prompt_">MySQL&gt; </span><span class="language-bash">select @@server_id;</span><br>+-------------+<br>| @@server_id |<br>+-------------+<br>|         157 |<br>+-------------+<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改数据，读操作实际访问主节点，可以在/var/lib/mysql/master.log中查看到相应记录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">需要先开启通用日志，持续生效可修改配置文件</span><br>[root@centos8 ~]$mysql<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in">set</span> global  general_log=1;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">停止从节点，Mycat自动调度读请求至主节点</span><br>[root@centos8 ~]$systemctl stop mysqld<br>[root@rhel ~]# mysql -uroot -p123456  -h 10.0.0.152 --default_auth=mysql_native_password<br><span class="hljs-meta prompt_">MySQL&gt; </span><span class="language-bash">select @@server_id;</span><br>+-------------+<br>| @@server_id |<br>+-------------+<br>|         150 |<br>+-------------+<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点无法代替主节点</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mycat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql集群架构</title>
    <link href="/2022/07/20/Mysql%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/07/20/Mysql%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>​</p><p>​在2台CentOS8主机上使用Mysql8.0实现mysql主从复制架构，主主复制架构和半同步复制。</p><p>​<span id="more"></span></p><h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><p>​master：10.0.0.150    slave：10.0.0.157</p><p>​Mysql8.0数据库主从架构实现读写分离，主节点只负责写，从节点只负责读，每个节点都有相同的数据集，向外扩展，基于二进制日志的单向复制。</p><h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><p><strong>主节点：</strong></p><ol><li>修改配置，确保开启二进制日志，server-id唯一</li><li>创建复制账号</li><li>show master logs记录二进制日志名和位置</li></ol><p><strong>从节点：</strong></p><ol><li>修改配置，确保开启二进制日志，server-id唯一，开启read-only</li><li>change master to master_host&#x3D;’主节点ip’, master_user&#x3D;’复制账号’ , master_port&#x3D;主节点端口, master_log_file&#x3D;’二进制日志名’,  master_log_pos&#x3D;开始复制的位置</li><li>start slave</li></ol><p>​从节点只有开始主从复制后的数据。也可以在配置主从前先对master完全备份，再将sql文件发送到从节点，让从节点获得之前的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">主节点</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改主节点配置文件</span><br>[root@centos8 ~]$vim /etc/my.cnf<br>[mysqld]<br>server-id=150  <br>log-bin       #确保启用二进制日志<br>[root@centos8 ~]$systemctl restart mysqld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看二进制文件和位置</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show master logs;</span><br>+--------------------+-----------+-----------+<br>| Log_name           | File_size | Encrypted |<br>+--------------------+-----------+-----------+<br>| centos8-bin.000001 |       179 | No        |<br>| centos8-bin.000002 |       156 | No        |<br>+--------------------+-----------+-----------+<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建用于主从复制的用户（此步也被记录在二进制文件中，从节点可省去此步）</span><br><span class="hljs-meta prompt_">mysql&gt;</span><span class="language-bash">create user <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;</span><br><span class="hljs-meta prompt_">mysql&gt;</span><span class="language-bash">grant replication slave on *.* to <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改从节点配置文件</span><br>[root@centos8 ~]$vim /etc/my.cnf<br>[mysqld]<br>server-id=157<br>log-bin <br>read_only=ON<br>[root@centos8 ~]$systemctl restart mysqld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在mysql中配置主从复制，需要与上述信息对应</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">一般情况还需要在master_password中指定复制账号的密码，本次实验中未设置密码，所以省略</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">change master to master_host=<span class="hljs-string">&#x27;10.0.0.150&#x27;</span>, master_user=<span class="hljs-string">&#x27;repl&#x27;</span> , master_port=3306, master_log_file=<span class="hljs-string">&#x27;centos8-bin.000002&#x27;</span>,  master_log_pos=156;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看是否成功</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">start slave;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show slave status\G</span><br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting for source to send event<br>                  Master_Host: 10.0.0.150<br>                  Master_User: repl<br>                  Master_Port: 3306<br>                Connect_Retry: 60<br>              Master_Log_File: centos8-bin.000002<br>          Read_Master_Log_Pos: 612<br>               Relay_Log_File: centos8-relay-bin.000002<br>                Relay_Log_Pos: 782<br>        Relay_Master_Log_File: centos8-bin.000002<br>             Slave_IO_Running: Yes#主从复制需要这两项线程<br>            Slave_SQL_Running: Yes#查看是否启动可判定配置是否成功<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证数据同步</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show databases;</span><br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">主节点</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">create database hellodb;</span><br>Query OK, 1 row affected (0.01 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">use hellodb;</span><br>Database changed<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">create table students(stuid int,name varchar(20),age tinyint);</span><br>Query OK, 0 rows affected (0.01 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">insert students values(1,<span class="hljs-string">&#x27;zhangsan&#x27;</span>,20);</span><br>Query OK, 1 row affected (0.01 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">insert students values(2,<span class="hljs-string">&#x27;lisi&#x27;</span>,22);</span><br>Query OK, 1 row affected (0.01 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">use hellodb;</span><br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">select * from students;</span><br>+-------+----------+------+<br>| stuid | name     | age  |<br>+-------+----------+------+<br>|     1 | zhangsan |   20 |<br>|     2 | lisi     |   22 |<br>+-------+----------+------+<br><br></code></pre></td></tr></table></figure><h1 id="主主复制"><a href="#主主复制" class="headerlink" title="主主复制"></a>主主复制</h1><p>​两个节点都可以读写数据，并且互相同步。相当于两个节点互为主从。</p><p>​双主架构容易产生数据不一致问题，同时进行某一操作时会导致产生冲突，之后无法进行任何操作。因此数据库实际使用时不会开启多个主节点，仅在主节点故障时启用另一个主节点替换。</p><p>​配置过程类似主从架构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">第一个主节点</span><br>[root@centos8 ~]$vim /etc/my.cnf<br>[mysqld]<br>server-id=150<br>log-bin<br>auto_increment_offset=1         #设置自动增长id间隔<br>auto_increment_increment=2      #并不能完全解决双主冲突问题  <br>[root@centos8 ~]$systemctl restart mysqld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看二进制文件和位置</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show master logs;</span><br>+--------------------+-----------+-----------+<br>| Log_name           | File_size | Encrypted |<br>+--------------------+-----------+-----------+<br>| centos8-bin.000001 |       179 | No        |<br>| centos8-bin.000002 |       156 | No        |<br>+--------------------+-----------+-----------+<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建用于主从复制的用户（此步也被记录在二进制文件中，从节点可省去此步）</span><br><span class="hljs-meta prompt_">mysql&gt;</span><span class="language-bash">create user <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;</span><br><span class="hljs-meta prompt_">mysql&gt;</span><span class="language-bash">grant replication slave on *.* to <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二个主节点</span><br>[root@centos8 ~]$vim /etc/my.cnf<br>[mysqld]<br>server-id=157<br>log-bin <br>auto_increment_offset=1        <br>auto_increment_increment=2        <br>[root@centos8 ~]$systemctl restart mysqld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">change master to master_host=<span class="hljs-string">&#x27;10.0.0.150&#x27;</span>, master_user=<span class="hljs-string">&#x27;repl&#x27;</span> , master_port=3306, master_log_file=<span class="hljs-string">&#x27;centos8-bin.000002&#x27;</span>,  master_log_pos=156;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">start slave;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看二进制文件和位置</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show master logs;</span><br>+---------------+-----------+-----------+<br>| Log_name      | File_size | Encrypted |<br>+---------------+-----------+-----------+<br>| binlog.000001 |       674 | No        |<br>+---------------+-----------+-----------+<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一个主节点</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">change master to master_host=<span class="hljs-string">&#x27;10.0.0.157&#x27;</span>, master_user=<span class="hljs-string">&#x27;repl&#x27;</span> , master_port=3306, master_log_file=<span class="hljs-string">&#x27;binlog.000001&#x27;</span>,  master_log_pos=674;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">start slave;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">此时已完成双主架构，可互相同步对方修改数据，但若在两个服务器上同时执行某个操作就会互相冲突，导致数据库瘫痪</span><br></code></pre></td></tr></table></figure><h1 id="半同步复制"><a href="#半同步复制" class="headerlink" title="半同步复制"></a>半同步复制</h1><p>​默认情况下，MySQL的复制功能是异步的，主库把binlog日志发送给从库即结束，并不验证从库是否接收完毕。这意味着当主服务器或从服务器端发生故障时，有可能从服务器没有接收到主服务器发送过来的binlog日志，这就会造成主服务器和从服务器的数据不一致，甚至在恢复时造成数据的丢失。</p><p>​若采用同步复制，即等到所有从库确认接收完毕后才告知用户成功则等待时间过长，性能不佳。综合考虑安全性和性能则采用半同步，则只要有一个从库确认接收完毕就判断复制成功，若等待时间过长超过设定的阈值也先告知用户成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">半同步复制可直接在上述主从架构的基础上建立，仅需安装相关插件并修改配置文件</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装插件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">主节点</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">INSTALL PLUGIN rpl_semi_sync_master SONAME <span class="hljs-string">&#x27;semisync_master.so&#x27;</span>;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">SET GLOBAL rpl_semi_sync_master_enabled=1;<span class="hljs-comment">#临时修改</span></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">SET GLOBAL rpl_semi_sync_master_timeout = 3000;  <span class="hljs-comment">#时间阈值3s</span></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">SHOW GLOBAL VARIABLES LIKE <span class="hljs-string">&#x27;%semi%&#x27;</span>;</span><br>+-------------------------------------------+------------+<br>| Variable_name                             | Value      |<br>+-------------------------------------------+------------+<br>| rpl_semi_sync_master_enabled              | ON         |<br>| rpl_semi_sync_master_timeout              | 3000       |<br>| rpl_semi_sync_master_trace_level          | 32         |<br>| rpl_semi_sync_master_wait_for_slave_count | 1          |<br>| rpl_semi_sync_master_wait_no_slave        | ON         |<br>| rpl_semi_sync_master_wait_point           | AFTER_SYNC |<br>+-------------------------------------------+------------+<br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">install plugin rpl_semi_sync_slave SONAME <span class="hljs-string">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">SET GLOBAL rpl_semi_sync_slave_enabled=1;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"> SHOW GLOBAL VARIABLES LIKE <span class="hljs-string">&#x27;%semi%&#x27;</span>;</span><br>+---------------------------------+-------+<br>| Variable_name                   | Value |<br>+---------------------------------+-------+<br>| rpl_semi_sync_slave_enabled     | ON    |<br>| rpl_semi_sync_slave_trace_level | 32    |<br>+---------------------------------+-------+<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置，在上述主从架构的配置文件中添加2条插件配置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">主节点</span><br>[root@centos8 ~]$vim /etc/my.cnf<br>[mysqld]<br>server-id=150<br>log-bin<br>rpl_semi_sync_master_enabled=ON #修改此行,需要先安装semisync_master.so插件后,再重启,否<br>则无法启动<br>rpl_semi_sync_master_timeout=3000   #设置3s内无法同步，也将返回成功信息给客户端<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点</span><br>[root@centos8 ~]$vim /etc/my.cnf<br>[mysqld]<br>server-id=157<br>log-bin<br>rpl_semi_sync_slave_enabled=ON <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置后重启mysql服务生效</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点还需要重启slave</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">stop slave;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">start slave;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">SHOW GLOBAL STATUS LIKE <span class="hljs-string">&#x27;%semi%&#x27;</span>;</span><br>+----------------------------+-------+<br>| Variable_name              | Value |<br>+----------------------------+-------+<br>| Rpl_semi_sync_slave_status | ON    |<br>+----------------------------+-------+<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>主从复制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql数据库备份和还原</title>
    <link href="/2022/07/20/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F/"/>
    <url>/2022/07/20/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F/</url>
    
    <content type="html"><![CDATA[<p>​本文将概述使用Xtrabackup工具备份和还原Mysql8.0数据库。</p><span id="more"></span><p>​Xtrabackup是percona提供的mysql数据库备份工具，惟一能够对innodb和xtradb数据库进行热备的开源工具。软件包为percona-xtrabackup ，在Epel源中。（CentOS8默认没有提供，需要先按照percona源）</p><h1 id="Xtrabackup备份和还原"><a href="#Xtrabackup备份和还原" class="headerlink" title="Xtrabackup备份和还原"></a>Xtrabackup备份和还原</h1><p>​xtrabackup工具备份和还原，需要三步实现</p><p>​备份：对数据库做完全或增量备份</p><p>​预准备： 还原前，先对备份的数据，整理至一个临时目录</p><p>​还原：将整理好的数据，复制回数据库目录中</p><p>​还原需要注意：还原目录需要为空，因为默认不会覆盖文件。还原前要关停数据库实例。检查备份还原过程文件的所属者所属组是否发生变化。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>​以下为xtrabackup旧版本命令，新版本备份和还原步骤依然为上述三步，使用方法类似。</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">备份</span><br>innobackupex [option] BACKUP-ROOT-DIR<br><br>--user：#该选项表示备份账号<br>--password：#该选项表示备份的密码<br>--host：#该选项表示备份数据库的地址<br>--databases：#该选项接受的参数为数据库名，如果要指定多个数据库，彼此间需要以空格隔开；<br>如：&quot;xtra_test dba_test&quot;，同时，在指定某数据库时，也可以只指定其中的某张表。<br>如：&quot;mydatabase.mytable&quot;。该选项对innodb引擎表无效，还是会备份所有innodb表<br>--defaults-file：#该选项指定从哪个文件读取MySQL配置，必须放在命令行第一个选项位置<br>--incremental：#该选项表示创建一个增量备份，需要指定--incremental-basedir<br>--incremental-basedir：#该选项指定为前一次全备份或增量备份的目录，与--incremental同时使用<br>--incremental-dir：#该选项表示还原时增量备份的目录<br>--include=name：#指定表名，格式：databasename.tablename<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">预准备</span><br>innobackupex --apply-log [option] BACKUP-DIR<br><br>--apply-log：#一般情况下,在备份完成后，数据尚且不能用于恢复操作，因为备份的数据中可能会包含尚未提交的事务或已经提交但尚未同步至数据文件中的事务。因此，此时数据文件仍处理不一致状态。此选项作用是通过回滚未提交的事务及同步已经提交的事务至数据文件使数据文件处于一致性状态<br>--use-memory：#和--apply-log选项一起使用，当prepare 备份时，做crash recovery分配的内存大小，单位字节，也可1MB,1M,1G,1GB等，推荐1G<br>--export：#表示开启可导出单独的表之后再导入其他Mysql中<br>--redo-only：#此选项在prepare base full backup，往其中合并增量备份时候使用，但不包括对最后<br>一个增量备份的合并<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">还原</span><br>innobackupex --copy-back [选项] BACKUP-DIR<br>innobackupex --move-back [选项] [--defaults-group=GROUP-NAME] BACKUP-DIR<br>--copy-back：#做数据恢复时将备份数据文件拷贝到MySQL服务器的datadir<br>--move-back：#这个选项与--copy-back相似，唯一的区别是它不拷贝文件，而是移动文件到目的地。这<br>个选项移除backup文件，用时候必须小心。使用场景：没有足够的磁盘空间同事保留数据文件和Backup副本<br>--force-non-empty-directories #指定该参数时候，使得innobackupex --copy-back或--moveback选项转移文件到非空目录，已存在的文件不会被覆盖。如果--copy-back和--move-back文件需要从备<br>份目录拷贝一个在datadir已经存在的文件，会报错失败<br></code></pre></td></tr></table></figure><h3 id="使用新版本完全备份和增量备份并还原"><a href="#使用新版本完全备份和增量备份并还原" class="headerlink" title="使用新版本完全备份和增量备份并还原"></a>使用新版本完全备份和增量备份并还原</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#新建数据库和表<br>mysql&gt; creat database hellodb2；<br>mysql&gt; create table class(classid int,name varchar(20),age tinyint);<br>mysql&gt; insert class values(1,&#x27;n67024&#x27;,67);<br>mysql&gt; insert class values(2,&#x27;root&#x27;,24);<br>mysql&gt; select * from class；<br>+---------+--------+------+<br>| classid | name   | age  |<br>+---------+--------+------+<br>|       1 | n67024 |   67 |<br>|       2 | root   |   24 |<br>+---------+--------+------+<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">完全备份，测试环境没有设置密码，实际使用时需要-p选项加上数据库用户密码。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认显示备份过程</span><br>[root@centos8 ~]mkdir /backup<br>[root@centos8 ~]$xtrabackup -uroot --backup --target-dir=/backup/base<br>2022-07-20T21:12:55.000209+08:00 0 [Note] [MY-011825] [Xtrabackup] completed OK!<br><br>[root@centos8 ~]$ls /backup/base<br>backup-my.cnf  hellodb         ibdata1    performance_schema  undo_002                xtrabackup_info<br>binlog.000004  hellodb2        mysql      sys                 xtrabackup_binlog_info  xtrabackup_logfile<br>binlog.index   ib_buffer_pool  mysql.ibd  undo_001            xtrabackup_checkpoints  xtrabackup_tablespaces<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改数据<br>mysql&gt; insert class values(3,&#x27;admin&#x27;,33);<br>mysql&gt; update class set age=42 where classid=2;<br>mysql&gt; select * from class;<br>+---------+--------+------+<br>| classid | name   | age  |<br>+---------+--------+------+<br>|       1 | n67024 |   67 |<br>|       2 | root   |   42 |<br>|       3 | admin  |   33 |<br>+---------+--------+------+<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">增量备份</span><br>[root@centos8 ~]$xtrabackup -uroot --backup --target-dir=/backup/inc1 --incremental-basedir=/backup/base<br>2022-07-20T21:25:48.902750+08:00 0 [Note] [MY-011825] [Xtrabackup] completed OK!<br>[root@centos8 ~]$ls /backup/inc1<br>backup-my.cnf  hellodb2        mysql               sys             undo_002.meta           xtrabackup_logfile<br>binlog.000005  ib_buffer_pool  mysql.ibd.delta     undo_001.delta  xtrabackup_binlog_info  xtrabackup_tablespaces<br>binlog.index   ibdata1.delta   mysql.ibd.meta      undo_001.meta   xtrabackup_checkpoints<br>hellodb        ibdata1.meta    performance_schema  undo_002.delta  xtrabackup_info<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份完毕将文件放到远程主机</span><br>[root@centos8 ~]$scp -r /backup/* 10.0.0.151:/backup/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">模拟mysql服务器主机故障，丢失全部数据库文件</span><br>[root@centos8 ~]$ls /var/lib/mysql<br>ls: cannot access &#x27;/var/lib/mysql&#x27;: No such file or directory<br>[root@centos8 ~]$service mysqld stop<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">还原数据，重新安装mysql，从远程主机获取备份文件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">预准备，加上--apply-log-only可阻止未完成事务回滚</span><br>[root@centos8 ~]$xtrabackup --prepare --apply-log-only --target-dir=/backup/base<br><span class="hljs-meta prompt_">#</span><span class="language-bash">合并增量备份到完全备份</span><br>[root@centos8 ~]$xtrabackup --prepare --apply-log-only --target-dir=/backup/base --incremental-dir=/backup/inc1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">还原文件</span><br>[root@centos8 ~]$xtrabackup --copy-back --target-dir=/backup/base<br><span class="hljs-meta prompt_">#</span><span class="language-bash">若还原时报错，显示未完成预准备，则不加--apply-log-only参数再次预准备，然后再进行还原</span><br>[root@centos8 ~]$xtrabackup --prepare --target-dir=/backup/base<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">还原后所属者不是mysql，若不还原属性将导致mysqld不能启动</span><br>[root@centos8 ~]$ll -d /var/lib/mysql<br>drwxr-xr-x 7 root root 321 Jul 20 22:07 /var/lib/mysql<br>[root@centos8 ~]$chown -R mysql:mysql /var/lib/mysql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动mysql，查看数据是否还原</span><br>[root@centos8 ~]$service mysqld start<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">use hellodb2</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">select * from class;</span><br>+---------+--------+------+<br>| classid | name   | age  |<br>+---------+--------+------+<br>|       1 | n67024 |   67 |<br>|       2 | root   |   42 |<br>|       3 | admin  |   33 |<br>+---------+--------+------+<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xtrabackup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL语言基础</title>
    <link href="/2022/07/19/SQL%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/07/19/SQL%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>​本文包括Mysql数据库基本使用方法，简述了SQL语言的分类和基本用法，并且说明mysql各个关键字查询时候的先后顺序。使用常用关键字[GROUP BY&#x2F;HAVING&#x2F;ORDER BY&#x2F;LIMIT]和相关命令进行数据库查询。</p><span id="more"></span><h1 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h1><p>​SQL全称 Structured Query Language，意为结构化查询语言。目前，所有主要的关系数据库管理系统支持某些形式的SQL，大部分数据库至少遵守ANSI SQL89标准，但大部分的SQL代码在不同的数据库系统中并不具有完全的跨平台性。</p><p>​Mysql数据库和其他关系型数据库中含有的常见组件有：数据库、表、索引、视图、用户、存储过程、函数、触发器、事件调度器等。</p><h3 id="SQL语言规范"><a href="#SQL语言规范" class="headerlink" title="SQL语言规范"></a>SQL语言规范</h3><ul><li>SQL 语句不区分大小写</li><li>SQL语句可单行或多行书写，默认以 “ ; “ 结尾</li><li>关键词不能跨多行或简写</li><li>对象命名必须以字母开头，后续可以包括字母,数字和三个特殊字符（# _ $）</li><li>关健字Keyword组成子句clause，多条clause组成语句</li></ul><h3 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h3><ul><li>DDL: Data Defination Language 数据定义语言</li></ul><p>​包含的命令有CREATE，DROP，ALTER。分别可用于创建、删除、修改数据库、表、用户或其他对象。</p><ul><li>DML: Data Manipulation Language 数据操纵语言<br>包含的命令有INSERT，DELETE，UPDATE。主要用来编辑某个表的数据，分别可用于插入记录、删除记录、修改记录。</li><li>DQL：Data Query Language 数据查询语言<br>最常用的语句SELECT，用于查看表和变量中的数据，也可配合关键字对表中数据进行搜索、过滤。</li></ul><p>​关键字包含：WHERE：可按数值过滤查找相应行</p><p>​   GROUP BY：根据指定的条件把查询结果进行”分组”以用于做”聚合”运算，一旦分组，select语  句后只跟分组的字段和聚合函。</p><p>​HAVING: 对分组聚合运算后的结果指定过滤条件</p><p>​   ORDER BY：指定查询结果的排序方式，其中升序为ASC，降序为DESC</p><p>​   LIMIT [[offset,]row_count]：对查询的结果进行输出行数数量限制,跳过offset,显示row_count</p><p>​   行,offset默为值为0</p><p>​使用SELECT查询时需要注意关键字有查询顺序，从先到后分别为：FROM Clause –&gt; WHERE Clause –&gt; GROUP BY –&gt; HAVING Clause –&gt;SELECT –&gt; ORDER BY –&gt; LIMIT</p><p><img src="image-20220719211008482.png" alt="image-20220719211008482"></p><ul><li>DCL：Data Control Language 数据控制语言<br>包含GRANT，REVOKE。分别用于授予和吊销用户的权限，其中注意可以授权用户将权限转授予其他用户。</li><li>TCL：Transaction Control Language 事务控制语言<br>包含COMMIT，ROLLBACK，SAVEPOINT。分别用于提交事务、回滚到事务初始状况，设置保存点。</li></ul><h1 id="Mysql8-0数据库查询示例"><a href="#Mysql8-0数据库查询示例" class="headerlink" title="Mysql8.0数据库查询示例"></a>Mysql8.0数据库查询示例</h1><p>​在hellodb数据库中有students表格，记录了学生id，姓名，年龄，性别，班级id，老师id。scores表记录了学生id、课程id和分数。表格如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><pre><code class="hljs mysql">mysql&gt; use hellodb<br>mysql&gt; select * from students;<br>+-------+---------------+-----+--------+---------+-----------+<br>| StuID | Name          | Age | Gender | ClassID | TeacherID |<br>+-------+---------------+-----+--------+---------+-----------+<br>|     1 | Shi Zhongyu   |  22 | M      |       2 |         3 |<br>|     2 | Shi Potian    |  22 | M      |       1 |         7 |<br>|     3 | Xie Yanke     |  53 | M      |       2 |        16 |<br>|     4 | Ding Dian     |  32 | M      |       4 |         4 |<br>|     5 | Yu Yutong     |  26 | M      |       3 |         1 |<br>|     6 | Shi Qing      |  46 | M      |       5 |      NULL |<br>|     7 | Xi Ren        |  19 | F      |       3 |      NULL |<br>|     8 | Lin Daiyu     |  17 | F      |       7 |      NULL |<br>|     9 | Ren Yingying  |  20 | F      |       6 |      NULL |<br>|    10 | Yue Lingshan  |  19 | F      |       3 |      NULL |<br>|    11 | Yuan Chengzhi |  23 | M      |       6 |      NULL |<br>|    12 | Wen Qingqing  |  19 | F      |       1 |      NULL |<br>|    13 | Tian Boguang  |  33 | M      |       2 |      NULL |<br>|    14 | Lu Wushuang   |  17 | F      |       3 |      NULL |<br>|    15 | Duan Yu       |  19 | M      |       4 |      NULL |<br>|    16 | Xu Zhu        |  21 | M      |       1 |      NULL |<br>|    17 | Lin Chong     |  25 | M      |       4 |      NULL |<br>|    18 | Hua Rong      |  23 | M      |       7 |      NULL |<br>|    19 | Xue Baochai   |  18 | F      |       6 |      NULL |<br>|    20 | Diao Chan     |  19 | F      |       7 |      NULL |<br>|    21 | Huang Yueying |  22 | F      |       6 |      NULL |<br>|    22 | Xiao Qiao     |  20 | F      |       1 |      NULL |<br>|    23 | Ma Chao       |  23 | M      |       4 |      NULL |<br>|    24 | Xu Xian       |  27 | M      |    NULL |      NULL |<br>|    25 | Sun Dasheng   | 100 | M      |    NULL |      NULL |<br>+-------+---------------+-----+--------+---------+-----------+<br><br>mysql&gt; select * from scores;<br>+----+-------+----------+-------+<br>| ID | StuID | CourseID | Score |<br>+----+-------+----------+-------+<br>|  1 |     1 |        2 |    77 |<br>|  2 |     1 |        6 |    93 |<br>|  3 |     2 |        2 |    47 |<br>|  4 |     2 |        5 |    97 |<br>|  5 |     3 |        2 |    88 |<br>|  6 |     3 |        6 |    75 |<br>|  7 |     4 |        5 |    71 |<br>|  8 |     4 |        2 |    89 |<br>|  9 |     5 |        1 |    39 |<br>| 10 |     5 |        7 |    63 |<br>| 11 |     6 |        1 |    96 |<br>| 12 |     7 |        1 |    86 |<br>| 13 |     7 |        7 |    83 |<br>| 14 |     8 |        4 |    57 |<br>| 15 |     8 |        3 |    93 |<br>+----+-------+----------+-------+<br></code></pre></td></tr></table></figure><p>​接下来使用SELECT语句和上述关键字查询特定信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#在students表中，查询年龄大于25岁，且为男性的同学的名字和年龄，以年龄排序<br>mysql&gt; select name,age from students where age&gt;25 and gender=&#x27;M&#x27; order by age;<br>+--------------+-----+<br>| name         | age |<br>+--------------+-----+<br>| Yu Yutong    |  26 |<br>| Xu Xian      |  27 |<br>| Ding Dian    |  32 |<br>| Tian Boguang |  33 |<br>| Shi Qing     |  46 |<br>| Xie Yanke    |  53 |<br>| Sun Dasheng  | 100 |<br>+--------------+-----+<br><br>#以ClassID为分组依据，显示每组的平均年龄，且只查看平均年龄大于30的班级<br>mysql&gt; select classid,avg(age) from students group by classid having avg(age)&gt;30;<br>+---------+----------+<br>| classid | avg(age) |<br>+---------+----------+<br>|       2 |  36.0000 |<br>|       5 |  46.0000 |<br>|    NULL |  63.5000 |<br>+---------+----------+<br><br>#以班级分组，显示其年龄大于平均年龄的人数，按人数排序<br>mysql&gt; select classid,count(*) from students where age &gt; (select avg(age) from students) group by classid order by count(*);<br>+---------+----------+<br>| classid | count(*) |<br>+---------+----------+<br>|       4 |        1 |<br>|       5 |        1 |<br>|    NULL |        1 |<br>|       2 |        2 |<br>+---------+----------+<br><br><br>#显示以X开头的名字的同学的班级，以班级id排序<br>mysql&gt; select classid,name from students where name like &#x27;X%&#x27; order by classID desc;<br>+---------+-------------+<br>| classid | name        |<br>+---------+-------------+<br>|       6 | Xue Baochai |<br>|       3 | Xi Ren      |<br>|       2 | Xie Yanke   |<br>|       1 | Xu Zhu      |<br>|       1 | Xiao Qiao   |<br>|    NULL | Xu Xian     |<br>+---------+-------------+<br><br> #以ClassID分组，显示每班的同学的人数，只看最多人的5个班<br> mysql&gt; select classid,count(*) from students group by classid order by count(*) desc limit 5;<br>+---------+----------+<br>| classid | count(*) |<br>+---------+----------+<br>|       1 |        4 |<br>|       4 |        4 |<br>|       3 |        4 |<br>|       6 |        4 |<br>|       7 |        3 |<br>+---------+----------+<br><br>#以Gender分组，显示各组中年龄大于19的学员的年龄之和<br>mysql&gt; select gender,count(*) from students where age&gt;19 group by gender;<br>+--------+----------+<br>| gender | count(*) |<br>+--------+----------+<br>| M      |       14 |<br>| F      |        3 |<br>+--------+----------+<br><br>#查找成绩前5的学生姓名<br>mysql&gt; select s.name,sc.score from students as s left outer join scores as sc on s.stuid=sc.stuid order by score desc limit 5;<br>+-------------+-------+<br>| name        | score |<br>+-------------+-------+<br>| Shi Potian  |    97 |<br>| Shi Qing    |    96 |<br>| Shi Zhongyu |    93 |<br>| Lin Daiyu   |    93 |<br>| Ding Dian   |    89 |<br>+-------------+-------+<br><br>#显示每个班级的平均分<br>mysql&gt; select s.classid,avg(sc.score) from students as s left outer join scores as sc on s.stuid=sc.stuid where classid is not null group by s.classid order by classid;<br>+---------+---------------+<br>| classid | avg(sc.score) |<br>+---------+---------------+<br>|       1 |       72.0000 |<br>|       2 |       83.2500 |<br>|       3 |       67.7500 |<br>|       4 |       80.0000 |<br>|       5 |       96.0000 |<br>|       6 |          NULL |<br>|       7 |       75.0000 |<br>+---------+---------------+<br><br>#查找成绩高于平均分的同学<br>mysql&gt; select avg(score) from scores<br>    -&gt; ;<br>+------------+<br>| avg(score) |<br>+------------+<br>|    76.9333 |<br>+------------+<br>mysql&gt; select s.classid,s.name,sc.score from students as s left outer join scores as sc on s.stuid=sc.stuid where score &gt; (select avg(score) from scores) order by classid;<br>+---------+-------------+-------+<br>| classid | name        | score |<br>+---------+-------------+-------+<br>|       1 | Shi Potian  |    97 |<br>|       2 | Shi Zhongyu |    77 |<br>|       2 | Shi Zhongyu |    93 |<br>|       2 | Xie Yanke   |    88 |<br>|       3 | Xi Ren      |    86 |<br>|       3 | Xi Ren      |    83 |<br>|       4 | Ding Dian   |    89 |<br>|       5 | Shi Qing    |    96 |<br>|       7 | Lin Daiyu   |    93 |<br>+---------+-------------+-------+<br>#统计人数<br>mysql&gt; select s.classid,count(*) as 人数 from students as s left outer join scores as sc on s.stuid=sc.stuid where score &gt; (select avg(score) from scores) group by classid order by classid;<br>+---------+--------+<br>| classid | 人数   |<br>+---------+--------+<br>|       1 |      1 |<br>|       2 |      3 |<br>|       3 |      2 |<br>|       4 |      1 |<br>|       5 |      1 |<br>|       7 |      1 |<br>+---------+--------+<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库原理总结</title>
    <link href="/2022/07/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​主要总结了一些关系型数据库原理</p><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><span id="more"></span><p>​<strong>存储的数据可分为：</strong></p><p>​结构化的数据，即有固定格式和有限长度的数据，例如填的表格就是结构化的数据。</p><p>​非结构化的数据，就是不定长、无固定格式的数据，例如: 网页,图片文件，有时候非常大，有时候很小；例如语音，视频都是非结构化的数据。</p><p>​半结构化数据：比如：XML或者HTML的格式的数据。</p><p>​<strong>数据库系统发展阶段</strong></p><p>​萌芽阶段：文件系统——使用磁盘文件来存储数据</p><p>​初级阶段：第一代数据库——出现了网状模型、层次模型的数据库</p><p>​中级阶段：第二代数据库——关系型数据库和结构化查询语言</p><p>​高级阶段：新一代数据库——“关系-对象”型数据库 </p><p>​ <strong>数据库名词解释</strong>：</p><p>​Database：数据库是数据的汇集，它以一定的组织形式存于存储介质上。</p><p>​DBMS：Database Management System, 是管理数据库的系统软件，它实现数据库系统的各种功能，是数据库系统的核心。</p><p>​DBA：Database Administrator, 负责数据库的规划、设计、协调、维护和管理等工作。</p><p>​Application：应用程序,指以数据库为基础的应用程序。</p><p>​ <strong>数据库管理系统的基本功能</strong>：数据定义、数据处理、数据安全、数据备份</p><p>​</p><h1 id="关系型数据库原理"><a href="#关系型数据库原理" class="headerlink" title="关系型数据库原理"></a>关系型数据库原理</h1><p>​<strong>关系统型数据库相关概念</strong></p><p>​关系Relational ：关系就是二维表，其中：表中的行、列次序并不重要</p><p>​行row：表中的每一行，又称为一条记录record </p><p>​列column：表中的每一列，称为属性，字段，域field </p><p>​主键Primary key：PK ,一个或多个字段的组合, 用于惟一确定一个记录的字段，一张表只有一个主</p><p>键, 主键字段不能为空NULL</p><p>​唯一键Unique key: 一个或多个字段的组合,用于惟一确定一个记录的字段,一张表可以有多个UK,而 </p><p>且UK字段可以为NULL</p><p>​域domain：属性的取值范围，如，性别只能是’男’和’女’两个值，人类的年龄只能0-150</p><p>​<strong>联系类型</strong></p><p>​一对一联系(1:1): 在表A或表B中创建一个字段﹐存储另一个表的主键值 如: 一个人只有一个身份证</p><p>​一对多联系(1:n)：外键, 如: 部门和员工</p><p>​多对多联系(m:n)：增加第三张表, 如: 学生和课程</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>​仅有一表则为一对一联系。</p><p>​左侧表员工ID为主键，为了防止有错误部门，增加右表，左表的部门ID为外键（Foreign Key）</p><p>​左侧部门ID依赖于右表，右表中主键为部门ID，若部门ID（如22）右表中不存在，则为错误记录</p><p>​<img src="image-20220711121453118.png" alt="image-20220711121453118"></p><p>​多对多联系，多个学生每个选若干门课程</p><p>​可以在学生上设外键，课程上设外键，新增两张表来保证数据正确</p><p>​<img src="image-20220711122555253.png" alt="image-20220711122555253"></p><p>​学生报名表中则可以解决同一人报多门课则信息重复写入的问题，仅需要填写学生信息一次</p><p><img src="image-20220711122739376.png" alt="image-20220711122739376"></p><p>​课程表同理</p><p><img src="image-20220711122800064.png" alt="image-20220711122800064"></p><h3 id="数据库规范"><a href="#数据库规范" class="headerlink" title="数据库规范"></a>数据库规范</h3><p>​数据库规范化，又称数据库或资料库的正规化、标准化，是数据库设计中的一系列原理和技术，以减少</p><p>数据库中数据冗余，增进数据的一致性。设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，不同的规范要求被称为不同范式。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般数据库只需满足第三范式(3NF）即可。</p><p>​范式是否必须遵守,要看业务需要而定。掌握范式的目的是为了在合适的场景下违反范式。</p><p>​<strong>第一范式：</strong>1NF</p><p>​无重复的列，，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性，确保每一列的原子性。关系数据库的基础，不满足就不是关系型数据库。</p><p>​<strong>第二范式：</strong>2NF</p><p>​第二范式必须先满足第一范式，且非PK的字段需要与整个PK有直接相关性,即非PK的字段不能依赖于部</p><p>分主键。</p><p>​例如：班级号和班级内序号作为复合主键，学生ID需要整个主键确定，若学生ID仅依赖于班级号或者说班级内序号，则违反了第二范式。</p><p>​<strong>第三范式：</strong>3NF</p><p>​满足第三范式必须先满足第二范式属性。第三范式要求一个数据表中不包含已在其它表中已包含的非主关键字信息，非PK的字段间不能有从属关系。</p><p>​例如：上个例子中，若还存在学生姓名，则非主键元素学生姓名和学生ID存在依赖关系，违反第三范式。</p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openVPN的安装和管理脚本</title>
    <link href="/2022/07/10/openVPN%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%A1%E7%90%86%E8%84%9A%E6%9C%AC/"/>
    <url>/2022/07/10/openVPN%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%A1%E7%90%86%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>​脚本实现openvpn的一键安装，日常管理：加用户，吊销用户等。</p><h1 id="openVPN的安装和管理"><a href="#openVPN的安装和管理" class="headerlink" title="openVPN的安装和管理"></a>openVPN的安装和管理</h1><span id="more"></span><h3 id="openVPN的完整部署配置过程"><a href="#openVPN的完整部署配置过程" class="headerlink" title="openVPN的完整部署配置过程"></a>openVPN的完整部署配置过程</h3><p>​安装配置过程有交互式过程，写成脚本需要expect函数</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装软件包</span><br>yum -y install openvpn easy-rsa<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成服务器配置文件</span><br>cp /usr/share/doc/openvpn/sample/sample-config-files/server.conf /etc/openvpn/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备证书签发相关文件</span><br>cp -r /usr/share/easy-rsa/ /etc/openvpn/easy-rsa-server<br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备签发证书相关变量的配置文件</span><br>cp /usr/share/doc/easy-rsa/vars.example /etc/openvpn/easy-rsa-server/3/vars<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化数据,在当前目录下生成pki（公钥基础设施）目录及相关文件</span><br>cd /etc/openvpn/easy-rsa-server/3/<br>./easyrsa init-pki<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建CA机构</span><br>./easyrsa build-ca nopass#需要回车键确认<br><span class="hljs-meta prompt_">#</span><span class="language-bash">服务端证书</span><br>./easyrsa gen-req server nopass     #需要回车键确认<br>./easyrsa sign server server#需要输入yes确认<br>./easyrsa gen-dh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">客户端证书</span><br>cp -r /usr/share/easy-rsa/ /etc/openvpn/easy-rsa-client<br>cd /etc/openvpn/easy-rsa-client/3/<br>./easyrsa init-pki<br>./easyrsa gen-req username nopass   #需要回车键确认<br>cd /etc/openvpn/easy-rsa-server/3<br>./easyrsa import-req /etc/openvpn/easy-rsa-client/3/pki/reqs/username.req username<br>./easyrsa sign client username  #需要输入yes确认<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">服务器文件复制到服务器目录</span><br>mkdir /etc/openvpn/certs<br>cp /etc/openvpn/easy-rsa-server/3/pki/ca.crt /etc/openvpn/certs/<br>cp /etc/openvpn/easy-rsa-server/3/pki/issued/server.crt /etc/openvpn/certs/ <br>cp /etc/openvpn/easy-rsa-server/3/pki/private/server.key<br>/etc/openvpn/certs/<br>cp /etc/openvpn/easy-rsa-server/3/pki/dh.pem <br>/etc/openvpn/certs/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">客户端文件</span><br>mkdir /etc/openvpn/client/username/<br>cp &#123;/etc/openvpn/easy-rsa-client/3/pki/private/username.key , /etc/openvpn/easy-rsa-server/3/pki/issued/username.crt , /etc/openvpn/easy-rsa-server/3/pki/ca.crt &#125; /etc/openvpn/client/username/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改服务器配置</span><br>cat &gt; /etc/openvpn/server.conf &lt;&lt;EOF<br>port 1194<br>proto tcp<br>dev tun<br>ca /etc/openvpn/certs/ca.crt<br>cert /etc/openvpn/certs/server.crt<br>key /etc/openvpn/certs/server.key  # This file should be kept secret<br>dh /etc/openvpn/certs/dh.pem<br>server 10.8.0.0 255.255.255.0<br>push &quot;route 172.30.0.0 255.255.255.0&quot;<br>keepalive 10 120<br>cipher AES-256-CBC<br>compress lz4-v2<br>push &quot;compress lz4-v2&quot;<br>max-clients 2048<br>user openvpn<br>group openvpn<br>status /var/log/openvpn/openvpn-status.log<br>log-append /var/log/openvpn/openvpn.log<br>verb 3<br>mute 20<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置iptables</span><br>echo net.ipv4.ip_forward = 1 &gt;&gt; /etc/sysctl.conf<br>echo &#x27;iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE&#x27; &gt;&gt; /etc/rc.d/rc.local<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动服务，CentOS8缺失unit文件，需要创建</span><br>cat &gt; /usr/lib/systemd/system/openvpn@.service &lt;&lt;EOF<br>[Unit]<br>Description=OpenVPN Robust And Highly Flexible Tunneling Application On %I<br>After=network.target<br>[Service]<br>Type=notify<br>PrivateTmp=true<br>ExecStart=/usr/sbin/openvpn --cd /etc/openvpn/ --config %i.conf<br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br>systemctl daemon-reload <br>systemctl enable --now openvpn@server<br><br></code></pre></td></tr></table></figure><h1 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h1><h3 id="脚本完成openVPN安装和初始配置"><a href="#脚本完成openVPN安装和初始配置" class="headerlink" title="脚本完成openVPN安装和初始配置"></a>脚本完成openVPN安装和初始配置</h3><p>​上述过程稍加修改可写成安装脚本。</p><p>​包括：创建CA、生成自签名证书、生成dh密钥、修改配置文件、防火墙设置ip转发、CentOS8上还需要创建unit文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>yum -y install openvpn easy-rsa<br><br>cp /usr/share/doc/openvpn/sample/sample-config-files/server.conf /etc/openvpn/<br>cp -r /usr/share/easy-rsa/ /etc/openvpn/easy-rsa-server<br>cp /usr/share/doc/easy-rsa/vars.example /etc/openvpn/easy-rsa-server/3/vars<br><br>cd /etc/openvpn/easy-rsa-server/3/<br>./easyrsa init-pki<br><br>expect &lt;&lt;EOF<br>set timeout 60<br>spawn ./easyrsa build-ca nopass<br>expect &#123;<br>        &quot; [Easy-RSA CA]&quot; &#123; send &quot;\n&quot; &#125;<br>&#125;<br>expect eof<br>EOF<br><br>expect &lt;&lt;EOF<br>set timeout 60<br>spawn ./easyrsa gen-req server nopass <br>expect &#123;<br>        &quot; [server]&quot; &#123; send &quot;\n&quot; &#125;<br>&#125;<br>expect eof<br>EOF<br><br>expect &lt;&lt;EOF<br>set timeout 60<br>spawn ./easyrsa sign server server<br>expect &#123;<br>        &quot;Confirm request details:&quot; &#123; send &quot;yes\n&quot; &#125;<br>&#125;<br>expect eof<br>EOF<br><br>./easyrsa gen-dh<br><br>mkdir /etc/openvpn/certs<br>cp /etc/openvpn/easy-rsa-server/3/pki/ca.crt /etc/openvpn/certs/<br>cp /etc/openvpn/easy-rsa-server/3/pki/issued/server.crt /etc/openvpn/certs/ <br>cp /etc/openvpn/easy-rsa-server/3/pki/private/server.key<br>/etc/openvpn/certs/<br>cp /etc/openvpn/easy-rsa-server/3/pki/dh.pem /etc/openvpn/certs/<br><br>cat &gt; /etc/openvpn/server.conf &lt;&lt;EOF<br>port 1194<br>proto tcp<br>dev tun<br>ca /etc/openvpn/certs/ca.crt<br>cert /etc/openvpn/certs/server.crt<br>key /etc/openvpn/certs/server.key  # This file should be kept secret<br>dh /etc/openvpn/certs/dh.pem<br>server 10.8.0.0 255.255.255.0<br>push &quot;route 172.30.0.0 255.255.255.0&quot;<br>keepalive 10 120<br>cipher AES-256-CBC<br>compress lz4-v2<br>push &quot;compress lz4-v2&quot;<br>max-clients 2048<br>user openvpn<br>group openvpn<br>status /var/log/openvpn/openvpn-status.log<br>log-append /var/log/openvpn/openvpn.log<br>verb 3<br>mute 20<br>crl-verify /etc/openvpn/easy-rsa-server/3/pki/crl.pem<br>EOF<br><br>echo net.ipv4.ip_forward = 1 &gt;&gt; /etc/sysctl.conf<br>echo &#x27;iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE&#x27; &gt;&gt; /etc/rc.d/rc.local<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动服务，CentOS8缺失unit文件，需要创建</span><br><br>if [ `cat /etc/redhat-release | awk  &#x27;&#123; print$4 &#125;&#x27; | awk -F. &#x27;&#123;print$1&#125;&#x27;` -eq 8 ];then<br>cat &gt; /usr/lib/systemd/system/openvpn@.service &lt;&lt;EOF<br>[Unit]<br>Description=OpenVPN Robust And Highly Flexible Tunneling Application On %I<br>After=network.target<br>[Service]<br>Type=notify<br>PrivateTmp=true<br>ExecStart=/usr/sbin/openvpn --cd /etc/openvpn/ --config %i.conf<br>[Install]<br>WantedBy=multi-user.target<br>EOF<br>fi<br><br>systemctl daemon-reload <br>systemctl enable --now openvpn@server<br></code></pre></td></tr></table></figure><h3 id="增加新用户脚本"><a href="#增加新用户脚本" class="headerlink" title="增加新用户脚本"></a>增加新用户脚本</h3><p>​参考上文过程</p><p>​.&#x2F;easyrsa可以使用输入重定向改为非交互式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>read -p &quot;请输入用户的姓名拼音: &quot; NAME<br><br>[ -e /etc/openvpn/easy-rsa-client/3 ] || cp -r /usr/share/easy-rsa/ /etc/openvpn/easy-rsa-client<br>cd /etc/openvpn/easy-rsa-client/3<br>./easyrsa gen-req $&#123;NAME&#125; nopass &lt;&lt;EOF<br>EOF<br><br>cd /etc/openvpn/easy-rsa-server/3<br>./easyrsa import-req /etc/openvpn/easy-rsa-client/3/pki/reqs/$&#123;NAME&#125;.req $&#123;NAME&#125;<br>./easyrsa sign client $&#123;NAME&#125; &lt;&lt;EOF<br>yes<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">证书文件复制到服务器client目录下</span><br>mkdir /etc/openvpn/client/$&#123;NAME&#125;/<br>cp &#123;/etc/openvpn/easy-rsa-client/3/pki/private/$&#123;NAME&#125;.key , /etc/openvpn/easy-rsa-server/3/pki/issued/$&#123;NAME&#125;.crt , /etc/openvpn/easy-rsa-server/3/pki/ca.crt &#125; /etc/openvpn/client/$&#123;NAME&#125;/<br></code></pre></td></tr></table></figure><h3 id="吊销用户脚本"><a href="#吊销用户脚本" class="headerlink" title="吊销用户脚本"></a>吊销用户脚本</h3><p>​依然使用.&#x2F;easyrsa脚本。</p><p>​第一次吊销证时需要编辑配置文件调用吊销证书的文件,后续吊销无需此步。每次吊销证书后,都需要重新启动服务才能生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>read -p &quot;请输入吊销用户的姓名拼音: &quot; NAME<br>cd /etc/openvpn/easy-rsa-server/3<br>./easyrsa revoke $&#123;NAME&#125; &lt;&lt;EOF<br>yes<br>EOF<br><br>./easyrsa gen-crl<br><br>[[ `cat /etc/openvpn/server.conf` =~ .*crl-verify.* ]] || echo &quot;crl-verify /etc/openvpn/easy-rsa-server/3/pki/crl.pem&quot; &gt;&gt; /etc/openvpn/server.conf<br><br>systemctl restart openvpn@server.service<br></code></pre></td></tr></table></figure><p>可将上述3个脚本写成函数模块，通过select编写菜单选择调用。一个脚本完成以上3个功能。</p>]]></content>
    
    
    <categories>
      
      <category>OpenVPN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenVPN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iptables使用练习</title>
    <link href="/2022/07/09/iptables%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/07/09/iptables%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>​配置iptables 打开常用端口加固linux。使用iptables DNAT完成暴露内网端口，使用SNAT,让内网可以上网。并抓包分析过程。</p><h1 id="五表五链概念"><a href="#五表五链概念" class="headerlink" title="五表五链概念"></a>五表五链概念</h1><span id="more"></span><p>​Netfilter在内核中选取五个位置放了五个hook(勾子) function(INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING)，而这五个hook function向用户开放，用户可以通过一个命令工具（iptables）向其写入规则。由信息过滤表（table）组成，包含控制IP包处理的规则集（rules），规则被分组放在链（chain）上。三种报文流向</p><p>流入本机：PREROUTING –&gt; INPUT–&gt;用户空间进程<br>流出本机：用户空间进程 –&gt;OUTPUT–&gt; POSTROUTING<br>转发：PREROUTING –&gt; FORWARD –&gt; POSTROUTING</p><p>​<img src="image-20220709212508257.png" alt="image-20220709212508257"></p><p>五个表table：<br>filter：过滤规则表，根据预定义的规则过滤符合条件的数据包,默认表<br>nat：network address translation 地址转换规则表<br>mangle：修改数据标记位规则表<br>raw：关闭启用的连接跟踪机制，加快封包穿越防火墙速度<br>security：用于强制访问控制（MAC）网络规则，由Linux安全模块（如SELinux）实现</p><p><img src="image-20220709212629901.png" alt="image-20220709212629901"></p><p>iptables命令格式详解：<br>iptables   [-t table]   SUBCOMMAND   chain   [-m matchname [per-match-options]]   -j targetname [per-target-options]</p><p>SUBCOMMAND：子命令<br>链管理类：<br>-N：new, 自定义一条新的规则链<br>-E：重命名自定义链；引用计数不为0的自定义链不能够被重命名，也不能被删除<br>-X：delete，删除自定义的空的规则链<br>-P：Policy，设置默认策略；对filter表中的链而言，其默认策略有：ACCEPT：接受, DROP：丢弃</p><p>规则管理类：<br>-A：append，追加<br>-I：insert, 插入，要指明插入至的规则编号，默认为第一条<br>-D：delete，删除<br>   (1) 指明规则序号<br>   (2) 指明规则本身<br>-R：replace，替换指定链上的指定规则编号<br>-F：flush，清空指定的规则链</p><p>基本匹配条件：</p><p>[!] -s, –source address[&#x2F;mask][,…]：源IP地址或者不连续的IP地址</p><p>[!] -d, –destination address[&#x2F;mask][,…]：目标IP地址或者不连续的IP地址</p><p>[!] -p, –protocol protocol：指定协议，可使用数字如0（all）</p><p> protocol: tcp, udp, icmp, icmpv6, udplite,esp, ah, sctp, mh or“all“  </p><h1 id="加固常用端口"><a href="#加固常用端口" class="headerlink" title="加固常用端口"></a>加固常用端口</h1><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">仅允许指定网段主机尝试远程登录，使用multiport拓展</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ssh 22端口   Telnet 23端口</span><br>iptables -I INPUT -s 10.0.0.0/24 -p tcp -m multiport --dport 22,23 -j ACCEPT<br>iptables -A INPUT  -p tcp -m multiport --dport 22,23 -j REJECT<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">限制网站同一IP最大并发连接数，防止DOS攻击</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">http服务 80端口  代理端口8080</span><br>iptables -A INPUT -d 10.0.0.150 -p tcp -m multiport --dport 80,8080 -m connlimit --connlimit-above 5 -j REJECT<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">内网主机可以访问外网，外网不能访问内网</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">不接受外网发起连接的第一个数据包</span><br>iptables -A INPUT -d 10.0.0.0/24 -p tcp -m multiport --dports 22,80,443 -m state --state NEW,ESTABLISHED -j ACCEPT<br>iptables -A OUTPUT -p tcp -m multiport --sports 22,80,443 -m state --state ESTABLISHED -j ACCEPT<br>iptables -A INPUT -m state --state NEW -j REJECT<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">调整以上规则顺序后</span><br>[root@centos8 ~]$iptables -L<br><br>Chain INPUT (policy ACCEPT)<br>target     prot opt source               destination         <br>ACCEPT     tcp  --  10.0.0.0/24          anywhere             multiport dports ssh,telnet<br>REJECT     tcp  --  anywhere             centos8.n67024.com   multiport dports http,webcache #conn src/32 &gt; 5 reject-with icmp-port-unreachable<br>ACCEPT     tcp  --  anywhere             10.0.0.0/24          multiport dports ssh,http,https state NEW,ESTABLISHED<br>REJECT     tcp  --  anywhere             anywhere             multiport dports ssh,telnet reject-with icmp-port-unreachable<br>REJECT     all  --  anywhere             anywhere             state NEW reject-with icmp-port-unreachable<br><br>Chain FORWARD (policy ACCEPT)<br>target     prot opt source               destination         <br><br>Chain OUTPUT (policy ACCEPT)<br>target     prot opt source               destination         <br>ACCEPT     tcp  --  anywhere             anywhere             multiport sports ssh,http,https state ESTABLISHED<br></code></pre></td></tr></table></figure><h1 id="SNAT"><a href="#SNAT" class="headerlink" title="SNAT"></a>SNAT</h1><p>​SNAT：source NAT ，支持POSTROUTING, INPUT，让本地网络中的主机通过某一特定地址访问</p><p>外部网络，实现地址伪装,请求报文：修改源IP。</p><p>​以下模拟实现SNAT。</p><p>​防火墙eth0  10.0.0.150  公网eth1  192.168.100.8   </p><p>​内网主机10.0.0.152  </p><p>​外网主机192.168.100.7</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">#外网主机<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">100</span>.<span class="hljs-number">7</span>配置<br><span class="hljs-string">[root@rhel8 ~]</span># route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br><span class="hljs-number">192.168.100.0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>   U     <span class="hljs-number">100</span>    <span class="hljs-number">0</span>        <span class="hljs-number">0</span> ens160<br><span class="hljs-number">192.168.122.0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>   U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> virbr0<br><br>#防火墙配置，添加以下一行 运行路由转发<br>vim /etc/sysctl.conf<br>net.ipv4.ip_forward=<span class="hljs-number">1</span><br>#从配置文件“/etc/sysctl.conf”加载内核参数设置<br>sysct -p<br>iptables -t nat -A POSTROUTING -s <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span> -j SNAT --to-source <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">100</span>.<span class="hljs-number">8</span><br><br>iptables -L -t nat   <br><br>Chain POSTROUTING (policy ACCEPT)<br>target     prot opt source               destination         <br>SNAT       all  --  <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span>          anywhere             to:<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">100</span>.<span class="hljs-number">8</span><br><br><br>#内网主机<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">152</span>配置<br><span class="hljs-string">[root@localhost ~]</span>$route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br><span class="hljs-number">0.0.0.0</span>         <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">150</span>      <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         UG    <span class="hljs-number">100</span>    <span class="hljs-number">0</span>        <span class="hljs-number">0</span> ens33<br><span class="hljs-number">10.0.0.0</span>        <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>   U     <span class="hljs-number">100</span>    <span class="hljs-number">0</span>        <span class="hljs-number">0</span> ens33<br><br>#从内网访问外网主机<br><span class="hljs-string">[root@localhost ~]</span>$curl <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">100</span>.<span class="hljs-number">7</span><br>hello<br><br></code></pre></td></tr></table></figure><h1 id="DNAT"><a href="#DNAT" class="headerlink" title="DNAT"></a>DNAT</h1><p>​DNAT：destination NAT 支持PREROUTING , OUTPUT，把本地网络中的主机上的某服务开放给外部网络访问(发布服务和端口映射)，但隐藏真实IP,请求报文：修改目标IP。</p><p>​沿用上文SNAT中的iptables规则和主机配置。</p><p>​防火墙eth0  10.0.0.150  公网eth1  192.168.100.8   </p><p>​内网主机10.0.0.152  </p><p>​外网主机192.168.100.7</p><p>​使外网主机访问防火墙公网ip地址时，将目标ip（192.168.0.8）转换为内网主机ip（10.0.0.152）。若内网有多台主机，还需要配合端口仅需区分。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#防火墙配置，仅需在上文SNAT的基础上增添一条nat表PREROUTING链规则</span><br><span class="hljs-attribute">iptables</span> -t nat -A PREROUTING -d <span class="hljs-number">192.168.100.8</span> -p tcp --dport <span class="hljs-number">80</span> -j DNAT --to-destination <span class="hljs-number">10.0.0.152</span><br><br>[root<span class="hljs-variable">@centos8</span> ~]<span class="hljs-variable">$iptables</span> -L -t nat<br>Chain PREROUTING (policy ACCEPT)<br>target     prot opt source               destination         <br>DNAT       tcp  --  anywhere             centos8.magedu.com   tcp dpt:http to:<span class="hljs-number">10.0.0.152</span><br>      (这是防火墙主机名)<br>Chain POSTROUTING (policy ACCEPT)<br>target     prot opt source               destination         <br>SNAT       all  --  <span class="hljs-number">10.0.0.0</span>/<span class="hljs-number">24</span>          anywhere             to:<span class="hljs-number">192.168.100.8</span><br><br><span class="hljs-comment">#外网主机访问内网服务器网站</span><br>[root<span class="hljs-variable">@linuxprobe</span> ~]<span class="hljs-comment"># curl 192.168.100.8</span><br>here is <span class="hljs-number">10.0.0.152</span><br><br></code></pre></td></tr></table></figure><p>完成上述两步设置相当于模拟了局域网与互联网通讯的过程。</p>]]></content>
    
    
    <categories>
      
      <category>防火墙</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iptables</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建主从DNS服务器并实现智能DNS</title>
    <link href="/2022/07/09/%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8EDNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BDDNS/"/>
    <url>/2022/07/09/%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8EDNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BDDNS/</url>
    
    <content type="html"><![CDATA[<p>​DNS（Domain Name Server，域名服务器）是进行域名(domain name)和与之相对应的IP地址 (IP address)转换的服务器。DNS中保存了一张域名(domain name)和与之相对应的IP地址 (IP address)的表，以解析消息的域名。</p><span id="more"></span><p>​主DNS服务器：管理和维护所负责解析的域内解析库的服务器<br>​从DNS服务器：从主服务器或从服务器”复制”（区域传输）解析库副本</p><h1 id="主DNS服务器"><a href="#主DNS服务器" class="headerlink" title="主DNS服务器"></a>主DNS服务器</h1><p>服务器10.0.0.150  模拟网站<a href="http://www.n67024.org/">www.n67024.org</a> → 10.0.0.153 </p><h3 id="需要软件包：BIND"><a href="#需要软件包：BIND" class="headerlink" title="需要软件包：BIND"></a>需要软件包：BIND</h3><p>BIND主程序：&#x2F;usr&#x2F;sbin&#x2F;named</p><p>服务脚本和Unit名称：&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;named，&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;named.service</p><p>主配置文件：&#x2F;etc&#x2F;named.conf, &#x2F;etc&#x2F;named.rfc1912.zones, &#x2F;etc&#x2F;rndc.key</p><p>管理工具：&#x2F;usr&#x2F;sbin&#x2F;rndc：remote name domain controller，默认与bind安装在同一主机，且只能通过127.0.0.1连接named进程，提供辅助性的管理功能；953&#x2F;tcp</p><p>解析库文件：&#x2F;var&#x2F;named&#x2F;ZONE_NAME.ZONE</p><h3 id="修改bind配置文件"><a href="#修改bind配置文件" class="headerlink" title="修改bind配置文件"></a>修改bind配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">vim /etc/named.conf             <br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉下面两行</span><br>// listen-on port 53 &#123; 127.0.0.1; &#125;;<br>// allow-query     &#123; localhost; &#125;;<br>vim /etc/named.rfc1912.zones    <br><span class="hljs-meta prompt_">#</span><span class="language-bash">加上下面内容</span><br>zone &quot;n67024.org&quot; IN &#123;<br>   type master;<br>   file  &quot;n67024.org.zone&quot;;<br>&#125;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">其中数据库文件可在named.localhost基础上修改</span><br>cp -p /var/named/named.localhost /var/named/n67024.org.zone<br>vim /var/named/n67024.org.zone<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">每条记录包括 name  ttl  IN  rr_type  value   若省略则从上一条继承</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">@为当前区域域名 soa记录中可指定邮箱  serial为版本号</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">SOA：Start Of Authority，起始授权记录；一个区域解析库有且仅能有一个SOA记录，必须位于解</span><br>析库的第一条记录<br><span class="hljs-meta prompt_">#</span><span class="language-bash">A：internet Address，作用，FQDN --&gt; IP</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">AAAA：FQDN --&gt; IPv6</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">PTR：PoinTeR，IP --&gt; FQDN</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">NS：Name Server，专用于标明当前区域的DNS服务器</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">CNAME ： Canonical Name，别名记录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">MX：Mail eXchanger，邮件交换器</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@ IN SOA master admin.n67024.org. (<br> 0 ; serial<br> 1D ; refresh<br> 1H ; retry<br> 1W ; expire<br> 3H ) ; minimum<br>        NS master<br>master  A    10.0.0.150         <br>www     A    10.0.0.153<br><br></code></pre></td></tr></table></figure><h3 id="检查格式后启动服务"><a href="#检查格式后启动服务" class="headerlink" title="检查格式后启动服务"></a>检查格式后启动服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">使用软件包所带命令检查</span><br>named-checkconf <br>named-checkzone n67024.org /var/named/n67024.org.zone<br>systemctl start named          #第一次启动服务<br><span class="hljs-meta prompt_">#</span><span class="language-bash">rndc reload                    <span class="hljs-comment">#不是第一次启动服务</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">客户端测试，更改网卡dns为配置好的主机</span><br>vim /etc/sysconfig/network-scripts/ifcfg-ens33<br>DNS1=10.0.0.150<br></code></pre></td></tr></table></figure><p>效果如下</p><p><img src="image-20220709165338549.png" alt="image-20220709165338549"></p><h1 id="从DNS服务器"><a href="#从DNS服务器" class="headerlink" title="从DNS服务器"></a>从DNS服务器</h1><h3 id="修改主服务器"><a href="#修改主服务器" class="headerlink" title="修改主服务器"></a>修改主服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">添加允许从服务器区域传输</span><br>vim /etc/named.conf<br>allow-transfer &#123; 10.0.0.152;&#125;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加从服务器</span><br>vim /var/named/n67024.org.zone<br>NSslave<br>slave   A       10.0.0.152<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置生效</span><br>rndc reload<br></code></pre></td></tr></table></figure><h3 id="创建从服务器"><a href="#创建从服务器" class="headerlink" title="创建从服务器"></a>创建从服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建过程类似主服务器，需要修改不允许其它主机进行区域传输</span><br>vim /etc/named.rfc1912.zones<br>allow-transfer &#123; none;&#125;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置数据库文件</span><br>vim /etc/named.rfc1912.zones<br>zone &quot;n67024.org&quot; &#123;<br>   type slave;<br>   masters &#123; 10.0.0.150;&#125;;                                                       <br>   file &quot;slaves/n67024.org.slave&quot;;<br>&#125;;<br><br>systemctl start named<br><span class="hljs-meta prompt_">#</span><span class="language-bash">不是第一次启动rndc reload</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看是否同步数据库文件</span><br>[root@localhost ~]$ls /var/named/slaves<br>/var/named/slaves/n67024.org.slave<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在测试主机上修改网卡配置，将上述主从DNS服务器分别设为DNS1和DNS2</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Ubuntu上可这样修改</span><br>vim /etc/netplan/01-netcfg.yaml<br>      nameservers:<br>              addresses: [10.0.0.150,10.0.0.152]<br><br>root@ubuntu1804:~# netplan apply<br>root@ubuntu1804:~# curl www.n67024.org<br>hello<br></code></pre></td></tr></table></figure><p>停止主DNS服务器，访问不受影响</p><p><img src="image-20220709174728319.png" alt="image-20220709174728319"></p><p><img src="image-20220709174859860.png" alt="image-20220709174859860"></p><h1 id="智能DNS"><a href="#智能DNS" class="headerlink" title="智能DNS"></a>智能DNS</h1><p>​智能DNS技术可以理解为根据客户端的ip提供就近的服务器，也就是说客户端ip不同，对于同一域名将返回不同的服务器ip地址。</p><p>​在本实验中需要DNS主机1台且自身模拟一个网站、模拟网站主机2台、不同网段客户端主机2台。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">主DNS服务器配置</span><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在文件最前面加下面行</span><br>acl beijingnet &#123;<br>    10.0.0.0/24;<br>&#125;;<br>acl shanghainet &#123;<br>    172.16.0.0/16;<br>&#125;;<br>acl othernet &#123;<br>   any;<br>&#125;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉下面两行</span><br>// listen-on port 53 &#123; 127.0.0.1; &#125;;<br>// allow-query     &#123; localhost; &#125;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建view</span><br>view beijingview &#123;<br>   match-clients &#123; beijingnet;&#125;;<br>   include &quot;/etc/named.rfc1912.zones.bj&quot;;<br>&#125;;<br>view shanghaiview &#123;<br>   match-clients &#123; shanghainet;&#125;;<br>   include &quot;/etc/named.rfc1912.zones.sh&quot;;<br>&#125;;<br>view otherview &#123;<br>   match-clients &#123; othernet;&#125;;<br>   include &quot;/etc/named.rfc1912.zones.other&quot;;<br>&#125;;<br>include &quot;/etc/named.root.key&quot;;<br></code></pre></td></tr></table></figure><h3 id="区域配置文件"><a href="#区域配置文件" class="headerlink" title="区域配置文件"></a>区域配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/named.rfc1912.zones.bj<br>zone &quot;.&quot; IN &#123;<br>   type hint;<br>   file &quot;named.ca&quot;;<br>&#125;;<br>zone &quot;n67024.org&quot; &#123;<br>   type master;<br>   file &quot;n67024.org.zone.bj&quot;;<br>&#125;;<br>vim /etc/named.rfc1912.zones.sh<br>zone &quot;.&quot; IN &#123;<br>   type hint;<br>   file &quot;named.ca&quot;;<br>&#125;;<br>zone &quot;n67024.org&quot; &#123;<br>   type master;<br>   file &quot;n67024.org.zone.sh&quot;;<br>&#125;;<br>vim /etc/named.rfc1912.zones.other<br>zone &quot;.&quot; IN &#123;<br>   type hint;<br>   file &quot;named.ca&quot;;<br>&#125;;<br>zone &quot;n67024.org&quot; &#123;<br>   type master;<br>   file &quot;n67024.org.zone.other&quot;;<br>&#125;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">更改为进程所属文件</span><br>chgrp named /etc/named.rfc1912.zones.bj<br>chgrp named /etc/named.rfc1912.zones.sh<br>chgrp named /etc/named.rfc1912.zones.other<br></code></pre></td></tr></table></figure><h3 id="创建数据库文件"><a href="#创建数据库文件" class="headerlink" title="创建数据库文件"></a>创建数据库文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">需要特别注意格式，格式错误将导致named服务无法启动</span><br><br>vim /var/named/n67024.org.zone.bj<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@   IN SOA master admin.n67024.org. (<br>                    0 ; serial<br>                   1D ; refresh<br>                   1H ; retry<br>                   1W ; expire<br>                   3H )   ; minimum<br>           NS   master<br>master     A    10.0.0.150<br>websrv     A    10.0.0.153                          <br>www       CNAME websrv<br><br>vim /var/named/n67024.org.zone.sh<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@   IN SOA master admin.n67024.org. (<br>                    0 ; serial<br>                   1D ; refresh<br>                   1H ; retry<br>                   1W ; expire<br>                   3H )   ; minimum<br>           NS   master<br>master     A    10.0.0.150<br>websrv     A    172.16.0.7                          <br>www       CNAME websrv<br>vim /var/named/n67024.org.zone.other<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@   IN SOA master admin.n67024.org. (<br>                    0 ; serial<br>                   1D ; refresh<br>                   1H ; retry<br>                   1W ; expire<br>                   3H )   ; minimum<br>           NS   master<br>master     A    10.0.0.150<br>websrv     A    10.0.0.7                          <br>www       CNAME websrv<br>chgrp named /var/named/n67024.org.zone.bj<br>chgrp named /var/named/n67024.org.zone.sh<br>chgrp named /var/named/n67024.org.zone.other<br><br>rndc reload<br></code></pre></td></tr></table></figure><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p>分别在三台主机上访问</p><p>web服务器1：10.0.0.153&#x2F;24<br>web服务器2：10.0.0.7&#x2F;16<br>web服务器3：172.16.0.7&#x2F;16</p><p>DNS客户端1：10.0.0.151&#x2F;24 实现，确保DNS指向10.0.0.150<br>DNS客户端2：172.16.0.6&#x2F;16 实现，确保DNS指向172.16.0.8<br>DNS客户端3（主DNS自己）：10.0.0.150 实现，确保DNS指向127.0.0.1 （该ip意为指向自身）</p><p>​<img src="image-20220709201626562.png" alt="image-20220709201626562"></p><p>​<img src="image-20220709203012766.png" alt="image-20220709203012766"></p><p><img src="image-20220709210952037.png" alt="image-20220709210952037"></p>]]></content>
    
    
    
    <tags>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自动化系统部署</title>
    <link href="/2022/07/08/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/07/08/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>​分别使用自制光盘引导，PXE, Cobbler完成自动安装系统。</p><h1 id="光盘引导"><a href="#光盘引导" class="headerlink" title="光盘引导"></a>光盘引导</h1><span id="more"></span><p>​使用自制光盘安装，其中的ks应答文件会自动选择安装选项。</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#可使用当前光盘文件/mnt/isolinux/ 基础上修改   制作光盘myiso</span><br>cp -r <span class="hljs-regexp">/mnt/i</span>solinux<span class="hljs-regexp">/ /</span>data<span class="hljs-regexp">/myiso/</span><br><span class="hljs-comment">#修改光盘启动选项，应答文件将会放在之后生成的光盘内</span><br>[root@centos8 <span class="hljs-regexp">/data/myi</span>so]<span class="hljs-variable">$vim</span> myks.cfg<br>vim <span class="hljs-regexp">/data/myi</span>so<span class="hljs-regexp">/isolinux/i</span>solinux.cfg<br><br>label linux<br>  menu label ^Auto Install CentOS Linux <span class="hljs-number">8</span><br>  kernel vmlinuz<br>  initrd=initrd.img text ks=cdrom:/myks.cfg<br><br><span class="hljs-comment">#使用mkisofs命令生成自制光盘</span><br>mkisofs -R -J -T -v --no-emul-boot --boot-load-size <span class="hljs-number">4</span> --boot-info-table -V <span class="hljs-string">&quot;CentOS 8.3 x86_64 boot&quot;</span> -b isolinux<span class="hljs-regexp">/isolinux.bin -c isolinux/</span>boot.cat -o <span class="hljs-regexp">/root/myi</span>so.iso <span class="hljs-regexp">/data/myi</span>so/<br><br><span class="hljs-comment">#最终得到自制光盘</span><br>-rw-r--r--  <span class="hljs-number">1</span> root root  <span class="hljs-number">81</span>M Jul  <span class="hljs-number">9</span> <span class="hljs-number">03</span>:<span class="hljs-number">51</span>  myiso.iso<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">应答文件myks.cfg</span><br>ignoredisk --only-use=sda<br>zerombr<br>text<br>reboot<br>clearpart --all --initlabel<br>selinux --disabled<br>firewall --disabled<br>url --url=http://10.0.0.150/centos/8/os/x86_64/     #安装文件路径<br>keyboard --vckeymap=us --xlayouts=&#x27;us&#x27;<br>lang en_US.UTF-8<br>bootloader --append=&quot;net.ifnames=0&quot; --location=mbr --boot-drive=sda  #此行必须指定<br>network  --bootproto=dhcp --device=eth0 --ipv6=auto --activate<br>network  --hostname=centos8.magedu.org<br>rootpw --iscrypted<br><span class="hljs-meta prompt_">$</span><span class="language-bash">6$j9YhzDUnQVnxaAk8<span class="hljs-variable">$qv7rkMcPAEbV5yvwsP666DXWYadd3jYjkA9fpxAo9qYotjGGBUclCGoP1TRv</span></span><br>gHBpqgc5n0RypMsPTQnVDcpO01<br>firstboot --enable<br>skipx<br>services --disabled=&quot;chronyd&quot;<br>timezone Asia/Shanghai --isUtc --nontp<br>user --name=wang --<br>password=6oUfb/02CWfLb5l8f$sgEZeR7c7DpqfpmFDH6huSmDbW1XQNR4qKl2EPns.gOXqlnAIgv9p<br>TogtFVaDtEpMOC.SWXKYqxfVtd9MCwxb1 --iscrypted --gecos=&quot;wang&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">autopart --<span class="hljs-built_in">type</span>=lvm</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">part / --fstype xfs --size 1 --grow --ondisk sda 可以实现根自动使用所有剩余空间</span><br>part / --fstype=&quot;xfs&quot; --ondisk=sda --size=102400<br>part /data --fstype=&quot;xfs&quot; --ondisk=sda --size=51200<br>part swap --fstype=&quot;swap&quot; --ondisk=sda --size=2048<br>part /boot --fstype=&quot;ext4&quot; --ondisk=sda --size=1024<br><span class="hljs-meta prompt_">%</span><span class="language-bash">packages</span><br>@^minimal-environment<br>kexec-tools<br><span class="hljs-meta prompt_">%</span><span class="language-bash">end</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">addon com_redhat_kdump --<span class="hljs-built_in">enable</span> --reserve-mb=<span class="hljs-string">&#x27;auto&#x27;</span></span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">end</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">anaconda</span><br>pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty<br>pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok<br>pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty<br><span class="hljs-meta prompt_">%</span><span class="language-bash">end</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">post</span><br>useradd mage<br>echo magedu | passwd --stdin mage &amp;&gt; /dev/null<br><span class="hljs-meta prompt_">%</span><span class="language-bash">end</span><br></code></pre></td></tr></table></figure><p>在新建虚拟时选择自制光盘，启动后效果如图</p><p><img src="image-20220708200142417.png" alt="image-20220708200142417"></p><h1 id="PXE"><a href="#PXE" class="headerlink" title="PXE"></a>PXE</h1><p>​需要的软件包有：dhcp-server tftp-server httpd syslinux-nonlinux</p><h3 id="配置DHCP"><a href="#配置DHCP" class="headerlink" title="配置DHCP"></a>配置DHCP</h3><p>​使安装新主机获得ip地址和pxe文件位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置文件可在复制示例/usr/share/doc/dhcp-4.1.1/dhcpd.conf.sample 并修改</span><br>vim /etc/dhcp/dhcpd.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">next-server：提供引导文件的服务器IP地址  filename: 指明引导文件名称</span><br><br>default-lease-time 600;<br>max-lease-time 7200;<br>log-facility local7;<br>subnet 10.0.0.0 netmask 255.255.255.0 &#123;<br> range 10.0.0.1 10.0.0.200;<br> option routers 10.0.0.1;<br> next-server 10.0.0.150;<br> filename &quot;pxelinux.0&quot;; &#125;<br><br></code></pre></td></tr></table></figure><h3 id="准备yum源和应答文件"><a href="#准备yum源和应答文件" class="headerlink" title="准备yum源和应答文件"></a>准备yum源和应答文件</h3><p>​可使用一台主机安装httpd服务，挂载光盘到网页目录下。</p><p>​使用yum源同光盘引导部分。将上文光盘引导所用引导文件放到网页目录下。</p><h3 id="准备PXE相关文件"><a href="#准备PXE相关文件" class="headerlink" title="准备PXE相关文件"></a>准备PXE相关文件</h3><p>​将相关启动文件存放到tftp服务文件夹（&#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;）下。</p><p>​需要的文件有：系统光盘下&#x2F;isolinux&#x2F;下的vmlinuz和initrd.img   </p><p>​（centos8还需要ldlinux.c32,libcom32.c32,libutil.c32）</p><p>​&#x2F;usr&#x2F;share&#x2F;syslinux&#x2F;下的 pxelinux.0和menu.c32文件</p><p><img src="image-20220708211735225.png" alt="image-20220708211735225"></p><h3 id="准备启动菜单文件"><a href="#准备启动菜单文件" class="headerlink" title="准备启动菜单文件"></a>准备启动菜单文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /var/www/html/centos/8/os/x86_64/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default <br><br>vim /var/lib/tftpboot/pxelinux.cfg/default<br><br>default menu.c32<br>timeout 600<br>menu title Install CentOS Linux <br>label linux8<br> menu label Auto Install CentOS Linux ^8<br> kernel centos8/vmlinuz<br> append initrd=centos8/initrd.img ks=http://10.0.0.150/ks/myks.cfg<br> <br>label manual<br> menu label ^Manual Install CentOS Linux 8.0 <br> kernel centos8/vmlinuz<br> append initrd=centos8/initrd.img <br> inst.repo=http://10.0.0.150/centos/8/os/x86_64/<br><br>label rescue<br> menu label ^Rescue a CentOS Linux system 8<br> kernel centos8/vmlinuz<br> append initrd=centos8/initrd.img <br> inst.repo=http://10.0.0.150/centos/8/os/x86_64/ rescue <br>  <br>label local<br> menu default<br> menu label Boot from ^local drive<br> localboot 0xffff<br></code></pre></td></tr></table></figure><p>​</p><p>新建虚拟机，在加载完成前按esc打开boot menu  选择网卡引导</p><p><img src="image-20220708221907150.png" alt="image-20220708221907150"></p><p>等待自动安装</p><p><img src="image-20220708222022713.png" alt="image-20220708222022713"></p><h1 id="Cobbler"><a href="#Cobbler" class="headerlink" title="Cobbler"></a>Cobbler</h1><p>​Cobbler实质是PXE的二次封装，将多种安装参数封装到一起，并提供统一的管理方法。</p><p>​CentOS8没有提供cobbler包，使用CentOS7进行。</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment">#安装需要的软件包，确保相关服务启动</span><br><span class="hljs-string">yum</span> -<span class="hljs-string">y</span> <span class="hljs-string">install</span>  <span class="hljs-string">cobbler</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-built_in">--now</span> <span class="hljs-string">cobblerd</span> <span class="hljs-string">httpd</span> <span class="hljs-string">tftp</span> <span class="hljs-string">dhcpd</span><br><span class="hljs-comment">#dhcpd服务未配置不能启动可不理会，后续由cobbler接管</span><br><br><span class="hljs-comment">#修改cobbler配置</span><br><span class="hljs-string">vim</span> /<span class="hljs-string">etc</span>/<span class="hljs-string">cobbler</span>/<span class="hljs-string">settings</span> <br><span class="hljs-string">default_password_crypted</span>: <span class="hljs-string">&quot;$1$1spuisnh$j34LNmyTQWs3l6xKxCZY60&quot;</span><br><span class="hljs-string">next_server</span>：&lt; <span class="hljs-string">tftp</span>服务器的 <span class="hljs-string">IP</span> 地址&gt;<br><span class="hljs-string">server</span>：&lt;<span class="hljs-string">cobbler</span>服务器的 <span class="hljs-string">IP</span> 地址&gt;<br><span class="hljs-string">manage_dhcp</span>：<span class="hljs-string">1</span>  <span class="hljs-comment">#设置为1，表示通过cobbler生成dhcpd.conf配置文件</span><br><span class="hljs-string">pxe_just_once</span>: <span class="hljs-string">1</span> <span class="hljs-comment">#设置为1,防止重复安装系统</span><br><span class="hljs-comment">#重启服务生效</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">restart</span> <span class="hljs-string">cobblerd</span><br><br><span class="hljs-comment">#由cobbler生成dhcpd配置，修改为cobbler服务主机</span><br><span class="hljs-string">vim</span> /<span class="hljs-string">etc</span>/<span class="hljs-string">cobbler</span>/<span class="hljs-string">dhcp</span>.<span class="hljs-string">template</span><br><span class="hljs-string">subnet</span> <span class="hljs-string">10</span>.<span class="hljs-string">0</span>.<span class="hljs-string">0</span>.<span class="hljs-string">0</span> <span class="hljs-string">netmask</span> <span class="hljs-string">255</span>.<span class="hljs-string">255</span>.<span class="hljs-string">255</span>.<span class="hljs-string">0</span> &#123;<br>     <span class="hljs-string">option</span> <span class="hljs-string">routers</span>             <span class="hljs-string">10</span>.<span class="hljs-string">0</span>.<span class="hljs-string">0</span>.<span class="hljs-string">2</span>;<br>     <span class="hljs-string">option</span> <span class="hljs-string">domain-name-servers</span> <span class="hljs-string">223</span>.<span class="hljs-string">5</span>.<span class="hljs-string">5</span>.<span class="hljs-string">5</span>;<br>     <span class="hljs-string">option</span> <span class="hljs-string">subnet-mask</span>         <span class="hljs-string">255</span>.<span class="hljs-string">255</span>.<span class="hljs-string">255</span>.<span class="hljs-string">0</span>;<br>     <span class="hljs-string">range</span> <span class="hljs-string">dynamic-bootp</span>        <span class="hljs-string">10</span>.<span class="hljs-string">0</span>.<span class="hljs-string">0</span>.<span class="hljs-string">200</span> <span class="hljs-string">10</span>.<span class="hljs-string">0</span>.<span class="hljs-string">0</span>.<span class="hljs-string">250</span>;<br>     <span class="hljs-string">default-lease-time</span>         <span class="hljs-string">21600</span>;<br>     <span class="hljs-string">max-lease-time</span>             <span class="hljs-string">43200</span>;<br>     <span class="hljs-string">next-server</span>                $<span class="hljs-string">next_server</span>;<br><br><span class="hljs-string">cobbler</span> <span class="hljs-string">sync</span><br><br><span class="hljs-comment">#下载启动相关文件</span><br><span class="hljs-string">cobbler</span> <span class="hljs-built_in">get-loaders</span><br><br><span class="hljs-comment">#导入系统安装文件</span><br><span class="hljs-string">mount</span> /<span class="hljs-string">dev</span>/<span class="hljs-string">sr0</span>  /<span class="hljs-string">mnt</span><br><span class="hljs-string">cobbler</span> <span class="hljs-string">import</span> <span class="hljs-built_in">--name=centos-7.7-x86_64</span> <span class="hljs-built_in">--path=/mnt</span> <span class="hljs-built_in">--arch=x86_64</span> <br></code></pre></td></tr></table></figure><p>最终效果如图</p><p><img src="image-20220709142339093.png" alt="image-20220709142339093"></p><p><img src="image-20220709142456196.png" alt="image-20220709142456196"></p>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动安装系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建chrony服务完成多个主机时间同步</title>
    <link href="/2022/07/08/%E6%90%AD%E5%BB%BAchrony%E6%9C%8D%E5%8A%A1%E5%AE%8C%E6%88%90%E5%A4%9A%E4%B8%AA%E4%B8%BB%E6%9C%BA%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"/>
    <url>/2022/07/08/%E6%90%AD%E5%BB%BAchrony%E6%9C%8D%E5%8A%A1%E5%AE%8C%E6%88%90%E5%A4%9A%E4%B8%AA%E4%B8%BB%E6%9C%BA%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p>​多主机协作工作时，各个主机的时间同步很重要，时间不一致会造成很多重要应用的故障，如：加密协</p><p>议，日志，集群等， 利用NTP（Network Time Protocol） 协议使网络中的各个计算机时间达到同步。</p><p>目前NTP协议属于运维基础架构中必备的基本服务之一。</p><p>​Chrony是实现NTP协议的的自由软件。可使系统时钟与NTP服务器，参考时钟（例如GPS接收器）以及使用手表和键盘的手动输入进行同步。</p><h1 id="Chrony时间同步"><a href="#Chrony时间同步" class="headerlink" title="Chrony时间同步"></a>Chrony时间同步</h1><span id="more"></span><p>​包：chrony</p><p>​两个主要程序：chronyd和chronyc</p><p>​chronyd：后台运行的守护进程，用于调整内核中运行的系统时钟和时钟服务器同步。它确定计算</p><p>机增减时间的比率，并对此进行补偿</p><p>​chronyc：命令行用户工具，用于监控性能并进行多样化的配置。它可以在chronyd实例控制的计</p><p>算机上工作，也可在一台不同的远程计算机上工作</p><p>​服务unit 文件： &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;chronyd.service</p><p>​监听端口： 服务端: 123&#x2F;udp,客户端: 323&#x2F;udp</p><p>​配置文件： &#x2F;etc&#x2F;chrony.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#时间服务器192.168.10.10  客户端10.0.0.152 10.0.0.150 </span><br><br><span class="hljs-comment">#服务器修改配置文件，可指定多个ntp服务器</span><br><span class="hljs-attribute">vim</span> /etc/chrony<br>server ntp.aliyun.com iburst<br>server ntp1.aliyun.com iburst<br><br>allow <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>  <span class="hljs-comment">#加此行,指定允许同步的网段</span><br><span class="hljs-comment">#local stratum 10   #删除此行注释,当互联网无法连接,仍然可以为客户端提供时间同步服务</span><br><span class="hljs-comment">#重启服务，检查端口123</span><br>systemctl restart chronyd<br>ss -ntul<br>Netid      State        Recv-Q       Send-Q                 Local Address:Port                Peer Address:Port       <br>udp        UNCONN       <span class="hljs-number">0</span>            <span class="hljs-number">0</span>                            <span class="hljs-number">0.0.0.0:123</span>                      <span class="hljs-number">0.0.0.0</span>:*          <br><br><span class="hljs-comment">#客户端仅需将服务器主机设为ntp服务器</span><br>server <span class="hljs-number">192.168.10.10</span>  iburst<br><span class="hljs-comment">#重启</span><br>systemctl restart chronyd<br><span class="hljs-comment">#客户端确认是否成功</span><br>[root@<span class="hljs-number">10</span> ~]<span class="hljs-variable">$chronyc</span> sources -V<br><span class="hljs-number">210</span> Number of sources = <span class="hljs-number">1</span><br>MS Name/IP address         Stratum Poll Reach LastRx Last sample               <br>===============================================================================<span class="hljs-regexp"></span><br><span class="hljs-regexp">^*</span> <span class="hljs-number">192.168.10.10</span>                  <span class="hljs-number">2</span>   <span class="hljs-number">6</span>   <span class="hljs-number">177</span>    <span class="hljs-number">36</span>  +1357us[+4165us] +/-   36ms<br><br><span class="hljs-comment">#时间改变后过几分钟就会自动同步</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>时间同步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文本工具awk实用场景</title>
    <link href="/2022/07/03/%E6%96%87%E6%9C%AC%E5%B7%A5%E5%85%B7awk%E5%AE%9E%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <url>/2022/07/03/%E6%96%87%E6%9C%AC%E5%B7%A5%E5%85%B7awk%E5%AE%9E%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>总结5个自我觉得比较有用的awk的使用场景，比如在什么情况下用awk处理文本效率最高</p><h3 id="awk基本用法"><a href="#awk基本用法" class="headerlink" title="awk基本用法"></a>awk基本用法</h3><figure class="highlight nsis"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment">#格式</span><br>awk [options]   <span class="hljs-string">&#x27;program&#x27;</span> <span class="hljs-keyword">var</span>=value   <span class="hljs-keyword">file</span>…<br><br><span class="hljs-comment">#Program格式</span><br>pattern&#123;action statements<span class="hljs-comment">;..&#125;</span><br>pattern：决定动作语句何时触发及触发事件，比如：BEGIN,END,正则表达式等<br>action statements：对数据进行处理，放在&#123;&#125;内指明，常见：<span class="hljs-literal">print</span>, printf<br><br><span class="hljs-comment">#常用选项</span><br>-F “分隔符” 指明输入时用到的字段分隔符，默认的分隔符是若干个连续空白符<br>-v <span class="hljs-keyword">var</span>=value 变量赋值<br></code></pre></td></tr></table></figure><h3 id="适合使用场景"><a href="#适合使用场景" class="headerlink" title="适合使用场景"></a>适合使用场景</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#取出特定列，与grep和sed比可一条命令解决。如：取出分区利用率</span><br>[root@localhost ~]<span class="hljs-variable">$df</span> |awk <span class="hljs-string">&#x27;&#123;print $1,$5&#125;&#x27;</span><br>Filesystem Use%<br>devtmpfs <span class="hljs-number">0</span>%<br>tmpfs <span class="hljs-number">0</span>%<br>tmpfs <span class="hljs-number">1</span>%<br>tmpfs <span class="hljs-number">0</span>%<br><span class="hljs-regexp">/dev/m</span>apper/centos-root <span class="hljs-number">9</span>%<br><span class="hljs-regexp">/dev/</span>sda1 <span class="hljs-number">15</span>%<br>tmpfs <span class="hljs-number">0</span>%<br><br><span class="hljs-comment">#需要按数值筛选文本，使用awk最方便。如：筛选出非系统用户(UID&gt;=1000)</span><br>[root@localhost ~]<span class="hljs-variable">$awk</span> -F: <span class="hljs-string">&#x27;$3&gt;=1000&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br>player:x:<span class="hljs-number">1000</span>:<span class="hljs-number">1000</span>::<span class="hljs-regexp">/home/</span>player:<span class="hljs-regexp">/bin/</span>bash<br>wang:x:<span class="hljs-number">1001</span>:<span class="hljs-number">1001</span>::<span class="hljs-regexp">/home/</span>wang:<span class="hljs-regexp">/bin/</span>bash<br><br><span class="hljs-comment">#以特定分隔符输出特定列</span><br>[root@localhost ~]<span class="hljs-variable">$awk</span> -F: -v OFS=<span class="hljs-string">&quot;  |   &quot;</span> <span class="hljs-string">&#x27;$3&gt;=1000&#123;print $1,$3,$7&#125;&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd <br>player  |   <span class="hljs-number">1000</span>  |   <span class="hljs-regexp">/bin/</span>bash<br>wang  |   <span class="hljs-number">1001</span>  |   <span class="hljs-regexp">/bin/</span>bash<br><br><span class="hljs-comment">#按指定格式输出</span><br>[root@localhost ~]<span class="hljs-variable">$awk</span> -F:  <span class="hljs-string">&#x27;$3&gt;=1000&#123;printf &quot;user:%s\tuid:%s\tbash:%s\n&quot;,$1,$3,$7&#125;&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd <br>user:playeruid:<span class="hljs-number">1000</span>bash:<span class="hljs-regexp">/bin/</span>bash<br>user:wanguid:<span class="hljs-number">1001</span>bash:<span class="hljs-regexp">/bin/</span>bash<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定时任务示例</title>
    <link href="/2022/07/03/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%A4%BA%E4%BE%8B/"/>
    <url>/2022/07/03/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>​使用crontab命令建立周期性任务。自定义写出10个定时任务的示例：要求尽量的覆盖各种场景</p><span id="more"></span><figure class="highlight diff"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs diff">crontab命令格式：<br>crontab [-u user] [-l | -r | -e] [-i] <br>常用选项：<br><span class="hljs-deletion">-l 列出所有任务</span><br><span class="hljs-deletion">-e 编辑任务</span><br><span class="hljs-deletion">-r 移除所有任务</span><br><span class="hljs-deletion">-i 同-r一同使用，以交互式模式移除指定任务</span><br><span class="hljs-deletion">-u user 指定用户管理cron任务,仅root可运行</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">格式示例</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Example of job definition:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">.---------------- minute (0 - 59)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">| .------------- hour (0 - 23)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">| | .---------- day of month (1 - 31)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">| | | .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">| | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR</span> <br>sun,mon,tue,wed,thu,fri,sat<br><span class="hljs-meta prompt_"># </span><span class="language-bash">| | | | |</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">* * * * * user-name <span class="hljs-built_in">command</span> to be executed</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为保证命令可运行，添加PATH路径</span><br>[root@centos8 ~]$crontab -e<br>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">每2小时检查磁盘使用情况</span><br>* */2 * * *  /data/checkdisk.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">早上8点到晚上8点每隔2小时检查</span><br>0 8-20/2 * * * /data/checkdisk.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">9点30，13点30，20点30检查</span><br>30 9,13,20 * * * /data/chekdisk.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">每周三，周五下午5点，6点检查</span><br>0 5,6 * * 3,5  /data/checkdisk.sh<br>cat checkdisk.sh<br>USE=`df |awk &#x27;&#123;print $5&#125;&#x27; |tail -n +2 | sort | uniq | sort -nr | head -n 1`<br>[ $USE -gt 80 ] &amp;&amp; echo &quot;disk will be full&quot; | mail -s diskfull root<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">每月的星期六、星期日的1点10分重载nginx服务</span><br>10 1 * * 6,0 /usr/sbin/nginx -s reload<br><span class="hljs-meta prompt_">#</span><span class="language-bash">每天的18到23点的整点和30分重载nginx服务</span><br>0,30 18-23 * * * /usr/sbin/nginx -s reload <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">每周的工作日1:30，将/etc备份至/backup目录中，保存的文件名称格式为“etcbak-yyyy-mm-dd-HH”，其中日期是前一天的时间</span><br>30 1 * * 1-5 cp -a /etc  /backup/etcbak-`date -d -1day &quot;+\%F-\%H&quot;`<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">每月的4号与每周一到周三的11点重启vsftpd服务</span><br>0 11 4 * 1-3 systemctl restart vsftpd.service &amp;&gt;/dev/null<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">每1小时取出当前系统/proc/meminfo文件中以S或M开头的信息追加至/tmp/meminfo.txt文件中</span><br>* */ * * *  cat/proc/meminfo | grep -e &quot;^S&quot; -e &quot;^M&quot; &gt;&gt; /tmp/meminfo.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cron定时任务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义systemd服务练习</title>
    <link href="/2022/07/03/%E8%87%AA%E5%AE%9A%E4%B9%89systemd%E6%9C%8D%E5%8A%A1%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/07/03/%E8%87%AA%E5%AE%9A%E4%B9%89systemd%E6%9C%8D%E5%8A%A1%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>​自定义一个systemd服务定时去其他服务器上检查&#x2F;tmp&#x2F;下文件的个数，如果发现数量有变化就记录变化情况到文件中。</p><p>unit 格式说明：以 “#” 开头的行后面的内容会被认为是注释</p><p>​   相关布尔值，1、yes、on、true 都是开启，0、no、off、false 都是关闭</p><p>​   时间单位默认是秒，所以要用毫秒（ms）分钟（m）等须显式说明</p><p>service unit file文件通常由三部分组成：</p><p>​[Unit]：定义与Unit类型无关的通用选项；用于提供unit的描述信息、unit行为及依赖关系等</p><p>​[Service]：与特定类型相关的专用选项；此处为Service类型</p><p>​[Install]：定义由“systemctl enable”以及”systemctl disable“命令在实现服务启用或禁用时用到的一些选项</p><span id="more"></span><h3 id="建立服务文件"><a href="#建立服务文件" class="headerlink" title="建立服务文件"></a>建立服务文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">按上述格式编写自定义服务</span><br>[root@centos8 ~]$vim /etc/systemd/system/checkfile.service<br><br>[Unit]<br>Description=Regularly check the number of files under /tmp/ on other servers. If the number changes, record the changes in the file.<br><br>[Service]<br>Type=simple<br>ExecStart=/root/checkfiles.sh<br>User=root<br><br>[Install]<br>WantedBy=multi-user.target<br><br></code></pre></td></tr></table></figure><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看其它服务器需要远程登录，使用expect处理交互式操作。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将读取的文件数量存入filenum文件，filenum2文件保存当前值，当数值变化时，记录变化情况到tmpfilenum,同时将变化后的值记录为当前值</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">定时2小时检查一次</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>while true;do<br>&#123;<br>expect &lt;&lt;EOF<br>set timeout 60<br>spawn ssh 10.0.0.152 &quot;ls -al /tmp | wc -l&quot;<br>expect &#123;<br>        &quot;yes/no&quot; &#123; send &quot;yes\n&quot;;exp_continue &#125;<br>        &quot;password&quot; &#123; send &quot;passwd\n&quot; &#125;<br>&#125;       <br>expect eof<br>EOF<br>&#125; &gt; /root/filenum.log<br>cat /root/filenum.log |tail -1 &gt;&gt; filenum2.log<br>num=`cat /root/filenum.log |tail -1`<br>num2=`cat /root/filenum2.log |head -1`<br>if [ $num != $num2 ];then<br>        cat /root/filenum.log |tail -1 &gt; filenum2.log<br>         echo -e &quot;`date`\n origin number of file is $num2 \n present number is $num &quot;  &gt;&gt; /root/tmpfilenum.log<br>fi<br>sleep 7200s<br>done<br></code></pre></td></tr></table></figure><p>模拟效果如下</p><p>​服务器增加文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[root@localhost /tmp]</span><span class="hljs-variable">$touch</span> <span class="hljs-number">1</span><br><span class="hljs-selector-attr">[root@centos8 ~]</span><span class="hljs-variable">$bash</span> checkfiles<span class="hljs-selector-class">.sh</span><br><span class="hljs-selector-attr">[root@localhost /tmp]</span><span class="hljs-variable">$touch</span> <span class="hljs-number">2</span><br><span class="hljs-selector-attr">[root@centos8 ~]</span><span class="hljs-variable">$bash</span> checkfiles<span class="hljs-selector-class">.sh</span><br><span class="hljs-selector-attr">[root@centos8 ~]</span><span class="hljs-variable">$cat</span> tmpfilenum.log<br></code></pre></td></tr></table></figure><p>​<img src="image-20220703122353809.png" alt="image-20220703122353809"></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[root@centos8 ~]</span><span class="hljs-variable">$systemctl</span> daemon-reload<br><span class="hljs-selector-attr">[root@centos8 ~]</span><span class="hljs-variable">$systemctl</span> enable <span class="hljs-attr">--now</span>  checkfile.service<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>systemd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux进程和内存概念</title>
    <link href="/2022/07/02/Linux%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E6%A6%82%E5%BF%B5/"/>
    <url>/2022/07/02/Linux%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><span id="more"></span><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>​进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。进程一般由程序、数据集合和进程控制块三部分组成。</p><p>​简单地理解：运行一个程序，其代码和相关数据被操作系统加载到内存当中，占用系统资源，就可以视为一个进程。</p><p>​进程的结构如下图，进程由内存空间和线程组成。</p><p><img src="image-20220702211721660.png" alt="image-20220702211721660"></p><h3 id="主要状态"><a href="#主要状态" class="headerlink" title="主要状态"></a>主要状态</h3><p>​<img src="image-20220702213345138.png" alt="image-20220702213345138"></p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>​CPU资源是有限的，因此需要针对进程运行进行优先级管理，设置运行次序。</p><p>​以数字表示优先级，系统优先级中数字越小优先级越高，实时优先级数字越大优先级越高，nice值越小优先级越高</p><p><img src="image-20220702213240787.png" alt="image-20220702213240787"></p><h3 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h3><p>​pstree 可以用来显示进程的父子关系，以树形结构显示</p><p>​ps 即 process state，可以进程当前状态的快照，默认显示当前终端中的进程，Linux系统各进程的相</p><p>关信息均保存在&#x2F;proc&#x2F;PID目录下的各文件中。 显示的进程状态为当前瞬时状态，有些进程状态可能不断变化。</p><p>​renice命令可以调整正在执行中的进程的优先级</p><p>​top 查看动态变化的实时进程状态</p><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>​内存是用于存放CPU运算数据的存储器。CPU在运行进程时，需要访问内存，但CPU并不是直接访问物理内存地址，而是通过虚拟地址空间来间接访问到物理内存。操作系统通过在虚拟地址和物理地址之间建立映射关系，来让CPU可以间接访问到物理地址。程序在访问一个内存地址指向的内存时,CPU不是直接把这个地址送到内存总线上,而是被送到MMU（Memory Management Unit),然后把这个内存地址映射到实际的物理内存地址上，然后通过总线再去访问内存，程序操作的地址称为虚拟内存地址。</p><p><img src="image-20220702215750777.png" alt="image-20220702215750777"></p><p>​其中：被用作虚拟内存的磁盘空间就被称为交换空间；通过将虚拟地址空间以512Byte~8K的大小作为一个单位，这个单位就被称为页；将物理地址按照和页同样的大小作为一个单位，这个单位就被称为页框；操作系统通过维护一张表，这张表记录每一对页和页框的映射关系，这张表就被称为页表。访问虚拟地址时，计算机通过页表找到对应的实际物理地址访问。</p><h3 id="进程使用内存问题"><a href="#进程使用内存问题" class="headerlink" title="进程使用内存问题"></a>进程使用内存问题</h3><p>内存泄漏Memory Leak：指程序中用malloc或new申请了一块内存，但是没有用free或delete将内存释放，导致这块内存一直处于占用状态。</p><p>内存溢出Memory Overflow：某个程序申请的内存空间中写入了超过空间容量的数据</p><p>内存不足OOM：说明内存已快被耗尽，此时系统会随机挑选进程将其结束。</p><h3 id="相关工具-1"><a href="#相关工具-1" class="headerlink" title="相关工具"></a>相关工具</h3><p>free 可以显示内存空间使用状态</p><p>pmap显示进程对应的内存映射</p><p>vmstat显示虚拟内存信息</p>]]></content>
    
    
    <categories>
      
      <category>Linux系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux内核编译安装</title>
    <link href="/2022/07/02/Linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <url>/2022/07/02/Linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>​从官网<a href="https://www.kernel.org/">https://www.kernel.org/</a> 下载Linux内核源代码包文件编译安装，日后可根据使用要求对操作系统内核进行相应修改。以下为编译安装内核的简单示例</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><span id="more"></span><h3 id="安装所需软件包"><a href="#安装所需软件包" class="headerlink" title="安装所需软件包"></a>安装所需软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">[root@centos8 ~]$yum -y install gcc make ncurses-devel flex bison openssl-devel elfutils-libelf-devel<br></code></pre></td></tr></table></figure><h3 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos8 ~]$tar xf linux-5.18.8.tar.xz -C xf linux-5.18.8.tar.xz -C /usr/local/src<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置文件可以直接复制当前内核的，然后进行修改</span><br>[root@centos8 /usr/local/src/linux-5.18.8]$cp /boot/config-4.18.0-240.el8.x86_64 ./.config<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进行以下修改</span><br>[root@centos8 /usr/local/src/linux-5.18.8]$vim .config <br><span class="hljs-meta prompt_"># </span><span class="language-bash">CONFIG_MODULE_SIG=y <span class="hljs-comment">#注释此行</span></span><br>CONFIG_SYSTEM_TRUSTED_KEYS=&quot;&quot; #修改此行<br><span class="hljs-meta prompt_"># </span><span class="language-bash">CONFIG_DEBUG_INFO_BTF=y     <span class="hljs-comment">#linux-5.8.5版本后需要注释此行</span></span><br></code></pre></td></tr></table></figure><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><h3 id="配置内核选项"><a href="#配置内核选项" class="headerlink" title="配置内核选项"></a>配置内核选项</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#仅添加自定义内核名称，添加一个文件系统</span><br>[root@centos8 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>linux-<span class="hljs-number">5.18</span>.<span class="hljs-number">8</span>]<span class="hljs-variable">$make</span> menuconfig<br></code></pre></td></tr></table></figure><p><img src="image-20220702195116936.png" alt="image-20220702195116936"></p><p>在General setup中选择local version添加自定义版本号</p><p>在File system中选择一个文件系统按空格添加，M为模块方式</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#安装过程较慢，可指定多核运行节省时间   </span><br>[root@centos8 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>linux-<span class="hljs-number">5.18</span>.<span class="hljs-number">8</span>]<span class="hljs-variable">$lscpu</span><br><span class="hljs-comment">#make为全编译，也可只编译一部分内核功能</span><br>[root@centos8 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>linux-<span class="hljs-number">5.18</span>.<span class="hljs-number">8</span>]<span class="hljs-variable">$make</span> -j <span class="hljs-number">16</span>  <br><span class="hljs-comment">#安装模块</span><br>[root@centos8 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>linux-<span class="hljs-number">5.18</span>.<span class="hljs-number">8</span>]<span class="hljs-variable">$make</span> modules_install<br><span class="hljs-comment">#安装内核相关文件</span><br>[root@centos8 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>linux-<span class="hljs-number">5.18</span>.<span class="hljs-number">8</span>]<span class="hljs-variable">$make</span> install<br></code></pre></td></tr></table></figure><p>​安装成功如图<img src="image-20220702205831782.png" alt="image-20220702205831782"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@centos8</span> ~]$uname -r<br><span class="hljs-number">5.18</span><span class="hljs-number">.8</span>-N67024<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux启动流程</title>
    <link href="/2022/07/02/Linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/07/02/Linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>​大致概述了Linux启动流程，包含硬件启动和Linux程序启动步骤。</p><h1 id="硬件启动部分"><a href="#硬件启动部分" class="headerlink" title="硬件启动部分"></a>硬件启动部分</h1><span id="more"></span><p>​开机后首先运行的是固化到主板ROM中的BIOS，BIOS中包含多个重要功能程序，其中首先运行加电自检POST初始化硬件设备、检测系统主要设备，然后根据BIOS设置的启动顺序，检测驱动器，最后读取硬盘第一个扇区（MBR扇区）加载其中的引导程序。</p><h1 id="GRUB启动引导"><a href="#GRUB启动引导" class="headerlink" title="GRUB启动引导"></a>GRUB启动引导</h1><h3 id="MBR引导"><a href="#MBR引导" class="headerlink" title="MBR引导"></a>MBR引导</h3><p>​上述读取的MBR扇区如下图，读取后会运行启动加载器Boot Loader程序，Boot Loader程序中含有GRUB程序的一部分，可在接下来开启GRUB（多重操作系统启动管理器）启动引导阶段。</p><p>​<img src="image-20220702163927357.png" alt="image-20220702163927357"></p><p>​因此MBR扇区中前446字节损坏将导致Boot Loader程序无法运行，分区表损坏将导致无法读取磁盘数据，都将导致无法启动。若MBR扇区损坏需要使用光盘进入救援模式修复。</p><h3 id="GRUB启动引导一阶段"><a href="#GRUB启动引导一阶段" class="headerlink" title="GRUB启动引导一阶段"></a>GRUB启动引导一阶段</h3><p>​主要运行MBR中储存的Boot Loader程序，为阶段二做准备。在GRUB一阶段和二阶段中还存在过渡的1.5阶段，在此阶段中将识别boot loader程序后的分区表部分，启动分区文件系统，并访问&#x2F;boot&#x2F;grub目录下阶段二相关文件，将阶段二文件放入内存并执行，开启GRUB启动引导下一阶段。</p><h3 id="GRUB启动引导二阶段"><a href="#GRUB启动引导二阶段" class="headerlink" title="GRUB启动引导二阶段"></a>GRUB启动引导二阶段</h3><p>​读取配置文件grub.conf，位置同为&#x2F;boot&#x2F;grub目录下。</p><p>​加载内核镜像到内存并显示操作系统启动菜单，开启虚拟文件系统和系统内核。</p><h1 id="内核引导阶段"><a href="#内核引导阶段" class="headerlink" title="内核引导阶段"></a>内核引导阶段</h1><p>​内核加载过程探测可识别到的所有硬件设备，然后加载硬件驱动程序，以只读方式挂载根文件系统，运行用户空间的第一个应用程序：&#x2F;sbin&#x2F;init（所有进程的父进程，从CentOS7开始被systemd取代）</p><h1 id="init进程初始化阶段"><a href="#init进程初始化阶段" class="headerlink" title="init进程初始化阶段"></a>init进程初始化阶段</h1><p>​在该阶段将启动系统的初始化设置，主要包括：读取&#x2F;etc&#x2F;initab配置设定运行级别，运行sysinit初始化脚本，启动rc.local文件中的用户自定义服务。其中将具有以下主要功能。</p><p><img src="image-20220702172501677.png" alt="image-20220702172501677"></p><p>​最后执行&#x2F;bin&#x2F;login程序等待用户登录。</p><p>详细流程可参考下图</p><p><img src="http://s4.51cto.com/wyfs02/M02/87/20/wKiom1fVBELjXsvaAAUkuL83t2Q304.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Linux系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP协议和网卡配置</title>
    <link href="/2022/06/25/TCP%E5%8D%8F%E8%AE%AE%E5%92%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/06/25/TCP%E5%8D%8F%E8%AE%AE%E5%92%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>TCP协议三次握手（建立连接）和四次挥手（断开）原理，网卡配置和绑定</p><h1 id="TCP-x2F-IP协议"><a href="#TCP-x2F-IP协议" class="headerlink" title="TCP&#x2F;IP协议"></a>TCP&#x2F;IP协议</h1><span id="more"></span><p>​全称Transmission Control Protocol&#x2F;Internet Protocol 传输控制协议&#x2F;因特网互联协议，与UDP协议相比更注重通信双方连接的稳定性和可靠性，也因此应用于对传输速度要求不高的领域，与UDP协议形成互补。</p><h3 id="TCP三次握手（建立连接）"><a href="#TCP三次握手（建立连接）" class="headerlink" title="TCP三次握手（建立连接）"></a>TCP三次握手（建立连接）</h3><p>​建立连接过程双方共需要发送3次数据报文，是因为需要分别确定请求连接方和对方都能成功接收和发送信息给对方。</p><p><img src="image-20220625094701727.png" alt="image-20220625094701727"></p><p>​链接发起方先发送带有SYN（表明该报文段用于建立连接）的同步请求报文，自身进入同步发送态，等待接收回复；对方收到请求后若同意连接则回复应答：含有ACK&#x3D;1（表示同意）seq&#x3D;y和ack&#x3D;x+1表示自身和希望的对方的数据初始序号，随后进入同步收到态。</p><p>​连接发起方收到回复后就确定了自己能够成功发送和接收对方数据，进入连接状态，同时向对方发送确认报文，报文数据的初始序号为对方上条报文ack&#x3D;x+1确定的位置。</p><p>​对方收到上条报文后也确定了自己能够成功发送和接收对方数据，进入连接状态。</p><h3 id="TCP四次挥手（断开连接）"><a href="#TCP四次挥手（断开连接）" class="headerlink" title="TCP四次挥手（断开连接）"></a>TCP四次挥手（断开连接）</h3><p>​四次挥手的原理与三次握手类似，但还需要在断开连接前完成残余数据的发送。客户端最终的时间等待状态是考虑到网络延迟的问题，防止服务器端关闭等待状态中部分发送的数据包还未到达从而丢失的问题。</p><p><img src="image-20220625100829523.png" alt="image-20220625100829523"></p><p>​客户端数据发送完成，则它向服务端发送连接释放请求报文，携带FIN&#x3D;1表示该报文段是一个连接释放请求，seq&#x3D;u可得发送数据的最后一个字节位置，客户端将进入终止等待1状态。</p><p>​服务器收到客户端连接释放报文，通知相应的高层应用进程客户端方向的连接已经释放了。此时服务端进入了关闭等待状态，并向客户端发出连接释放的应答报文包含：ACK&#x3D;1（表示同意），ack&#x3D;u+1表示希望收到从第u+1个字节开始的报文段，应答报文开始序列号seq&#x3D;v。开始残余数据发送。客户端收到应答后进入终止等待2态，等待接收残余数据。</p><p>​服务端将最后的数据发送完毕后，就向客户端发送连接释放报文，包含：FIN&#x3D;1，ack&#x3D;u+1。此时，服务器就进入了最后确认态，等待客户端的确认。</p><p>​客户端收到服务器的连接释放报文后，向服务端发出确认应答，报文头：ACK&#x3D;1，ack&#x3D;w+1，而自己的序列号是seq&#x3D;u+1，此时，客户端就进入了时间等待状态，过一段时间后进入断开态。服务器收到该应答则会立即断开。</p><h1 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h1><h3 id="静态IP配置"><a href="#静态IP配置" class="headerlink" title="静态IP配置"></a>静态IP配置</h3><p>CentOS</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改网卡配置文件</span><br>[root@centos8 ~]$vim /etc/sysconfig/network-scripts/ifcfg-eth0 <br>DEVICE=eth0#设备名<br>NAME=eth0<br>BOOTPROTO=static#需要修改，=dhcp为自动分配ip，static使用静态地址<br>IPADDR=10.0.0.150#需要添加，指定IP地址<br>PREFIX=24#子网掩码  <br>GATEWAY=10.0.0.2#网关，连接其他网段时必需<br>DNS1=10.0.0.2<br>DNS2=180.76.76.76<br>ONBOOT=yes   #是否启用<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使配置文件生效</span><br>[root@centos8 ~]$nmcli connection reload eth0<br>[root@centos8 ~]$nmcli connection  up eth0<br></code></pre></td></tr></table></figure><p>Ubuntu</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改网卡配置文件，该文件缩进严格，若格式不对网卡将不生效</span><br>root@ubuntu1804:~# vim /etc/netplan/01-netcfg.yaml <br>network:<br>  version: 2<br>  renderer: networkd<br>  ethernets:<br>    ens33:     #网卡设备名<br>      addresses: [10.0.0.151/24]   #需要添加，指定IP地址<br>      gateway4: 10.0.0.2<br>      #dhcp4: yes#默认dhcp分配ip，需要关闭<br><span class="hljs-meta prompt_">#</span><span class="language-bash">立即生效</span><br>root@ubuntu1804:~# netplan apply<br></code></pre></td></tr></table></figure><h3 id="网卡绑定bond0"><a href="#网卡绑定bond0" class="headerlink" title="网卡绑定bond0"></a>网卡绑定bond0</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">使用nmcli工具生成配置文件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">type</span>指定网卡类型为bond，  mode选择聚合链路模式为0  设置网卡ip</span><br>[root@centos8 ~]$nmcli con add type bond con-name ethbond0 ifname bond0 mode balance-rr ipv4.method manual ipv4.addresses 10.0.0.160/24<br>Connection &#x27;ethbond0&#x27; (e6fae3c2-46fe-4892-b457-fc813fab0ed1) successfully added.<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加从属网卡</span><br>[root@centos8 ~]$nmcli  con add type bond-slave ifname eth0 master bond0<br>Connection &#x27;bond-slave-eth0&#x27; (eaa05680-87e6-4684-b69b-ab9f1e0ffe96) successfully added.<br>[root@centos8 ~]$nmcli  con add type bond-slave ifname eth1 master bond0<br>Connection &#x27;bond-slave-eth1&#x27; (844df635-954f-4496-8fec-1740dc768a6c) successfully added.<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启用bond网卡</span><br>[root@centos8 ~]$nmcli con up bond-slave-eth0<br>[root@centos8 ~]$nmcli con up bond-slave-eth1<br>[root@centos8 ~]$nmcli con up ethbond0<br>[root@centos8 ~]$nmcli connection show<br>NAME             UUID                                  TYPE      DEVICE <br>ethbond0         e6fae3c2-46fe-4892-b457-fc813fab0ed1  bond      bond0  <br>virbr0           b553e4bb-f868-428f-902b-0df0c73d2fe4  bridge    virbr0 <br>bond-slave-eth0  eaa05680-87e6-4684-b69b-ab9f1e0ffe96  ethernet  eth0   <br>bond-slave-eth1  844df635-954f-4496-8fec-1740dc768a6c  ethernet  eth1   <br>eth0             5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03  ethernet  -- <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逻辑卷和RAID练习</title>
    <link href="/2022/06/24/%E9%80%BB%E8%BE%91%E5%8D%B7%E5%92%8CRAID%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/06/24/%E9%80%BB%E8%BE%91%E5%8D%B7%E5%92%8CRAID%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>逻辑卷的创建、缩容、扩容，逻辑卷快照备份。RAID独立硬盘冗余阵列原理，RAID设备创建</p><h1 id="逻辑卷"><a href="#逻辑卷" class="headerlink" title="逻辑卷"></a>逻辑卷</h1><span id="more"></span><h3 id="逻辑卷实现过程"><a href="#逻辑卷实现过程" class="headerlink" title="逻辑卷实现过程"></a>逻辑卷实现过程</h3><p>将设备指定为物理卷</p><p>用一个或者多个物理卷来创建一个卷组，物理卷是用固定大小的物理区域（Physical Extent，</p><p>PE）来定义的</p><p>在物理卷上创建的逻辑卷， 是由物理区域（PE）组成</p><p>可以在逻辑卷上创建文件系统并挂载</p><p><img src="image-20220624204119983.png" alt="image-20220624204119983"></p><h3 id="逻辑卷创建"><a href="#逻辑卷创建" class="headerlink" title="逻辑卷创建"></a>逻辑卷创建</h3><p>​创建一个至少有两个PV组成的大小为20G的名为testvg的VG，要求PE大小为16M，而后在卷组中创建大小为5G的逻辑卷testlv;挂载至&#x2F;users目录。</p><p>​<img src="image-20220624205124017.png" alt="image-20220624205124017"></p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]$pvcreate /dev/sdb /dev/sdc<br>  Physical volume &quot;/dev/sdb&quot; successfully created.<br>  Physical volume &quot;/dev/sdc&quot; successfully created.<br>[root@localhost ~]$vgcreate -s 16M testvg /dev/sdb /dev/sdc<br>  Volume group &quot;testvg&quot; successfully created<br>[root@localhost ~]$lvcreate -L 5G -n testlv testvg<br>  Logical volume &quot;testlv&quot; created.<br>[root@localhost ~]$mkfs.ext4 /dev/testvg/testlv  <br>[root@localhost ~]$mkdir /users<br>[root@localhost ~]$mount /dev/testvg/testlv  /users<br>[root@localhost ~]$lsblk<br>NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda               8:0    0   20G  0 disk <br>├─sda1            8:1    0    1G  0 part /boot<br>└─sda2            8:2    0   19G  0 part <br>  ├─centos-root 253:0    0   17G  0 lvm  /<br>  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]<br>sdb               8:16   0   10G  0 disk <br>└─testvg-testlv 253:2    0    5G  0 lvm  /users<br>sdc               8:32   0   10G  0 disk <br>sr0              11:0    1  4.4G  0 rom  <br><br></code></pre></td></tr></table></figure><h3 id="逻辑卷扩容和缩容"><a href="#逻辑卷扩容和缩容" class="headerlink" title="逻辑卷扩容和缩容"></a>逻辑卷扩容和缩容</h3><p>扩展testlv至7G，要求archlinux用户的文件不能丢失。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">新建用户archlinux,要求其家目录为/users/archlinux，而后su切换至archlinux用户，复制/etc/pam.d/目录至自己的家目录。</span><br>[archlinux@localhost /root]$ll -d /users/archlinux/pam.d/<br>drwxr-xr-x. 2 archlinux archlinux 4096 Jun 24 21:23 /users/archlinux/pam.d/<br>[root@localhost ~]$lvextend -L 7G /dev/testvg/testlv <br>  Size of logical volume testvg/testlv changed from 5.00 GiB (320 extents) to 7.00 GiB (448 extents).<br>  Logical volume testvg/testlv successfully resized.<br>[root@localhost ~]$resize2fs /dev/testvg/testlv<br>[root@localhost ~]$lsblk<br>└─testvg-testlv 253:2    0    7G  0 lvm  /users<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">确认文件有无丢失</span><br>[root@localhost ~]$ll -d /users/archlinux/pam.d/<br>drwxr-xr-x. 2 archlinux archlinux 4096 Jun 24 21:23 /users/archlinux/pam.d/<br></code></pre></td></tr></table></figure><p>收缩testlv至3G，要求archlinux用户的文件不能丢失</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">xfs文件系统不支持缩容，可使用xfsdump备份数据，卸载文件系统后缩容，最后再重新创建文件系统</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">缩容需要取消挂载</span><br>[root@localhost ~]umount /dev/testvg/testlv<br>[root@localhost ~]e2fsck -f /dev/testvg/testlv<br>[root@localhost ~]resize2fs /dev/testvg/testlv 3G<br>[root@localhost ~]lvreduce -L 3G /dev/testvg/testlv<br>[root@localhost ~]mount /dev/testvg/testlv /users<br><span class="hljs-meta prompt_">#</span><span class="language-bash">确认文件有无丢失</span><br>[root@localhost ~]$ll -d /users/archlinux/pam.d/<br>drwxr-xr-x. 2 archlinux archlinux 4096 Jun 24 21:23 /users/archlinux/pam.d/<br></code></pre></td></tr></table></figure><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>对testlv创建快照，并尝试基于快照备份数据，验正快照的功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建快照</span><br>[root@localhost ~]lvcreate -l 64 -s -n testlv-snapshot /dev/testvg/testlv<br>[root@localhost ~]mkfs.ext4 /dev/testvg/testlv-snapshot<br>[root@localhost ~]mkdir  -p /mnt/backup<br>[root@localhost ~]mount -o ro,nouuid /dev/testvg/testlv-snapshot   /mnt/snap<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除文件</span><br>[root@localhost ~]$rm -rf /users/archlinux/pam.d<br><span class="hljs-meta prompt_">#</span><span class="language-bash">恢复后快照逻辑卷将消失</span><br>[root@localhost ~]$umount /dev/testvg/testlv-snapshot <br>[root@localhost ~]$umount /dev/testvg/testlv<br>[root@localhost ~]$lvconvert --merge /dev/testvg/testlv-snapshot <br>[root@localhost ~]$ll -d /users/archlinux/pam.d/<br>drwxr-xr-x. 2 archlinux archlinux 4096 Jun 24 21:23 /users/archlinux/pam.d/<br><br></code></pre></td></tr></table></figure><h1 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h1><p>RAID（独立硬盘冗余阵列）把多个硬盘组成一个逻辑硬盘，操作系统将其视作一个实体硬盘。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>RAID0：数据分散存放在每个磁盘中，并行读写数据，因此读写速度最快，但没有容错能力，一个磁盘损坏将丢失全部数据。至少需要2个磁盘。</p><p><img src="image-20220624234259831.png" alt="image-20220624234259831"></p><p>RAID1：相同的数据存放在每个磁盘中，并行读取数据，因此读速度上升，写速度下降，每个磁盘相当于互为备份，容错能力最高，但磁盘利用率最低。至少需要2个磁盘。</p><p><img src="image-20220624234316115.png" alt="image-20220624234316115"></p><p>RAID5：数据分散存放在每个磁盘中，并且还有一位校验位分散存放在每个磁盘中，并行读写数据，因此读写性能上升，允许一个磁盘损坏，损坏时通过其他磁盘的数据和校验位根据算法可恢复丢失的数据。相比于RAID4校验位放置于校验盘，RAID5分散存放可防止校验盘频繁读取造成寿命下降。至少需要3个磁盘。</p><p><img src="image-20220624234327249.png" alt="image-20220624234327249"></p><p>RAID还可以组合使用</p><p>RAID10：先由多块磁盘组成RAID1镜像组，存放同样的部分数据，再由多个RAID1磁盘组成RAID10。因为RAID0的特性，读写性能上升，由于RAID1的特性，最多允许每组镜像中损坏一个磁盘。最少需要4个磁盘。</p><p><img src="image-20220624234337644.png" alt="image-20220624234337644"></p><p>RAID01：先由多块磁盘组成RAID0磁盘分散存放数据，再由多个存有相同数据RAID0磁盘组成RAID01。因为RAID1的特性，读速度上升，写速度将随着RAID0组的增加而降低。容错能力较高。最少需要4个磁盘。</p><p><img src="image-20220624234345584.png" alt="image-20220624234345584"></p><h3 id="创建RAID"><a href="#创建RAID" class="headerlink" title="创建RAID"></a>创建RAID</h3><p>创建10G的RAID1，要求CHUNK为128K，文件系统为ext4，有一个空闲盘，开机可自动挂载至&#x2F;backup目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">使用mdadm工具实现软RAID</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-C: 创建模式</span> <br> -n #: 使用#个块设备来创建此RAID <br> -l #：指明要创建的RAID的级别<br> -a &#123;yes|no&#125;：自动创建目标RAID设备的设备文件<br> -c CHUNK_SIZE: 指明块大小,单位k<br> -x #: 指明空闲盘的个数<br>[root@localhost ~]mdadm -C /dev/md0 -a yes -l 1 -n 3 -x 1 -c 128 /dev/sd&#123;b,c,d&#125;<br>[root@localhost ~]mkfs.ext4 /dev/md0<br>[root@localhost ~]vim /etc/fstab<br>/dev/md0   /backup    ext4    defaults   0    0<br></code></pre></td></tr></table></figure><p>创建一个可用空间为10G的RAID10设备，要求CHUNK为256K，文件系统为ext4，开机可自动挂载至&#x2F;mydata目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]mdadm -C /dev/md0 -a yes -l 1 -n 2 -c 256 /dev/sd&#123;b,c&#125;<br>[root@localhost ~]mdadm -C /dev/md1 -a yes -l 1 -n 2 -c 256 /dev/sd&#123;d,e&#125;<br>[root@localhost ~]mdadm -C /dev/md2 -a yes -l 0 -n 2 -c 256 /dev/md&#123;0,1&#125;<br>[root@localhost ~]mkfs.ext4 /dev/md2<br>[root@localhost ~]vim /etc/fstab<br>/dev/md2   /mydata    ext4    defaults   0    0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>磁盘管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免密登录脚本编写</title>
    <link href="/2022/06/24/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/"/>
    <url>/2022/06/24/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="脚本编写过程"><a href="#脚本编写过程" class="headerlink" title="脚本编写过程"></a>脚本编写过程</h1><span id="more"></span><p>​免密登录实质是基于密钥对登录，客户端生成ssh密钥对后将公钥发送给服务器端，服务器端将公钥加入.ssh文件夹下的authorized_keys中后将允许客户端免密登录。</p><p>​免密登录过程涉及的命令为非交互式，因此在编写脚本时需要使用expect对交互式命令捕捉相应文本自动输入主机ip和密码。</p><h2 id="脚本功能"><a href="#脚本功能" class="headerlink" title="脚本功能"></a>脚本功能</h2><p>1）通过shift读取脚本参数<br>2）通过select来选择功能.例如功能有</p><ul><li>安装mysql</li><li>安装apache</li><li>免密钥登陆主机<br>当前我们只实现免密钥登陆主机<br>3）通过函数封装每个功能<br>4）将免密钥登陆的过程可以重复进行, while 循环实现重复，需要有退出过程。当用户输入exit时，退出免密钥功能。<br>5）支持输入一批主机免密钥，使用数组 实现</li></ul><h2 id="功能菜单"><a href="#功能菜单" class="headerlink" title="功能菜单"></a>功能菜单</h2><p>​首先使用select编写选择菜单</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">PS3=&quot;choose a script to execute:(1-5)&quot;<br>select MENU in 安装mysql 安装apache 免密钥登陆主机 输入一批主机免密钥 退出;do<br>case $REPLY in<br>1)<br>        echo &quot;start installation of Mysql&quot;<br>        ;;<br>2)<br>        echo &quot;start installation of Apache&quot;<br>        ;;<br>3)<br>        ssh<br>        ;;<br>4)<br>        batch_ssh<br>        ;;<br>5)<br>        echo &quot;exit&quot;<br>        break<br>        ;;<br>esac<br>done<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="image-20220624154915490.png" alt="image-20220624154915490"></p><h2 id="while循环免密钥登录"><a href="#while循环免密钥登录" class="headerlink" title="while循环免密钥登录"></a>while循环免密钥登录</h2><p>​使用函数封装</p><p>​使用while循环让用户可重复输入主机和密码；当用户输入exit时，退出该模块</p><p>​expect处理ssh传输公钥的非交互式命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh() &#123; <br>        while true;do &#123; <br>                read -p &quot;enter ip and password&quot; ip passwd<br>                if [ &quot;$ip&quot; = &quot;exit&quot; ];then<br>                        exit<br>                fi<br>expect &lt;&lt;EOF<br>set timeout 60<br>spawn ssh-copy-id $ip<br>expect &#123;<br>        &quot;yes/no&quot; &#123; send &quot;yes\n&quot;;exp_continue &#125;<br>        &quot;password&quot; &#123; send &quot;$passwd\n&quot; &#125;<br>&#125;<br>expect eof<br>EOF<br> <br>&#125; <br></code></pre></td></tr></table></figure><p>执行效果如下</p><p>​输入一个主机ip和密码后输入exit退出<img src="image-20220624155551696.png" alt="image-20220624155551696"></p><h2 id="输入一批主机"><a href="#输入一批主机" class="headerlink" title="输入一批主机"></a>输入一批主机</h2><p>支持输入一批主机免密钥，使用read -a命令输入数组</p><p>for循环遍历数组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">batch_ssh() &#123;<br>        declare -a host<br>        read -p &quot;entet ip:&quot; -a host<br>        passwd=123456<br>        for i in $&#123;host[@]&#125; ;do &#123;<br>expect &lt;&lt;EOF<br>set timeout 60<br>spawn ssh-copy-id $i<br>expect &#123;<br>        &quot;yes/no&quot; &#123; send &quot;yes\n&quot;;exp_countinue &#125;<br>        &quot;password&quot; &#123; send &quot;$passwd\n&quot; &#125;<br>&#125;<br>expect eof<br>EOF<br>&#125;<br>        done<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">若这一批主机密码不同，可先将密码写入一个文件，使用<span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span>逐行读取</span><br></code></pre></td></tr></table></figure><p>执行效果</p><p>​<img src="image-20220624170055445.png" alt="image-20220624170055445"></p><h2 id="完整脚本附录"><a href="#完整脚本附录" class="headerlink" title="完整脚本附录"></a>完整脚本附录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>ssh() &#123;<br>        while true;do &#123;<br>                read -p &quot;enter ip and password&quot; ip passwd<br>                if [ &quot;$ip&quot; = &quot;exit&quot; ];then<br>                        exit<br>                fi<br>expect &lt;&lt;EOF<br>set timeout 60<br>spawn ssh-copy-id $ip<br>expect &#123;<br>        &quot;yes/no&quot; &#123; send &quot;yes\n&quot;;exp_continue &#125;<br>        &quot;password&quot; &#123; send &quot;$passwd\n&quot; &#125;<br>&#125;<br>expect eof<br>EOF<br><br>&#125;<br>        done<br>      &#125;<br>batch_ssh() &#123;<br>        declare -a host<br>        read -p &quot;entet ip:&quot; -a host<br>        passwd=114514yjsp<br>        for i in $&#123;host[@]&#125; ;do &#123;<br>expect &lt;&lt;EOF<br>set timeout 60<br>spawn ssh-copy-id $i<br>expect &#123;<br>        &quot;yes/no&quot; &#123; send &quot;yes\n&quot;;exp_countinue &#125;<br>        &quot;password&quot; &#123; send &quot;$passwd\n&quot; &#125;<br>&#125;<br>expect eof<br>EOF<br>&#125;<br>        done<br>&#125;<br>PS3=&quot;choose a script to execute:(1-5)&quot;<br>select MENU in 安装mysql 安装apache 免密钥登陆主机 输入一批主机免密钥 退出;do<br>case $REPLY in<br>1)<br>        echo &quot;start installation of Mysql&quot;<br>        ;;<br>2)<br>        echo &quot;start installation of Apache&quot;<br>        ;;<br>3)<br>        ssh<br>        ;;<br>4)<br>        batch_ssh<br>        ;;<br>5)<br>        echo &quot;exit&quot;<br>        break<br>        ;;<br>esac<br>done<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基于key验证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell脚本练习</title>
    <link href="/2022/06/14/Shell%E8%84%9A%E6%9C%AC%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/06/14/Shell%E8%84%9A%E6%9C%AC%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="实现以下功能"><a href="#实现以下功能" class="headerlink" title="实现以下功能"></a>实现以下功能</h1><span id="more"></span><p>\1. 运行脚本可以显示出本机的ip地址</p><p>\2. 如果ip地址中有3这个数字，那么就打印出当前的系统时间</p><p>\3. 如果ip地址中不含3这个数字，就批量建立用户magedu_00, magedu_01, … magedu_100并且所有用户同属于magedu组</p><p>\4. 打印出&#x2F;etc&#x2F;passwd这个文件中可以登陆的用户（非&#x2F;usr&#x2F;sbin&#x2F;nologin）</p><p>\5. yum安装nginx服务，并且启动该服务</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>ip=`ifconfig eth0 | awk &#x27;/inet /&#123;print $2&#125;&#x27;`<br>echo $ip<br>groupadd magedu<br>[[ $ip =~ .*3.* ]] &amp;&amp; date || for((i=0;i&lt;=10;i++));do<br>        for((j=0;j&lt;=9;j++));do<br>                [ $i -eq 10 -a $j -ne 0 ] &amp;&amp; break<br>                useradd -g magedu magedu_$&#123;i&#125;$j<br>        done<br>done<br>sed &quot;/nologin/d&quot; /etc/passwd<br>yum install -y nginx &amp;&gt; /dev/null<br>systemctl start nginx.service<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础概念和使用帮助</title>
    <link href="/2022/06/06/Linux%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"/>
    <url>/2022/06/06/Linux%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    
    <content type="html"><![CDATA[<p>初步了解Linux和查看linux命令帮助的方法</p><h1 id="Linux基础概念"><a href="#Linux基础概念" class="headerlink" title="Linux基础概念"></a>Linux基础概念</h1><span id="more"></span><h3 id="什么是Linux"><a href="#什么是Linux" class="headerlink" title="什么是Linux"></a>什么是Linux</h3><p>​Linux操作系统一般指Linux发行套件系统，包含Linux内核和GNU工具，是一种免费使用和自由传播的类UNIX操作系统，使用GPL开源协议。目前已有数百款Linux发行版，其中最主流的有：debian和基于debian的Ubuntu、红帽公司的CentOS、RHEL。</p><h3 id="基于UNIX的哲学思想"><a href="#基于UNIX的哲学思想" class="headerlink" title="基于UNIX的哲学思想"></a>基于UNIX的哲学思想</h3><ul><li>一切都是文件（包括硬件）</li><li>程序小型，单一用途</li><li>链接程序，共同完成复杂任务</li><li>避免令人困惑的用户界面</li><li>配置数据存储在文本中</li></ul><h3 id="Linux版本"><a href="#Linux版本" class="headerlink" title="Linux版本"></a>Linux版本</h3><p>​Linux内核版本由主版本号、次版本号、末版本号组成、打包版本号、厂商版本组成。在上述几个Linux发行版中输入uname -r命令可查看内核版本，如下图。从左到右以点为分隔分别是主版本号，次版本号，末版本号-打包版本号，厂商版本。内核下载官网<a href="http://www.kernel.org/">www.kernel.org</a>  。linux允许安装多个内核，在开机时可选择使用内核。</p><p>​<img src="image-20220606193507236.png" alt="image-20220606193507236"><img src="image-20220606194100301.png" alt="image-20220606194100301"></p><p>​主流Linux发行版本获取：可前往官网下载（速度较慢）或在国内镜像站点下载，如阿里云<a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com</a> ，搜狐 <a href="http://mirrors.sohu.com/">http://mirrors.sohu.com</a> 163 <a href="http://mirrors.163.com/">http://mirrors.163.com</a> 。在索引中选择相应版本下载.iso文件。</p><p>​各版本的详细介绍可参考维基百科页面</p><h3 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h3><p>​Linux内核的设计理念为宏内核（又称单内核和强内核），该设计流派把所有系统服务都放到内核里，所有功能集成于同一个程序，分层实现不同功能，系统庞大复杂。</p><p>​Linux内核虽是但内核，但充分借鉴了微内核设计优点，引入了模块化机制。分模块实现进程管理、内存管理、网络管理、驱动程序、文件系统、安全功能等功能。</p><p>​编译安装内核<a href="https://gituserusegit.github.io/2022/07/02/Linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/">https://gituserusegit.github.io/2022/07/02/Linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</a></p><h3 id="Linux启动流程"><a href="#Linux启动流程" class="headerlink" title="Linux启动流程"></a>Linux启动流程</h3><p>详见</p><p><a href="https://gituserusegit.github.io/2022/07/02/Linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/">https://gituserusegit.github.io/2022/07/02/Linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</a></p><h3 id="Linux进程和内存概念"><a href="#Linux进程和内存概念" class="headerlink" title="Linux进程和内存概念"></a>Linux进程和内存概念</h3><p>详见</p><p><a href="https://gituserusegit.github.io/2022/07/02/Linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/">https://gituserusegit.github.io/2022/07/02/Linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</a></p><h1 id="获取使用帮助"><a href="#获取使用帮助" class="headerlink" title="获取使用帮助"></a>获取使用帮助</h1><p>​在Linux实际使用中，面对繁杂的命令和选项、模块或配置文件的用途，难以完全记住。因此可以使用多种方法获取相关使用帮助。</p><h3 id="whatis-查看命令帮助"><a href="#whatis-查看命令帮助" class="headerlink" title="whatis  查看命令帮助"></a>whatis  查看命令帮助</h3><p>​whatis  COMMAND  使用数据库显示命令的简短描述。下图中（1）（1p）对应man帮助中的章节</p><p>​<img src="image-20220606200622714.png" alt="image-20220606200622714"></p><h3 id="–help或-h选项查看命令帮助"><a href="#–help或-h选项查看命令帮助" class="headerlink" title="–help或-h选项查看命令帮助"></a>–help或-h选项查看命令帮助</h3><p>​COMMAND  –help  显示用法总结和参数列表，绝大多数命令支持。如果是内部命令还可使用help COMMAND的形式。</p><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><p>​info COMMAND  命令信息页，适合通用文档参考，没有参数，列出所有页面。</p><h3 id="man查看命令、配置文件、模块的详细介绍"><a href="#man查看命令、配置文件、模块的详细介绍" class="headerlink" title="man查看命令、配置文件、模块的详细介绍"></a>man查看命令、配置文件、模块的详细介绍</h3><p>​man  COMMAND  提供非常详细的命令描述和使用方法 。可添加用whatis看到的章节参数进入对应man帮助页面。</p><p>​man  file.conf 和man  module.so 同理，显示配置文件和模块的详细描述。</p><p><img src="image-20220606201834643.png" alt="image-20220606201834643"></p><p><img src="image-20220606202220484.png" alt="image-20220606202220484"></p><p>​除了使用以上命令获取帮助，还可以尝试在安装软件包的子目录查找帮助文档，如README、INSTALL、Changelog等字样的文件，HTML、PDF、PS 等格式的文档。最后，还可以通过系统及第三方应用官方文档和知识库等网站获取所需信息。</p>]]></content>
    
    
    <categories>
      
      <category>Linux系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件开源协定和linux安装</title>
    <link href="/2022/06/02/%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%BA%90%E5%8D%8F%E5%AE%9A%E5%92%8Clinux%E5%AE%89%E8%A3%85/"/>
    <url>/2022/06/02/%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%BA%90%E5%8D%8F%E5%AE%9A%E5%92%8Clinux%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>​开源是指一种更自由的软件发布模式，软件程序和源代码文件一起打包提供给用户，让用户在不受限制地使用某个软件功能的基础上还可以对代码按需修改。用户一般享有使用自由、复制自由、修改自由、创建衍生品自由，以及收费自由。</p><h1 id="软件开源协定"><a href="#软件开源协定" class="headerlink" title="软件开源协定"></a>软件开源协定</h1><span id="more"></span><p>​为了保护开源软件工作者的权益，开源促进组织OSI确认了多种开源许可证。其中主要的许可证可有：GPL、BSD、MIT、Mozilla、Apache和LGPL。可以根据软件权益需要选择相应开源协定。</p><p>​<strong>GNU通用公共许可证（</strong>General Public License，<strong>GPL）</strong>：目前广泛使用的开源软件许可协议之一，用户享有运行、学习、共享和修改软件的自由。含有GPL许可证的软件必须开源、免费。</p><p>​<strong>较宽松通用公共许可证（</strong>Lesser GPL, LGPL）：允许商业软件以类库引用的方式使用开源代码，而不用将其产品整体开源。</p><p>​<strong>伯克利软件发布版</strong>（Berkeley Software Distribution, BSD）许可证：另一款被广泛使用的开源软件许可协议。相较于GPL许可证，BSD更加宽松，适合于商业用途。</p><p>​<strong>MIT许可证</strong>（Massachusetts Institute of Technology License）：MIT许可证是目前限制最少的开源许可证之一，用户可以使用、复制、修改、再发布软件。</p><p>​<strong>Mozilla公共许可证</strong>（Mozilla Public License，MPL）：在使用基于MPL许可证的源代码时，后续只需要继续开源这部分特定代码即可，新研发的软件不用完全被该许可证控制。</p><p>​<strong>Apache许可证（</strong>Apache License）：该软件及其衍生品必须继续使用Apache许可证，如果修改了程序源代码，需要在文档中进行声明，若软件是基于他人的源代码编写而成的，则需要保留原始代码的许可证、商标、专利声明及原作者声明的其他内容信息。</p><p>​开源协定的区别可见下图</p><p><img src="image-20220602130449822.png" alt="image-20220602130449822"></p><h1 id="安装Linux系统"><a href="#安装Linux系统" class="headerlink" title="安装Linux系统"></a>安装Linux系统</h1><h3 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h3><p>​从开源镜像站点如阿里云、搜狐、163等网站下载系统镜像文件。安装VMware Workstation虚拟机软件。</p><p>​虚拟机硬件配置参考</p><p>​<img src="image-20220602195103420.png" alt="image-20220602195103420"></p><p>​配置完硬件后开机，选择install开始安装，可随安装过程进行以下设置。</p><h3 id="安装CentOS-8"><a href="#安装CentOS-8" class="headerlink" title="安装CentOS 8"></a>安装CentOS 8</h3><p>​进入安装界面后选择语言，设置磁盘分配策略，在manual partitioning创建分区，分别创建&#x2F;boot &#x2F; &#x2F;swap &#x2F;data分区。</p><p>​在network&amp;host name中设置主机名，打开虚拟网卡。设置时区为亚洲&#x2F;上海时区。</p><p>​开始安装后可设置root用户密码，创建一个普通用户。重启后可正常登陆使用则安装成功。</p><h3 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h3><p>​进入安装界面后选择语言为英语，选择地区香港，选择键盘布局为英语。</p><p>​制定主机名，设置用户密码(第一次登录不能使用root)，设置时区为亚洲&#x2F;上海。</p><p>​在partitioning method界面选择自定义，选择磁盘进行分区，选择FREE SPACE分区，创建根分区占全部剩余空间99%，选择剩余空间创建swap分区，为分区选择文件系统。写入磁盘。</p><p>​空格选择安装openSSH，确认安装GNUB启动程序。重启后可登录使用。</p><p>​</p><h3 id="ifconfig命令显示或设置网络设备参数信息"><a href="#ifconfig命令显示或设置网络设备参数信息" class="headerlink" title="ifconfig命令显示或设置网络设备参数信息"></a>ifconfig命令显示或设置网络设备参数信息</h3><p>​网卡名为eth0或ens***   inet后为ip地址。若用ifconfig修改配置信息，在重启后将会失效。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs x86asm">ifconfig eth0 <span class="hljs-meta">down</span>  关闭指定网卡设备<br>ifconfig eth0 <span class="hljs-meta">up</span>    启动<br><span class="hljs-keyword">add</span>&lt;地址&gt; del&lt;地址&gt;  设置或删除IPv6地址<br></code></pre></td></tr></table></figure><p><img src="image-20220602115109504.png" alt="image-20220602115109504"></p><h1 id="Linux的文件层级结构标准（FHS）"><a href="#Linux的文件层级结构标准（FHS）" class="headerlink" title="Linux的文件层级结构标准（FHS）"></a>Linux的文件层级结构标准（FHS）</h1><table><thead><tr><th>目录名称</th><th>应放置文件的内容</th></tr></thead><tbody><tr><td>&#x2F;boot</td><td>开机所需文件—内核、开机菜单以及所需配置文件等</td></tr><tr><td>&#x2F;dev</td><td>以文件形式存放任何设备与接口</td></tr><tr><td>&#x2F;etc</td><td>配置文件</td></tr><tr><td>&#x2F;home</td><td>用户主目录</td></tr><tr><td>&#x2F;bin</td><td>存放单用户模式下还可以操作的<a href="https://www.linuxcool.com/">命令</a></td></tr><tr><td>&#x2F;lib</td><td>开机时用到的函数库，以及&#x2F;bin与&#x2F;sbin下面的命令要调用的函数</td></tr><tr><td>&#x2F;sbin</td><td>开机过程中需要的命令</td></tr><tr><td>&#x2F;media</td><td>用于挂载设备文件的目录</td></tr><tr><td>&#x2F;opt</td><td>放置第三方的软件</td></tr><tr><td>&#x2F;root</td><td>系统管理员的家目录</td></tr><tr><td>&#x2F;srv</td><td>一些网络服务的数据文件目录</td></tr><tr><td>&#x2F;tmp</td><td>任何人均可使用的“共享”临时目录</td></tr><tr><td>&#x2F;proc</td><td>虚拟文件系统，例如系统内核、进程、外部设备及网络状态等</td></tr><tr><td>&#x2F;usr&#x2F;local</td><td>用户自行安装的软件</td></tr><tr><td>&#x2F;usr&#x2F;sbin</td><td>Linux系统开机时不会使用到的软件&#x2F;命令&#x2F;<a href="https://www.linuxcool.com/">脚本</a></td></tr><tr><td>&#x2F;usr&#x2F;share</td><td>帮助与说明文件，也可放置共享文件</td></tr><tr><td>&#x2F;var</td><td>主要存放经常变化的文件，如日志</td></tr><tr><td>&#x2F;lost+found</td><td>当文件系统发生错误时，将一些丢失的文件片段存放在这里</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Linux系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
